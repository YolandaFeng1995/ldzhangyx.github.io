<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张逸霄的技术小站</title>
  
  <subtitle>欢迎RSS订阅我的个人主页！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ldzhangyx.github.io/"/>
  <updated>2019-07-30T07:49:14.937Z</updated>
  <id>http://ldzhangyx.github.io/</id>
  
  <author>
    <name>张逸霄</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简洁明快的命令行解析器argparse简明指南</title>
    <link href="http://ldzhangyx.github.io/2019/07/30/argparse/"/>
    <id>http://ldzhangyx.github.io/2019/07/30/argparse/</id>
    <published>2019-07-30T04:22:23.000Z</published>
    <updated>2019-07-30T07:49:14.937Z</updated>
    
    <content type="html"><![CDATA[<p>为了避免Python代码在需要设置的情况下进行hard code，我们有很多种方式将参数指定在一个地方，便于集中、解耦地修改参数。可以使用的解决办法很多，如设立config类，全局变量指明，以及使用argparse。</p><p>本文是argparse的简明指南，指明了argparse模块的快速上手方法。</p><h1 id="指南"><a href="#指南" class="headerlink" title="指南"></a>指南</h1><h2 id="argparse应该放在文件的什么地方？"><a href="#argparse应该放在文件的什么地方？" class="headerlink" title="argparse应该放在文件的什么地方？"></a>argparse应该放在文件的什么地方？</h2><p>argparse可以放在main.py文件的最上方，仅在import语句块下。</p><h2 id="argparse分为几个步骤？"><a href="#argparse分为几个步骤？" class="headerlink" title="argparse分为几个步骤？"></a>argparse分为几个步骤？</h2><p>四个步骤。</p><p>第一步，import argparse。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import argparse</span><br></pre></td></tr></table></figure><p>第二步，定义parser。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parser = argparse.ArgumentParser(description=&apos;Process some integers.&apos;)</span><br></pre></td></tr></table></figure><p>第三步，增加参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(&apos;integers&apos;, metavar=&apos;N&apos;, type=int, nargs=&apos;+&apos;,</span><br><span class="line">                    help=&apos;an integer for the accumulator&apos;)</span><br><span class="line">parser.add_argument(&apos;--sum&apos;, dest=&apos;accumulate&apos;, action=&apos;store_const&apos;,</span><br><span class="line">                    const=sum, default=max,</span><br><span class="line">                    help=&apos;sum the integers (default: find the max)&apos;)</span><br></pre></td></tr></table></figure><p>第四步，解析参数并实例化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">args = parser.parse_args()</span><br></pre></td></tr></table></figure><p>在调用main.py时，在后面增添命令行参数，或以default值的方式指定参数。后面的参数值可以以args变量的各个attribute直接使用，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">args.sum</span><br></pre></td></tr></table></figure><h2 id="add-augment接收几种参数？"><a href="#add-augment接收几种参数？" class="headerlink" title="add_augment接收几种参数？"></a>add_augment接收几种参数？</h2><blockquote><p>name or flags - 一个命名或者一个选项字符串的列表，例如 foo 或 -f, —foo。<br>action - 当参数在命令行中出现时使用的动作基本类型。<br>nargs - 命令行参数应当消耗的数目。<br>const - 被一些 action 和 nargs 选择所需求的常数。<br>default - 当参数未在命令行中出现时使用的值。<br>type - 命令行参数应当被转换成的类型。<br>choices - 可用的参数的容器。<br>required - 此命令行选项是否可省略 （仅选项可用）。<br>help - 一个此选项作用的简单描述。<br>metavar - 在使用方法消息中使用的参数值示例。<br>dest - 被添加到 parse_args() 所返回对象上的属性名。</p></blockquote><ul><li><p>name or flags<br>这几乎是必须的。<code>add_augment</code>后需要为参数命名。一般来说，使用<code>--name</code>字段即可。这样调用时写<code>--name=xxx</code>进行参数指定。</p></li><li><p>action<br>默认action是<code>store</code>，代表存储参数的值。</p></li><li><p>nargs<br>关联剁个参数到一个arguments里。<code>N</code>代表之后N个参数会形成一个列表。<code>+</code>代表片段内所有参数被聚集到列表（直到下一个参数）。</p></li><li><p>default<br>指定默认值。最常用。</p></li><li><p>type<br>指定参数类型，指定为<code>str</code>或<code>int</code>最常用。</p></li><li><p>help<br>填写参数的提示。</p></li></ul><p>参数实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(&apos;--model&apos;, type=str, default=&apos;LSTM&apos;,</span><br><span class="line">                    help=&apos;type of recurrent net (LSTM, QRNN, GRU)&apos;)</span><br><span class="line">parser.add_argument(&apos;--emsize&apos;, type=int, default=100,</span><br><span class="line">                    help=&apos;size of word embeddings&apos;)</span><br><span class="line">parser.add_argument(&apos;--when&apos;, nargs=&quot;+&quot;, type=int, default=[-1],</span><br><span class="line">                    help=&apos;When (which epochs) to divide the learning rate by 10 - accepts multiple&apos;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了避免Python代码在需要设置的情况下进行hard code，我们有很多种方式将参数指定在一个地方，便于集中、解耦地修改参数。可以使用的解决办法很多，如设立config类，全局变量指明，以及使用argparse。&lt;/p&gt;
&lt;p&gt;本文是argparse的简明指南，指明了a
      
    
    </summary>
    
      <category term="简明指南" scheme="http://ldzhangyx.github.io/categories/%E7%AE%80%E6%98%8E%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="argparse" scheme="http://ldzhangyx.github.io/tags/argparse/"/>
    
      <category term="python" scheme="http://ldzhangyx.github.io/tags/python/"/>
    
      <category term="tutorial" scheme="http://ldzhangyx.github.io/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>MobaXTerm简明指南</title>
    <link href="http://ldzhangyx.github.io/2019/07/29/mobaxterm-tutorial/"/>
    <id>http://ldzhangyx.github.io/2019/07/29/mobaxterm-tutorial/</id>
    <published>2019-07-29T09:24:38.000Z</published>
    <updated>2019-07-29T10:10:12.163Z</updated>
    
    <content type="html"><![CDATA[<p>这个简明指南旨在介绍MobaXTerm，Windows下的一个现代SSH客户端。</p><a id="more"></a><ol><li><p>首先下载MobaXTerm的对应版本。网址如下：<a href="https://mobaxterm.mobatek.net/download.html" target="_blank" rel="noopener">https://mobaxterm.mobatek.net/download.html</a></p></li><li><p>左上角点击Session，新建一个SSH连接。</p></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>配置完成。</li></ol><p>这篇文章主要想说明MobaXTerm一些优点：</p><ol><li><p>可以检测服务器运行情况。Remote Monitoring开启后，服务器的运行情况可以被实时地监控。</p></li><li><p>自带一个SFTP协议的可视化文件树，并且支持拖动上传下载文件。</p></li><li><p>附带了一个文本编辑器，是vi的良好替代。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个简明指南旨在介绍MobaXTerm，Windows下的一个现代SSH客户端。&lt;/p&gt;
    
    </summary>
    
      <category term="简明指南" scheme="http://ldzhangyx.github.io/categories/%E7%AE%80%E6%98%8E%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="tutorial" scheme="http://ldzhangyx.github.io/tags/tutorial/"/>
    
      <category term="software" scheme="http://ldzhangyx.github.io/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>Coding on Server! PyCharm远程调试、文件同步、GitHub版本控制简明指南</title>
    <link href="http://ldzhangyx.github.io/2019/07/29/ssh-for-pycharm/"/>
    <id>http://ldzhangyx.github.io/2019/07/29/ssh-for-pycharm/</id>
    <published>2019-07-29T09:22:55.000Z</published>
    <updated>2019-07-29T10:10:17.026Z</updated>
    
    <content type="html"><![CDATA[<p>这个指南适用于想在PyCharm上debug，同时使用远程服务器上的解释器运行代码的人。</p><a id="more"></a><p>使用PyCharm本地编辑代码，调用远程服务器的Python解释器。这个方案支持PyCharm单步调试等操作。</p><ol><li><p>新建或打开你想运行的项目。</p></li><li><p>Tools -&gt; Deployment -&gt; Configuration，打开界面。</p></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>在界面中配置对服务器的连接。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>在Mappings里面设置文件映射，映射到服务器的对应目录。</li></ol><p>注意，对应的目录是步骤3的root path + Mappings的Deployment path。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li><p>点击左边侧栏的√，使得服务器名字变为粗体。这代表你启用了这个Deployment。</p></li><li><p>Tools -&gt; Deployment -&gt; Settings，将文件同步设置，更改为仅在ctrl+S时保存。至此，所有的本地代码文件都会被同步到服务器上。</p></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>File -&gt; Settings -&gt; Project -&gt; Project Interpreter，打开界面，右上角选择小齿轮， Add，选择服务器上的python.exe应用程序，链接到远程解释器。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li><p>此时不需要特意设置path mappings，因为会沿用Deployment的mapping。</p></li><li><p>我们开始版本控制。VCS -&gt; Import into Version Control -&gt; Share project on GitHub。</p></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>此时你的每一次保存会被视为一次commit。</p><p>配置完毕。</p><p>以下是你可能遇到的问题：</p><ol><li><p>File Transfer失败。可以检查一下mapping地址是否正确。</p></li><li><p>Error:Python helpers are not copied yet to the remote host. Please wait until remote interpreter initialization finishes. 如果你的服务器名称是字符串，推荐改用IP地址；如果无效，请删除服务器上的.pycharm_helper文件夹，等待重新建立index。</p></li></ol><p>以下是一些附带的常用操作。</p><ol><li>PyCharm在debug的时候，可以在右下角的Console Tab点击Python图标，进入交互式Python，你可以在断点debug时运行各种表达式。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个指南适用于想在PyCharm上debug，同时使用远程服务器上的解释器运行代码的人。&lt;/p&gt;
    
    </summary>
    
      <category term="简明指南" scheme="http://ldzhangyx.github.io/categories/%E7%AE%80%E6%98%8E%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="python" scheme="http://ldzhangyx.github.io/tags/python/"/>
    
      <category term="tutorial" scheme="http://ldzhangyx.github.io/tags/tutorial/"/>
    
      <category term="software" scheme="http://ldzhangyx.github.io/tags/software/"/>
    
      <category term="PyCharm" scheme="http://ldzhangyx.github.io/tags/PyCharm/"/>
    
      <category term="SSH" scheme="http://ldzhangyx.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>《Deep Music Analogy via Latent Representation Distanglement》论文笔记</title>
    <link href="http://ldzhangyx.github.io/2019/07/29/ec2vae/"/>
    <id>http://ldzhangyx.github.io/2019/07/29/ec2vae/</id>
    <published>2019-07-29T06:30:57.000Z</published>
    <updated>2019-07-31T13:28:26.633Z</updated>
    
    <content type="html"><![CDATA[<p>组里大佬们的工作。</p><a id="more"></a><h1 id="论文笔记"><a href="#论文笔记" class="headerlink" title="论文笔记"></a>论文笔记</h1><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>类比制作（Analogy-making）是使用计算机算法生成自然而有创造力的音乐作品的关键方法。通常来说，将音乐的抽象形式（如，高层表示及这些表示之间的关系）做部分地转移，可以达成类比的目的。</p><p>这个过程要求对音乐表示做解耦（如，保留风格，创作内容不一样的曲子）。对于人类音乐家来说，是轻而易举的事情，但是这对计算机来说却是一个难题。要完成这个目标，我们有三个步骤：</p><ol><li>从观察（observation）中提取潜在的表示（latent representations）；</li><li>对表示进行解耦，使得解耦后每一部分有唯一的的语义解释；</li><li>将潜在表示映射回实际的音乐。</li></ol><p>这篇论文提出了一个具有明确约束（explicitly-constrained）的VAE模型（简称$EC^2-VAE$），作为所有三个子问题的统一解决方案。</p><p>更确切地说，本文专注于对8-beat音乐片段，以和弦（chord）作为condition，解耦音高（pitch）和节奏（rhythm）的表示。这个模型借用了其他音乐片段的表示，帮助我们实现了假设情景：一个片段如果使用别的音高、节奏、和弦将会怎么样？</p><p>最后，本文用客观的测量方法验证了模型的解耦方法，并通过一个主观的研究，评估了类比的实际例子。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>类比是一个生成高质量艺术作品的有效方法。一般来说，如果两个系统有共同的抽象表示、共同的表示间关系，那么这两个系统就是相似的。举个例子，“氢原子就像太阳系”，形式化表示为$A:B::C:D$的形式：“原子核:氢原子::太阳::太阳系”。两个系统共享的抽象就是“更大的部分是一个系统的中心”。对于生成算法来说，解决一个“what if”问题，即已知ABC，D是什么的问题，是生成算法的一个捷径。</p><p><code>A:B::C:D</code></p><p>对于音乐生成来说，如果A是B的抽象，A与B的关系是，A是音乐B的节奏pattern（一个例子）。那么，如果我们有另一个节奏pattern C，那么B搭配上C的pattern，得到的D将会是什么样子呢？</p><p>类比生成的一大优势是能够产生自然、有创意的结果。之所以自然，是因为模型复用了人类作品实例的表示（如image style等），以及这些概念之间的内在关系；之所以有创意，是因为这些表示使用了新颖的方式进行重新组合，进行了不同的表达。</p><p>我们清楚地意识到，类比的实质是对抽象表征的迁移，而不是浅层observation的组合和复读。要进行有意义的类比，需要对高层表征进行解耦，而这对计算机来说是一个难题。</p><p>EC2-VAE模型，就是一个学习解耦的有效工具。具体来说，Encoder从Observation中获取latent representation，语义约束（semantic constraints）解耦表征，使得每个部分具有唯一的解释，然后Decoder将解耦表示映射回实际的音乐，同时保持表示之间的内在关系。</p><p>作为生成模型，我们希望EC2-VAE有三个特性。</p><ol><li>对表示的解耦是明确的。即我们可以指定哪些维度表示哪些语义因素。</li><li>解耦不能对重建造成大量牺牲。</li><li>训练阶段不需要任何类似的例子，但该模型能够在推理阶段进行类比。</li></ol><p>为了评估，我们提出了一个新的指标（metric）进行调查。</p><h2 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h2><h3 id="类比生成"><a href="#类比生成" class="headerlink" title="类比生成"></a>类比生成</h3><p>两种类比算法：</p><ol><li>监督学习。需要大量标注，表示学习的需求较少。</li><li>严格的类比算法，不仅需要学习表示，还需要解耦表示，允许模型通过操纵任何解耦的表示来进行domain-free的类比。</li></ol><h3 id="表示学习-amp-解耦"><a href="#表示学习-amp-解耦" class="headerlink" title="表示学习 &amp; 解耦"></a>表示学习 &amp; 解耦</h3><p>（相关研究略）</p><p>本文模型并不直接约束z，而是将loss应用于与latent factor有关的中间输出。间接而显式的约束使得模型能够进一步将表示分解为音调、节奏等语义因素。</p><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>目标是解开时长为8拍的旋律的节奏和音高两个方面。数据均来源于Nottingham数据集。分辨率为1/4拍。</p><h3 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h3><p>每个8拍旋律都可以用一个32x130的矩阵表示。32为时间维，130为音高、保持和休止符维。</p><p>额外设计了一个节奏pattern约束网络的中间输出。8拍节奏模式表示为32x3的矩阵，3为one-hot向量，代表：(onset, holding, rest)。</p><p>chord作为条件，表示成32x12的矩阵（色度图），如12维的multi-hot向量。</p><h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p>模型基本结构与Vanilla sequence VAE一致。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>模型的创新点在于，为Decoder的一部分（橙色）设计了一个子任务，通过明确地鼓励$z_r$的中间输出，匹配节点的节奏特征，从而将潜在（latent）节奏表示$z_r$从整体的表示z中解开。</p><p>因此z的另一部分是节奏以外的一切，被解释为音高表示$z_p$。这样明确编码的解耦技术非常灵活，因为可以设计多个子部分，解开z的多个语义可解释的因子。只要可以定义相应潜在因子的中间输出。</p><p>新模型将chord作为condition，优点是使z免于存储和弦信息。</p><p>Decoder中，为了解耦，本文将z分割成了两半：$z_p$和$z_r$，让两边的向量各有128个维度。</p><h3 id="具有解耦功能的ELBO目标的理论正当性"><a href="#具有解耦功能的ELBO目标的理论正当性" class="headerlink" title="具有解耦功能的ELBO目标的理论正当性"></a>具有解耦功能的ELBO目标的理论正当性</h3><p>表征解耦有时会牺牲重建能力。本节主要证明了模型没有遭受大量的解耦-重构悖论，并且模型的likelihood bound接近原始条件的VAE，在一些情况下甚至可能相等。</p><p>ELBO目标函数：</p><script type="math/tex; mode=display">\begin{aligned} \operatorname{ELBO}(\phi, \theta)=& \mathbb{E}_{Q}\left[\log P_{\phi}(x | z, c)\right] \\ &-\mathbb{K} \mathbb{L}\left[Q_{\theta}(z | x, c)| | P_{\phi}(z | c)\right] \leq \log P_{\phi}(x | c) \end{aligned}</script><p>下面用$\mathcal{D}$代替$&amp;-\mathbb{K} \mathbb{L}\left[Q_{\theta}(z | x, c)| | P_{\phi}(z | c)\right]$。如果我们将图1(b)的中间节奏输出看作网络的hidden variable，模型的ELBO只会增加基于原始节奏的节奏重建loss，达到原始ELBO的下限。</p><script type="math/tex; mode=display">\begin{aligned} & \mathrm{ELBO}^{\mathrm{new}}(\phi, \theta) \\=& \mathbb{E}_{Q}\left[\log P_{\phi}(x | z, c)\right]-\mathcal{D}+\mathbb{E}_{Q}\left[\log P_{\phi_{r}}\left(r(x) | z_{r}\right)\right] \\=& \operatorname{ELBO}(\phi, \theta)+\mathbb{E}_{Q}\left[\log P_{\phi_{r}}\left(r(x) | z_{r}\right)\right] \end{aligned}</script><p>其中$\phi_r$代表节奏decoder的参数。新ELBO是原始ELBO的一个下界，因为$\mathbb{E}_{Q}\left[\log P_{\phi_{r}}\left(r(x) | z_{r}\right)\right] \leq 0$。</p><p>此外，如果将global decoder的其余部分采用原始节奏而不是节奏decoder的中间输出作为输入，则目标可以重写为：</p><script type="math/tex; mode=display">\begin{aligned} & \operatorname{ELBO}^{\mathrm{new}}(\phi, \theta) \\=& \mathbb{E}_{Q}\left[\underbrace{\log P_{\phi}\left(x | r(x), z_{p}, c\right)+\log P_{\phi}\left(r(x) | z_{r}, c\right)}_{x \underline{ \|} z_{r} | r(x),c;r(x)\underline{ \|}z_p}\right] -\mathcal{D}\\=& \mathbb{E}_{Q}\left[\log P_{\phi}(x, r(x) | z, c)\right]-\mathcal{D} \\=& \mathbb{E}_{Q}\left[P_{\phi}(x | z, c)+\log P_{\phi}(r(x) | x, z, c)\right]-\mathcal{D} \\=& \operatorname{ELBO}(\phi, \theta) \end{aligned}</script><p>第二个等号表示一个完美的解耦，最后一个等号成立，因为$r(x)$由$x$决定。换而言之，我们展示了在某些假设下，两个ELBO相同。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="客观指标"><a href="#客观指标" class="headerlink" title="客观指标"></a>客观指标</h3><p>一旦成功解耦，音高的任何变化都不应影响潜在的节奏表示。为此设计了两个指标：</p><ol><li>换位后的Δz；</li><li>一个augmantation-based序列的F-score。</li></ol><h4 id="音高转换的Δz可视化"><a href="#音高转换的Δz可视化" class="headerlink" title="音高转换的Δz可视化"></a>音高转换的Δz可视化</h4><p>将$F_i$定义为一个操作，将所有音符转$i$个半音。使用L1范数测量z的变化。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>增加音高时，音高的潜在表示的变化$z_p$远高于节奏的潜在表示变化$z_r$。这充分证明了解耦的成功。</p><h4 id="F-score"><a href="#F-score" class="headerlink" title="F-score"></a>F-score</h4><p>从IR角度，可以实现新的评估方法。我们将模型结构定义中的pitch-rhythm split作为ground truth，将factor-wise数据增强（保持一个，改变另一个，vice versa），作为query。将因此出现了最大variance的实际上latent dimensions，成为结果集（result set）。用这种方法，可以量化评估模型的P、R和F分数。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这是第一个为明确编码的解耦模型定制的测量方法，因此将random作为baseline。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>后面的case study略。</p><h1 id="想法与见解"><a href="#想法与见解" class="headerlink" title="想法与见解"></a>想法与见解</h1><p>一路看下来感觉很流畅，从音乐的结果来看也是一个非常好的模型，起解耦能力值得肯定。</p><p>值得挑一些刺的地方我认为有两点。</p><ol><li><p>在模型描述上，模型的图画得并不是很清楚。比如说在对z的分割上，原文中提到对z对半分割，而图中的描述并不能体现这一点。</p></li><li><p>F-score的evaluation做得并不是很清晰。这个measurement从实现上来说是衡量解耦效果的，但是与random对比并不是好的选择。我猜测，使用“没有明确解耦”的普通VAE比较，也许是一个更好的选择。这就像是ON-LSTM的论文，也有人质疑，普通的LSTM会不会也有一定的order性呢？</p></li></ol><p>模型可以发展的地方相比缺点来说要多得多。首先是解耦设计的灵活性，几乎可以无成本地在之后进行扩展；其次，解耦类比生成的这个topic本身，也应该是正确的方向。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;组里大佬们的工作。&lt;/p&gt;
    
    </summary>
    
      <category term="论文笔记" scheme="http://ldzhangyx.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="music generation" scheme="http://ldzhangyx.github.io/tags/music-generation/"/>
    
      <category term="VAE" scheme="http://ldzhangyx.github.io/tags/VAE/"/>
    
      <category term="representation learning" scheme="http://ldzhangyx.github.io/tags/representation-learning/"/>
    
      <category term="analogy" scheme="http://ldzhangyx.github.io/tags/analogy/"/>
    
  </entry>
  
  <entry>
    <title>我们来聊聊EsAC和Essen Folk Song Database</title>
    <link href="http://ldzhangyx.github.io/2019/07/26/esac/"/>
    <id>http://ldzhangyx.github.io/2019/07/26/esac/</id>
    <published>2019-07-26T07:01:14.000Z</published>
    <updated>2019-07-27T08:39:22.296Z</updated>
    
    <content type="html"><![CDATA[<p>古董级民歌数据集，对数据格式做了一些整理，在本文进行解释和说明。</p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>EsAC全称是Essen Associative Code，可能是现存最长的音乐编码系统。EsAC的概念可以追溯到200年前，于1982年正式形成。因为其年代过于久远，现在很多音乐文档，尤其是欧洲音乐文档都在使用这种编码格式。</p><p>1980年-1994年，项目在Helmut Schaffrath在Essen领导推动这个项目。1994年Schaffrach意外去世后，他生前所在的实验室继续着他的工作。</p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>EsAC项目搜集了世界各地（尤其是欧洲）的民歌和历史上的音乐，编码后用于方便地进行搜索、分析和表示研究。</p><h1 id="格式说明"><a href="#格式说明" class="headerlink" title="格式说明"></a>格式说明</h1><p>EsAC被编码为Database record，在esac-data.org能下载到其txt版本。在这里，一条record对应一首曲调。</p><p>一条常见的记录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ALTDEU</span><br><span class="line">CUT[Landsknecht als Schlemmer]</span><br><span class="line">REG[Europa, Mitteleuropa, Deutschland]</span><br><span class="line">KEY[A0359  08  G 4/4]</span><br><span class="line">MEL[1_  3b_3b_4_4_  5_5_5_7b_  ^_656_6_  5__0_</span><br><span class="line">    3b_  2_3b_2_2_  1__.+1_  +1_7b_6_6_  5__0_</span><br><span class="line">    5_  +1__+1__  7b__5__  7b__6b__  5__0_</span><br><span class="line">    7b_  5_5_5_3b_  5_5_5_1_  4_3b_2_2_  1__0_</span><br><span class="line">    1_  3b_3b_4_4_  5_5_5_7b_  ^_656_6_  5__0_</span><br><span class="line">    3b_  2_3b_2_2_  1__.+1_  +1_7b_6_6_  5__0_</span><br><span class="line">    5_  +1__+1__  7b__5__  7b__6b__  5__0_</span><br><span class="line">    7b_  5_5_5_3b_  5_5_5_1_  4_3b_2_2_  1__0__</span><br><span class="line">    +1__+1_+1_  7b__6b__  5_5_5__  4_4_4__  3b__3b__</span><br><span class="line">    7b_7b_7b__  5__5_5_  4_4_4__</span><br><span class="line">    3b_3b_3b_3b_  4_3b_2_2_  1__3b__</span><br><span class="line">    4_.41_2_  3b_.45_.6b  7b__.6b_  5_4_3b_2_  1__. //] &gt;&gt;</span><br><span class="line">FCT[Romanze, Ballade, Lied]</span><br><span class="line">CMT[Forster II. 1540 No. 17.]</span><br></pre></td></tr></table></figure><p>其中音乐旋律信息为单音旋律，由简谱格式构成。是的，当时他们采用了简谱格式。旋律包含在MEL字段里。</p><ul><li>CUT：标题</li><li>REG：区域</li><li>TRD：曲调来源，如书籍、录音带</li><li>KEY：签名行</li><li>MEL：旋律线</li><li>FKT：歌曲功能，如舞曲</li><li>BEM：标记</li><li>TXT：歌词</li></ul><h2 id="KEY"><a href="#KEY" class="headerlink" title="KEY"></a>KEY</h2><p>签名行包含了正确解释旋律所需要的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEY[A0359  08  G 4/4]</span><br></pre></td></tr></table></figure><p>这一行包含了：签名、最小节奏单位、调性、拍子，四个信息。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="EsAC-syntax"><a href="#EsAC-syntax" class="headerlink" title="EsAC syntax"></a>EsAC syntax</h2><p>EsAC的语法基本与简谱一致，但在细微之处做了很多的补充。<br>MEL中的数字代表首调音高，而2、3等数字代表相对音高。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>节奏以下划线和点作为标记。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>我自己在看数据的时候遇到了”^”的标记，这个意味着跨小节延音。</li><li>两个空格代表小节线</li><li>换行代表断句。</li><li>注意，这里的附点一般出现在延音符后，会将延音后总时长*150%。</li><li>注意，延音符连着出现，时长成倍增长。</li></ul><p>i.e. <code>5__</code>的时长是4倍，<code>5__.</code>的时长是6倍，<code>5___</code>的时长是8倍。</p><ul><li>标注中会出现括号，意味着出现了三连音等连音。</li></ul><p>i.e. <code>(-3-71)  3_2_(-5-72)  4_3_</code></p><p>即使经过这样的处理之后，还是会有这等肮脏的例子，可以说是非常恶心了……</p><p>i.e. <code>33  2__(^_1#_2_)(2_3_4_)  5__(^_4#_5_)(5_3_1_)</code></p><p>甚至还有打拍子……：</p><p>i.e. <code>xxxx  xxxx  1_2-5  1_ //] &gt;&gt;</code></p><p>甚至还有神奇的调子（居然还是德国标注法，将B调标为H调是什么鬼辣！）：</p><p>i.e. <code>KEY[U0002  16  H 6/8]</code></p><p>甚至还有不在旋律结束处加//标记的：</p><p>i.e. <code>1_+2+31_+3+51_+5_+5__  1_+5+61_+6++11_++1_++1__] &gt;&gt;</code></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="http://wiki.ccarh.org/wiki/EsAC" target="_blank" rel="noopener">http://wiki.ccarh.org/wiki/EsAC</a></li><li><a href="http://www.cs.uu.nl/events/dech1999/dahlig/tsld001.htm" target="_blank" rel="noopener">http://www.cs.uu.nl/events/dech1999/dahlig/tsld001.htm</a></li><li><a href="http://www.esac-data.org/" target="_blank" rel="noopener">http://www.esac-data.org/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;古董级民歌数据集，对数据格式做了一些整理，在本文进行解释和说明。&lt;/p&gt;
    
    </summary>
    
    
      <category term="音乐生成" scheme="http://ldzhangyx.github.io/tags/%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90/"/>
    
      <category term="music generation" scheme="http://ldzhangyx.github.io/tags/music-generation/"/>
    
      <category term="dataset" scheme="http://ldzhangyx.github.io/tags/dataset/"/>
    
      <category term="music information retrival" scheme="http://ldzhangyx.github.io/tags/music-information-retrival/"/>
    
      <category term="MIR" scheme="http://ldzhangyx.github.io/tags/MIR/"/>
    
      <category term="音乐结构分析" scheme="http://ldzhangyx.github.io/tags/%E9%9F%B3%E4%B9%90%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>《Graph Neural Network for Music Score Data and Modeling Expressive Piano Performance》论文笔记</title>
    <link href="http://ldzhangyx.github.io/2019/07/21/gnn-for-performance/"/>
    <id>http://ldzhangyx.github.io/2019/07/21/gnn-for-performance/</id>
    <published>2019-07-21T08:38:46.000Z</published>
    <updated>2019-07-21T16:15:10.050Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章的亮点在于利用了图网络编码额外信息，来改进其他任务效果的思想。这篇文章写作清晰，想法新颖，值得关注。文章出自韩国KAIST的Juhan Nam老师组（出身Stanford的CCRMA实验室，师承Malcolm Slaney老师）。</p><a id="more"></a><h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>本文使用图神经网络表示乐谱，将其应用于钢琴演奏的渲染过程中。具体地说，本文使用了音符级别的门控图网络（GGNN）和在小节级别的带分层Attention机制（HAN）的bi-LSTM，进行模型设计。为了建模不同的表现风格，本文使用了VAE。试验结果表明，本文提出的模型产生了更像人类的表现。</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>如同演员的表现能更好地调动观众情绪一样，音乐的演奏也具有很多细节。使用计算方法表达演奏，从基于规则的方法、高斯过程、卡尔曼滤波、贝叶斯网络、条件随机场、循环神经网络，都有相关的研究。然而，之前的方法仍然在这个task上有缺陷。</p><p>近年来，生成模型在各个领域取得了很多成果，音乐上如自动作曲、音乐转录、声音合成等，都有显著成就。</p><p>将神经网络应用到音乐数据，一个主要问题在于定义其输入结构。一般来说，乐谱根据其音高，转换成一个一维的序列数据(Simon &amp; Oore, 2017; Oore et al., 2018; Jeong et al., 2018)。但是一维的编码可能会丢失音符之间的一些多边关系。</p><p>另一种输入表示是通过采样，得到Piano Roll的2D矩阵。这使得CNN可以使用，但是基于采样的表示需要更高的维度，和随乐曲复杂性而跟着增长的时间分辨率。这种高维可能会阻碍模型学习长期结构。</p><p>为了解决这个问题，我们提出了一种基于GNN的模型，音符作为图中的节点，而乐谱中音符的关系被转化为一个表（后文会详细论述表的构造）。</p><p>如图1所示，我们将GNN结合到轻量的RNN来学习长期结构。此外，我们建议使用迭代循环来使用彼此的结果更新GNN和RNN的输入。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>与其他生成任务类似，给定condition，生成各种结果是建模有表现力的演奏的重要目标。我们采用VAE训练模型，包含相同条件C但具有不同输出Y的数据。</p><p>系统的范围侧重于为MusicXML格式的乐谱生成MIDI格式的演奏。</p><p>论文两点有两个：</p><ol><li>首次尝试图网络学习乐谱表示；</li><li>HAN+RNN的新方法，对钢琴演奏的模仿是无需数据上的额外注释的。</li></ol><h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><h2 id="GNN"><a href="#GNN" class="headerlink" title="GNN"></a>GNN</h2><p>虽然CNN和RNN分别在图像处理和序列建模方面取得了重大进展，但是有各种类型的数据无法用这些网络正确处理，图形就是其中一个例子。利用图形神经网络（GNN）处理图形数据的早期研究由（Gori等人，2005）和（Scarselli等人，2009）引入。（Li et al。，2016）介绍了门控图神经网络（GGNN），它结合了现代RNN实践的门控循环单元和GNN。虽然之前的模型受到收缩映射的限制，但GGNN模型首先克服了这一局限。最近使用GNN的研究在各种任务中取得了最新成果，例如分析引文网络（Kipf＆Welling，2016），分子结构（Jin等，2018），程序代码（Allamanis等，2018）），学习结构化政策（Wang et al。，2018a）。</p><h2 id="VAE"><a href="#VAE" class="headerlink" title="VAE"></a>VAE</h2><h1 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h1><p>我们的模型组合了音符级的GGNN，小节级的HAN（使用LSTM），使用在迭代方法中。</p><h2 id="GGNN"><a href="#GGNN" class="headerlink" title="GGNN"></a>GGNN</h2><p>我们采用了有向多类别边GGNN（其实就是有向图，箭头还分了个类）学习输入乐谱中的隐含表示。图可以表示为边与节点的集合，即$G=(V,E)$，其中V是节点，E是边。在音乐中，E就是相邻音符之间的连接线。</p><p>我们定义了六种边：next，rest，onset，sustain，voice，slur。</p><p>next：将音符连接到接下来的音符上。如接下来的音符在上一个音符结束时恰好开始。<br>rest：将音符连接到休止符后面的音符上。多个休止符会被当做单个处理。<br>onset：连接两个同时开始的音符。<br>sustain：在一个音符的开始和结尾中间出现的音符用sustain连接。<br>voice：是next边集的子集。它们仅用以连接同一个语音内的音符。<br>slur：在同一个圆滑线下的音符通过slur边互相连接。</p><p>（sustain和slur的定义有一些模糊，因为其没有注明是否仅为邻接的）</p><p>除了onset边以外，所有的边都是有向的。所以我们将前向和后向的边视为两种不同的类型。同时，为每一个音符添加自我连接，这样一共得到12种不同的边。每种边共享不同的权重参数。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们使用GGNN，因为它在学习图中的节点级表示方面有优势。</p><p>GGNN的概念介绍如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="r1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="r2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="r3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="r4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>论文中对于GGNN的表述没有超出上面所介绍的范围。</p><h2 id="Hierarchical-Attention-RNN（HAN）"><a href="#Hierarchical-Attention-RNN（HAN）" class="headerlink" title="Hierarchical Attention RNN（HAN）"></a>Hierarchical Attention RNN（HAN）</h2><p>我们之前的工作曾使用过HAN渲染有表现力的钢琴演奏。（对比了HRNN和HMRNN）</p><p>在分层RNN模型中，使用HAN的原因是其直接适用于GNN。事实上，因为HAN使用注意力来总结较低级别的表示，因此它可以直接应用于任何类型的网络。</p><p>我们的系统里，使用了context attention（《Hierarchical attention networks for document classification》里的），将音符表示转为小节向量。attention同时使用了多头注意力机制（multi-head attention）。通过这种方法，每一个小节的内容可以转化到高层的一个节点里。</p><p>作者的公式有一些问题，不过大致上就是attention计算那一套，其中$u_c$是context vector。因为context vector并没有接受其他输入，实际上这是一个trainable的参数。计算细节不在此赘述。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="eq2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Iterative-Sequential-Graph-Network"><a href="#Iterative-Sequential-Graph-Network" class="headerlink" title="Iterative Sequential Graph Network"></a>Iterative Sequential Graph Network</h2><p>组合来自不同分层单元的输出的简单方法是将它们连接为单个向量。然而，这种方法具有以下限制：较低级别的层不能以较高层中编码的长期上下文为条件，因为较高级别的输出不会影响较低级别的层。<br>在HRNN和HM-RNN中，较低级别的隐藏状态在分层边界处被馈送到较高级别，反之亦然。然而，在HAN中，隐藏状态传播仅在自下而上的方向上进行。<br>当模型的目标结果是给定顺序输入的单个输出时，例如在最初应用HAN的文档分类中，这种限制并不重要。但是为每个音符学习音乐表示时，我们希望高层的信息也能传到底层去，利用更加扩展的上下文学习。<br>为了克服这个限制，我们提出了GGNN和HAN的组合，称为迭代顺序图网络（ISGN），GGNN和HAN以迭代的方式将它们的结果互相馈送：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>GGNN不仅接受音符表示，还接受高层的hidden state，以concatenate的方式输送。第一次迭代中，高层信息为0，之后再用HAN高层状态接进来。</p><p>这样的结构有两个优点：</p><ol><li>GGNN可以将HAN输出作为输入，考虑更长时间的context。</li><li>RNN可以自回归推理，可以补偿GGNN中缺乏的自回归机制。</li></ol><p>另外，多次迭代也一定程度上能弥补非自回归模型的缺点。</p><h1 id="Expressive-Performance-Rendering-System"><a href="#Expressive-Performance-Rendering-System" class="headerlink" title="Expressive Performance Rendering System"></a>Expressive Performance Rendering System</h1><p>下图展示了模型结构。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h2><p>模型使用预定义的乐谱和演奏作为输入和输出。特征提取方案在《 Score and performance features for rendering expressive music performances》有详述。输入feature包括各类音乐信息，比如音高、市场、速度、响度、起始偏差、清晰度、踏板等。</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>系统包括三个结构：乐谱编码器$E_s$，演奏编码器$E_p$，演奏解码器$D_p$。对于给定输入X，$E_s$推断乐谱条件$C$。模块包括两层GGNN，和一层LSTM。输入X经过三层选链接，第一层GGNN仅更新音符级别特征（固定小节级别的特征）；第二层GGNN更新整个隐状态。输出进行skip connection组成C。</p><p>根据C和对应的演奏特征Y，$E_p$编码出latent vector Z。Encoder的输入使用了全连接，对concatenated data进行了降维。编码器由GGNN和LSTM组成，具体如图。</p><p>Decoder解码器产生演奏特征Y，迭代地推断输入乐谱中每个音符的演奏参数。解码采用了分层解码的概念（《A hierarchical latent vector model for learning long-term structure in music》）。</p><p>解码器的输入是C、小节级别演奏风格向量$z_m$，和初始演奏参数的concatenatation。具体设置可以参考原论文。</p><h1 id="Related-Works"><a href="#Related-Works" class="headerlink" title="Related Works"></a>Related Works</h1><p>最近使用深度神经网络进行音乐生成的最值得注意的研究是Music Transformer（Huang et al。，2019）。该研究的目的是通过将作曲和表演结合为一个单一阶段来产生音乐。基于由self-attention组成的原始Transformer模型（Vaswani等，2017），他们提出了相对位置嵌入的音高和时间，并成功地通过超越他们以前的基于LSTM的模型生成具有长期结构的音乐作品 （Oore等，2018）。然而，如上所述，该任务与本文的范围不同。我们的研究侧重于解释和执行给定的乐谱，但Music Transformer更像是制作即兴创作。</p><p>最近，VAE已被用于若干音乐数据生成模型中，例如音乐生成（Roberts等，2018），音乐风格转移（Brunner等，2018）。<br>（Maezawa，2018）正如我们在这项工作中所做的那样，采用有condition的VAE来表现音乐表现。然而，VAE中的潜在向量是在音符级别生成的，而我们的模型使用VAE编码整个演奏，因此单个潜在向量可以表示整个片段的表现风格。<br>已经有关于使用包括神经网络的数据驱动方法自动生成表达演奏任务的研究，其在（Cancino-Chacon等人，’2018）中得到了很好的总结，但是它们实现了有限的演奏要素。<br>例如，他们只推断了速度（Malik＆Ek，2017），忽略了速度变化（Lauly，2010; Giraldo＆Ramirez，2016），假设旋律总是高音（Flossmann等，2013; Kim等 。，2013），或使用标准化的节奏（Grachten＆Cancino Chacon’，2017）。<br>我们的模型旨在实现全面的演奏要素。</p><p>将图连接应用在音乐上，生成有表现力的演奏，也有研究(Moulieras &amp; Pachet, 2016)。但是系统仅限于生成单音旋律，且图连接仅用于捕获单音上的音符特征。这个研究与我们的有基本性的不同。</p><h1 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h1><h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><p>收集了MuseScore、Musicalion（这是公开的吗？）的MusicXML数据，以及Yamaha e-competition的MIDI数据，将其做了对齐（Makamura, 2017）。</p><p>收集到了16位作曲家的227个作品，以及1061个演奏，包含3606930个音符。</p><h2 id="对比模型"><a href="#对比模型" class="headerlink" title="对比模型"></a>对比模型</h2><p>本文使用了基于HAN的VAE模型。HAN模型包括使用HAN的score encoder和演奏decoder。score encoder使用音符和语音LSTM作为字符表示，HAN作为节拍几别和小节级别的表示。Baseline省略了HAN和语音LSTM，仅使用音符级别的LSTM。仅使用GGNN替换语音和音符LSTM的修改版本被称为G-HAN。</p><p>模型对比如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="训练设置"><a href="#训练设置" class="headerlink" title="训练设置"></a>训练设置</h2><p>具体参见原论文。</p><h2 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h2><h3 id="重建误差（Reconstruction-Loss）"><a href="#重建误差（Reconstruction-Loss）" class="headerlink" title="重建误差（Reconstruction Loss）"></a>重建误差（Reconstruction Loss）</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="相关系数"><a href="#相关系数" class="headerlink" title="相关系数"></a>相关系数</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="聆听测试"><a href="#聆听测试" class="headerlink" title="聆听测试"></a>聆听测试</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>我们提出了一种迭代序列图网络，它结合了门控图神经网络和分层注意RNN，用于为给定的乐谱建模表现的钢琴演奏。定量和定性评估表明，与以前的模型相比，所提出的模型取得了显着的进步。对于未来的工作，我们将进一步研究如何定量评估表达性能模型。</p><h1 id="想法和见解"><a href="#想法和见解" class="headerlink" title="想法和见解"></a>想法和见解</h1><p>用图网络进行乐谱表示是一个很棒的主意。音乐不同于NLP其他任务的一点在于，它可以是多声部协调进行的；音乐的Piano Roll相比图像的丰富信息来说，也比较稀疏。乐谱上的音符稀疏度，用一个图来表示是相当合理的。规定图网络的连接线属性，对图拓扑结构进行定义和约束，图就能自然地表示出乐谱。</p><p>论文阐述了一个生成任务，VAE的中间结果z是随机取样的。但是从表示学习的角度来看，VAE能解耦出演奏风格，z必然有其意义。如果指定VAE中间的z，而不是随机生成，那么能否做到某种意义上的演奏风格迁移？</p><p>本文的模型设计也颇有意思。实际上，LSTM的表示是GNN的高层表示，这种表示方法是自然且高效的，如果不使用GNN，这种方法难以自然地导出。HAN和GNN的流动机制也是一个很有意思的点。</p><p>评估中，模型的性能并不突出，我个人猜测是因为音乐生成任务较困难，在其他的task上也许能有更好的表现。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章的亮点在于利用了图网络编码额外信息，来改进其他任务效果的思想。这篇文章写作清晰，想法新颖，值得关注。文章出自韩国KAIST的Juhan Nam老师组（出身Stanford的CCRMA实验室，师承Malcolm Slaney老师）。&lt;/p&gt;
    
    </summary>
    
      <category term="论文笔记" scheme="http://ldzhangyx.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="音乐生成" scheme="http://ldzhangyx.github.io/tags/%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90/"/>
    
      <category term="music generation" scheme="http://ldzhangyx.github.io/tags/music-generation/"/>
    
      <category term="VAE" scheme="http://ldzhangyx.github.io/tags/VAE/"/>
    
      <category term="structure" scheme="http://ldzhangyx.github.io/tags/structure/"/>
    
      <category term="图网络" scheme="http://ldzhangyx.github.io/tags/%E5%9B%BE%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>音乐生成的兵器库：必要的包和数据集</title>
    <link href="http://ldzhangyx.github.io/2019/07/21/music-toolkits/"/>
    <id>http://ldzhangyx.github.io/2019/07/21/music-toolkits/</id>
    <published>2019-07-21T03:08:44.000Z</published>
    <updated>2019-07-21T08:37:31.171Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><p> 首先做个小宣传。因为很多想做这一块的同行本科生们不是很清楚国内外的院校列表。有一位前辈在GitHub上整理了大部分的院校列表出来，我也对这个列表做了一点贡献。<a href="https://github.com/beiciliang/intro2musictech/blob/master/INFO-ResearchGroups.md" target="_blank" rel="noopener">点击查看</a></p><p> Python官网整理的Python库有这些：<a href="https://wiki.python.org/moin/PythonInMusic" target="_blank" rel="noopener">链接</a></p><h1 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h1><h2 id="Python-MIDI"><a href="#Python-MIDI" class="headerlink" title="Python-MIDI"></a>Python-MIDI</h2><ul><li>项目官网：<a href="https://github.com/vishnubob/python-midi/tree/feature/python3" target="_blank" rel="noopener">https://github.com/vishnubob/python-midi/tree/feature/python3</a></li></ul><p>很多库的前置库，安装时记得选择其Python 3的branch。</p><h1 id="乐谱生成"><a href="#乐谱生成" class="headerlink" title="乐谱生成"></a>乐谱生成</h1><p> 相关的知乎问题：<a href="https://www.zhihu.com/question/23003386" target="_blank" rel="noopener">链接</a></p><h2 id="LilyPond"><a href="#LilyPond" class="headerlink" title="LilyPond"></a>LilyPond</h2><ul><li>项目官网：<a href="http://lilypond.org/index.html" target="_blank" rel="noopener">http://lilypond.org/index.html</a></li></ul><p>LilyPond是GNU Project的一部分，是免费的乐谱生成软件。生成的乐谱质量很高，支持从xml/mxl以及从midi转化成lilypond格式源代码（.ly），并且可以使用类LaTeX语言编写。</p><p>可以用两个方法通过Python代码调用LilyPond库：</p><ol><li>Python-ly库，其GitHub地址在<a href="https://github.com/wbsoft/python-ly" target="_blank" rel="noopener">这里</a></li><li>mingus的lilypond模块，GitHub地址在<a href="https://github.com/bspaans/python-mingus" target="_blank" rel="noopener">这里</a></li></ol><h2 id="MuseScore"><a href="#MuseScore" class="headerlink" title="MuseScore"></a>MuseScore</h2><ul><li>项目官网：<a href="https://musescore.org" target="_blank" rel="noopener">https://musescore.org</a></li><li>社区和乐谱集：<a href="https://musescore.org" target="_blank" rel="noopener">https://musescore.org</a></li></ul><p>MuseScore的特点在于其有充分活跃的社区。这个软件和LilyPond都可以通过XML和MIDI进行数据传送，所以在接口方面很灵活。</p><h1 id="音乐的符号化表示"><a href="#音乐的符号化表示" class="headerlink" title="音乐的符号化表示"></a>音乐的符号化表示</h1><h2 id="music21"><a href="#music21" class="headerlink" title="music21"></a>music21</h2><ul><li>项目官网：<a href="http://web.mit.edu/music21/" target="_blank" rel="noopener">http://web.mit.edu/music21/</a></li></ul><p>对Python3的支持很好，也是目前为止最完善的一个Python库、武器库。包括音乐的乐谱显示、音乐合成、矩阵分析、语料库、符号表达等。</p><h2 id="ABC格式"><a href="#ABC格式" class="headerlink" title="ABC格式"></a>ABC格式</h2><ul><li>项目官网：<a href="http://abcnotation.com/" target="_blank" rel="noopener">http://abcnotation.com/</a></li></ul><p>ABC格式是一种复杂而古早的模式，很多早期的数据集使用了这种标注。ABC格式可以转化为music21，或者被其他方法解析。</p><h2 id="Pretty-MIDI表示的Piano-Roll"><a href="#Pretty-MIDI表示的Piano-Roll" class="headerlink" title="Pretty_MIDI表示的Piano Roll"></a>Pretty_MIDI表示的Piano Roll</h2><ul><li>项目官网：<a href="https://github.com/craffel/pretty-midi" target="_blank" rel="noopener">https://github.com/craffel/pretty-midi</a></li><li>我以前写的文章：<a href="https://www.cnblogs.com/ldzhangyx/p/7789939.html" target="_blank" rel="noopener">https://www.cnblogs.com/ldzhangyx/p/7789939.html</a></li></ul><p>一个方便将MIDI文件转化为Piano Roll的库。这个库被用在Google Magenta里，我自己的项目也要使用它。master分支现在已经支持了Python3。</p><h2 id="MIR-eval"><a href="#MIR-eval" class="headerlink" title="MIR_eval"></a>MIR_eval</h2><ul><li>项目官网：<a href="https://craffel.github.io/mir_eval/" target="_blank" rel="noopener">https://craffel.github.io/mir_eval/</a></li></ul><p>Google的Colin Raffel写的一个库。这个Python库提供了一些和弦的向量表示，以及和弦分析的一些其他有用的工具。</p><h2 id="mingus"><a href="#mingus" class="headerlink" title="mingus"></a>mingus</h2><ul><li>项目官网：<a href="https://bspaans.github.io/python-mingus/" target="_blank" rel="noopener">https://bspaans.github.io/python-mingus/</a></li><li>Python 3版本：<a href="https://github.com/edudobay/python-mingus" target="_blank" rel="noopener">https://github.com/edudobay/python-mingus</a></li></ul><p>作者很久没有维护过了，但是从快速上手来看是一个不错的Python库。Python 3版本已经给出。</p><h1 id="音乐合成"><a href="#音乐合成" class="headerlink" title="音乐合成"></a>音乐合成</h1><h2 id="PySynth"><a href="#PySynth" class="headerlink" title="PySynth"></a>PySynth</h2><ul><li>项目官网：<a href="https://mdoege.github.io/PySynth/" target="_blank" rel="noopener">https://mdoege.github.io/PySynth/</a></li></ul><p>主要用处就是将midi或ABC格式的文件转化为wav文件，有多种合成方法可选，十分方便好用。</p><h2 id="pyfluidsynth3"><a href="#pyfluidsynth3" class="headerlink" title="pyfluidsynth3"></a>pyfluidsynth3</h2><ul><li>项目官网：<a href="https://github.com/tea2code/pyfluidsynth3" target="_blank" rel="noopener">https://github.com/tea2code/pyfluidsynth3</a></li></ul><p>Pretty-MIDI的前置库，用于合成音乐。这里推荐的是Python 3的重写版本。</p><ul><li>项目官网</li></ul><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><h2 id="Nottingham-Dataset"><a href="#Nottingham-Dataset" class="headerlink" title="Nottingham Dataset"></a>Nottingham Dataset</h2><ul><li>地址：<a href="https://github.com/jukedeck/nottingham-dataset" target="_blank" rel="noopener">https://github.com/jukedeck/nottingham-dataset</a></li></ul><p>特别有名的数据集，音乐界的MNIST。ABC格式可以被上面一些库直接解析，MIDI格式也可以转换。数据预处理的办法一般是shift到12个大调或者小调，速度调整至120bpm。</p><h2 id="Lakh-Dataset"><a href="#Lakh-Dataset" class="headerlink" title="Lakh Dataset"></a>Lakh Dataset</h2><ul><li>地址：<a href="https://colinraffel.com/projects/lmd/" target="_blank" rel="noopener">https://colinraffel.com/projects/lmd/</a></li><li>GitHub：<a href="https://github.com/craffel/midi-dataset" target="_blank" rel="noopener">https://github.com/craffel/midi-dataset</a></li></ul><p>Lakh MIDI数据集是176,581个独特MIDI文件的集合，其中45,129个已匹配并与Million Song Dataset中的条目对齐。</p><h2 id="Lakh-Pianoroll"><a href="#Lakh-Pianoroll" class="headerlink" title="Lakh Pianoroll"></a>Lakh Pianoroll</h2><ul><li>地址：<a href="https://salu133445.github.io/lakh-pianoroll-dataset/" target="_blank" rel="noopener">https://salu133445.github.io/lakh-pianoroll-dataset/</a></li></ul><p>上面数据集的转化版本，但是表示使用了Pianoroll。</p><h2 id="Million-Songs"><a href="#Million-Songs" class="headerlink" title="Million Songs"></a>Million Songs</h2><ul><li>地址：<a href="https://labrosa.ee.columbia.edu/millionsong/" target="_blank" rel="noopener">https://labrosa.ee.columbia.edu/millionsong/</a></li></ul><p>不是midi文件而是波形文件，特点在于数据量极大。</p><h2 id="SALAMI-Dataset"><a href="#SALAMI-Dataset" class="headerlink" title="SALAMI Dataset"></a>SALAMI Dataset</h2><ul><li>地址：<a href="https://github.com/DDMAL/salami-data-public" target="_blank" rel="noopener">https://github.com/DDMAL/salami-data-public</a></li></ul><p>非常完整的标注数据集，值得一提的是可以从中提取和弦标注进行学习。</p><h2 id="MAESTRO-Piano-Dataset"><a href="#MAESTRO-Piano-Dataset" class="headerlink" title="MAESTRO Piano Dataset"></a>MAESTRO Piano Dataset</h2><ul><li>地址：<a href="https://magenta.tensorflow.org/datasets/maestro" target="_blank" rel="noopener">https://magenta.tensorflow.org/datasets/maestro</a></li></ul><p>Google Magenta一直在用的钢琴演奏数据集。有文字标注版和音乐原版，数据量极为庞大。</p><h2 id="IMSLP-Music-Library"><a href="#IMSLP-Music-Library" class="headerlink" title="IMSLP Music Library"></a>IMSLP Music Library</h2><ul><li>地址：<a href="https://imslp.org/" target="_blank" rel="noopener">https://imslp.org/</a></li></ul><p>国际上最大的乐谱典藏数据库。其亮点在于录音和乐谱非常全，也许可以用于图像识别领域。有些乐谱似乎是收费的。</p><h2 id="the-Classical-piano-MIDI-database"><a href="#the-Classical-piano-MIDI-database" class="headerlink" title="the Classical piano MIDI database"></a>the Classical piano MIDI database</h2><ul><li>地址：<a href="http://www.piano-midi.de/" target="_blank" rel="noopener">http://www.piano-midi.de/</a></li></ul><p>需要自己爬下来整理，钢琴MIDI数据集。</p><h2 id="The-Largest-MIDI-Dataset"><a href="#The-Largest-MIDI-Dataset" class="headerlink" title="The Largest MIDI Dataset"></a>The Largest MIDI Dataset</h2><ul><li>地址：<a href="https://www.reddit.com/r/WeAreTheMusicMakers/comments/3ajwe4/the_largest_midi_collection_on_the_internet/" target="_blank" rel="noopener">https://www.reddit.com/r/WeAreTheMusicMakers/comments/3ajwe4/the_largest_midi_collection_on_the_internet/</a></li></ul><p>可以说是很神奇了，在Reddit上贡献了出来。是我看到的最大的MIDI数据集（3.65Gb），没有之一。</p><h2 id="MuseData"><a href="#MuseData" class="headerlink" title="MuseData"></a>MuseData</h2><ul><li>地址：<a href="http://musedata.stanford.edu/" target="_blank" rel="noopener">http://musedata.stanford.edu/</a></li></ul><p>也是需要自己爬，但是这里的数据是根据流派做好划分的，非常一目了然。</p><h2 id="JSB-Chorales"><a href="#JSB-Chorales" class="headerlink" title="JSB Chorales"></a>JSB Chorales</h2><ul><li>地址：<a href="https://github.com/czhuang/JSB-Chorales-dataset" target="_blank" rel="noopener">https://github.com/czhuang/JSB-Chorales-dataset</a></li></ul><p>四声部众赞歌数据集。源地址挂掉了，这个GitHub提供了pickle包，很好用。</p><h2 id="FMA-Dataset"><a href="#FMA-Dataset" class="headerlink" title="FMA Dataset"></a>FMA Dataset</h2><ul><li>地址：<a href="https://github.com/mdeff/fma" target="_blank" rel="noopener">https://github.com/mdeff/fma</a></li></ul><p>这是一个音乐分析用的数据集，其亮点在于对流派、ID等数据的详尽标注。具体可以阅读readme。</p><h2 id="Midi-Archive"><a href="#Midi-Archive" class="headerlink" title="Midi Archive"></a>Midi Archive</h2><ul><li>地址：<a href="http://archive.cs.uu.nl/pub/MIDI/" target="_blank" rel="noopener">http://archive.cs.uu.nl/pub/MIDI/</a></li></ul><p>罗切斯特大学维护的一个数据集。</p><h2 id="The-Session"><a href="#The-Session" class="headerlink" title="The Session"></a>The Session</h2><ul><li>地址：<a href="https://thesession.org/tunes" target="_blank" rel="noopener">https://thesession.org/tunes</a></li></ul><p>非常非常完备的一个ABC格式的数据集，虽然需要自己爬，但是非常齐全。数据仍在不断增加中。</p><h2 id="MusicNet"><a href="#MusicNet" class="headerlink" title="MusicNet"></a>MusicNet</h2><ul><li>地址：<a href="https://homes.cs.washington.edu/~thickstn/start.html" target="_blank" rel="noopener">https://homes.cs.washington.edu/~thickstn/start.html</a></li></ul><p>这个数据集是raw的音频格式，大约10GB，提供了丰富的形式，标注详尽全面，甚至还做了PyTorch接口。</p><h2 id="the-Symbolic-Music-dataset-by-Walder"><a href="#the-Symbolic-Music-dataset-by-Walder" class="headerlink" title="the Symbolic Music dataset by Walder"></a>the Symbolic Music dataset by Walder</h2><ul><li>地址：<a href="http://users.cecs.anu.edu.au/~u1018264/data.html" target="_blank" rel="noopener">http://users.cecs.anu.edu.au/~u1018264/data.html</a></li></ul><p>清洗过的MIDI文件，作者目前还活跃在音乐研究一线。</p><h2 id="TheoryTab"><a href="#TheoryTab" class="headerlink" title="TheoryTab"></a>TheoryTab</h2><ul><li>地址：<a href="https://www.hooktheory.com/theorytab" target="_blank" rel="noopener">https://www.hooktheory.com/theorytab</a></li></ul><p>严格来说这不算是一个数据集，但是很多人在论文中用过它（比如MidiNet）。最出彩的地方在于其和弦标注。我觉得应该是网络上和弦标注最为全面的一个数据集了。这个网站现代化、可交互，非常值得看一看。</p><h2 id="J-S-Bach-Series"><a href="#J-S-Bach-Series" class="headerlink" title="J.S. Bach Series"></a>J.S. Bach Series</h2><ul><li>地址：<a href="http://www.jsbach.net/midi/" target="_blank" rel="noopener">http://www.jsbach.net/midi/</a></li><li>地址：<a href="http://bachcentral.com/" target="_blank" rel="noopener">http://bachcentral.com/</a></li></ul><p>emm，他们真的很喜欢巴赫。</p><h2 id="The-Josquin-Research-Project"><a href="#The-Josquin-Research-Project" class="headerlink" title="The Josquin Research Project"></a>The Josquin Research Project</h2><ul><li>地址：<a href="http://josquin.stanford.edu/" target="_blank" rel="noopener">http://josquin.stanford.edu/</a></li></ul><p>斯坦福的一个网站，好像也不能直接下载，但是数据整理得非常漂亮，提供了MIDI、XML等多种格式，收录了1420-1520年的复调音乐，并且支持在线搜索和试听。</p><h2 id="Drum-Dataset"><a href="#Drum-Dataset" class="headerlink" title="Drum Dataset"></a>Drum Dataset</h2><ul><li>地址：<a href="https://www.reddit.com/r/WeAreTheMusicMakers/comments/3anwu8/the_drum_percussion_midi_archive_800k/" target="_blank" rel="noopener">https://www.reddit.com/r/WeAreTheMusicMakers/comments/3anwu8/the_drum_percussion_midi_archive_800k/</a></li></ul><p>虽然数据很小只有800k，但是这是我见过的第一个专用于鼓点的数据集。</p><h2 id="Video-Game-Datasets"><a href="#Video-Game-Datasets" class="headerlink" title="Video Game Datasets"></a>Video Game Datasets</h2><ul><li>地址：<a href="https://www.vgmusic.com/" target="_blank" rel="noopener">https://www.vgmusic.com/</a></li></ul><p>收录了游戏的背景音乐，而且真的非常非常齐全。</p><h2 id="Essen-Folk-Songs-Database"><a href="#Essen-Folk-Songs-Database" class="headerlink" title="Essen Folk Songs Database"></a>Essen Folk Songs Database</h2><ul><li>地址：<a href="http://www.esac-data.org/" target="_blank" rel="noopener">http://www.esac-data.org/</a></li></ul><p>古老的数据集，用于音乐结构分析。数据的提供方式是简谱。这个网站似乎有反爬机制，注意下载方式。</p><h2 id="Billboard-Dataset"><a href="#Billboard-Dataset" class="headerlink" title="Billboard Dataset"></a>Billboard Dataset</h2><ul><li>地址：<a href="https://ddmal.music.mcgill.ca/research/The_McGill_Billboard_Project_(Chord_Analysis_Dataset)/" target="_blank" rel="noopener">https://ddmal.music.mcgill.ca/research/The_McGill_Billboard_Project_(Chord_Analysis_Dataset)/</a></li></ul><p>用作和弦分析的数据集，由McGill的DDMAL组提供。数据集提供了约900首音乐的和弦注释，但是tonic之间没有区分大小调。</p><h2 id="HookTheory"><a href="#HookTheory" class="headerlink" title="HookTheory"></a>HookTheory</h2><ul><li>地址：<a href="https://www.hooktheory.com/" target="_blank" rel="noopener">https://www.hooktheory.com/</a></li></ul><p>用作和弦分析的数据集。可惜的是，这个数据集似乎不提供公开下载。</p>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt; 首先做个小宣传。因为很多想做这一块的同行本科生们不是很清楚国内外的院校列表。有一位前辈在GitHub上整理了大部分的院校列表出来，我也对这个列表做了一点贡献。&lt;a href=&quot;https://github.com/beiciliang
      
    
    </summary>
    
    
      <category term="音乐生成" scheme="http://ldzhangyx.github.io/tags/%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90/"/>
    
      <category term="Python" scheme="http://ldzhangyx.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>abc-midi</title>
    <link href="http://ldzhangyx.github.io/2019/07/14/abc-midi/"/>
    <id>http://ldzhangyx.github.io/2019/07/14/abc-midi/</id>
    <published>2019-07-14T09:38:09.000Z</published>
    <updated>2019-07-14T09:38:09.522Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SALAMI数据集介绍和使用指南</title>
    <link href="http://ldzhangyx.github.io/2019/07/12/salami-dataset/"/>
    <id>http://ldzhangyx.github.io/2019/07/12/salami-dataset/</id>
    <published>2019-07-12T05:10:47.000Z</published>
    <updated>2019-07-13T06:00:35.318Z</updated>
    
    <content type="html"><![CDATA[<p>SALAMI数据集，最早被我注意到是在2018年的ISMIR上的《INTERACTIVE ARRANGEMENT OF CHORDS AND MELODIES BASED ON A TREE-STRUCTURED GENERATIVE MODEL》，里面使用了来自McGill University的SALAMI数据集。</p><p>这个数据集的特点是，人工标注了音乐的层次结构。从规模上来说，涵盖了一千余首音乐，足以充当模型的测试集，用于检查模型对音乐层级结构的推导准确性。</p><p>这篇文章主要是数据集公开时发表的论文《DESIGN AND CREATION OF A LARGE-SCALE DATABASE OF STRUCTURAL ANNOTATIONS》的全文翻译，附带了我使用这个数据集的一些心得体会。</p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文描述了一个前所未有的大型数据库的设计和创建，该数据库包含近1400种音乐录音的2400多种结构注释。该数据库旨在成为算法的测试集，用于分析数十万个记录的更大的语料库，作为大量音乐信息结构分析（SALAMI）项目的一部分。本文描述了数据库的设计目标以及在创建过程中遇到的实际问题。</p><p>特别是，我们讨论了录音的选择，注释格式的开发和适应Peeters和Deruty [10]的工作的程序，以及项目的管理和执行。我们还总结了所得到的注释语料库的一些属性，包括平均了标注者之间的一致。</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>大量音乐信息（SALAMI）项目的结构分析是一项音乐学活动，其目标是为大量音乐制作结构分析 - 超过300,000个录音。这里的结构是指将一段音乐划分为多个部分，并将相似或重复的部分组合在一起。这些部分通常对应于功能独立的部分，例如流行歌曲的“诗歌（verse）”和“合唱（chorus）”部分，奏鸣曲的“呈示部（exposition）”和“展开部（development）” - 或者在更短的时间尺度，呈示部的“主题”，“转型”和次要主题”群体。</p><p>SALAMI语料库中的录音代表了各种类型，从klezmer到40强流行音乐，以及各种来源，包括专业录音室录音和观众录制的现场会议。SALAMI数据集将免费提供，可以为音乐理论家，音乐学家和其他音乐研究人员提供很好的服务，因为确定单个音乐片段的形式通常是一项耗时的任务。SALAMI数据集可以促进形式的大规模研究，目前这种研究相对不常见。</p><p>由于了解音乐片段结构的价值，追求自动生成结构描述的算法是一个活跃的研究领域。（有关评论，请参阅[9]。）SALAMI项目计划使用这些算法中的一些来分析其数十万个记录。但是，在使用这些算法之前，有必要在所代表的大量类型上验证它们的性能。这需要创建一个人类注释的地面实况数据集。设计和创建大型数据库（如SALAMI测试集）引发了许多与音乐选择，注释格式和过程相关的方法问题。本文解释了所涉及的问题以及我们为解决这些问题所做的决定。</p><p>本文的下一部分总结了几个现有结构注释语料库的内容和贡献，以及最近对注释过程本身的重要研究[1,10]。第3节描述了SALAMI测试集的创建，包括语料库选择，使用的注释格式和推荐的工作流程。第4节介绍并讨论了结果数据集的一些属性。</p><h1 id="之前的工作"><a href="#之前的工作" class="headerlink" title="之前的工作"></a>之前的工作</h1><h2 id="既有的数据"><a href="#既有的数据" class="headerlink" title="既有的数据"></a>既有的数据</h2><p>SALAMI需要一个包含大量流行音乐，爵士乐，古典音乐和世界音乐的数据库。然而，大多数以前的注释集合只考虑流行音乐。现有最大的三个注释数据库是TUTstructure07 [13]（557个注释），由坦佩尔理工大学（TUT）编制，主要包含流行音乐;由Alan Pollack创建并由两组独立同步的Beat les工作室目录的注释[5,14]（180注释）;和RWC音乐数据库（285注释）附带的AIST注释集[4]。RWC套装大约是一半流行音乐，每个爵士乐和古典音乐四分之一，还有少数世界音乐作品，但对于许多爵士乐和古典乐曲，只有“合唱”部分。</p><h2 id="注释格式"><a href="#注释格式" class="headerlink" title="注释格式"></a>注释格式</h2><p>几乎所有以前的注释语料库都​​使用了相同的直接注释格式。片段被分割成非重叠的片段，并且每个片段被给予单个标签，例如“前奏”或“合唱”，以指示哪些片段彼此相似或重复。标签还表明每个部分的音乐角色或功能。在一些语料库中，例如披头士乐队的注释[5]，标签可以指示乐器（例如，“verse_guitar”）或乐段的变体（例如，“verse_with_ending”）。</p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>正如Peeters和Deruty [10]所指出的，音乐相似性，功能和仪器的这种混合是有问题的。例如，歌曲的“outro”可以使用与之前的“transition”相同的音乐，但是将它们标记为未能记录它们的相似性。相反，具有单一功能的部分可能在音乐上是异质的，如同延伸的两部分介绍一样。Peeters和Deruty还批评了在某些注释集合中使用的大型，看似无约束的词汇表。再次考虑Isophonics Beatles注释[5]：在146个独特标签中，95种只使用一次。一次性标签可以为检查注释的人提供信息，其中其含义在上下文中是可理解的（例如，“intro<em>redux”，“verse</em>（slow）”），但是当注释正在进行时，具有太多唯一标签的用处不大 由机器使用。标准注释格式的另一个缺点是它仅描述单个时间尺度的结构。音乐结构最重要的属性之一是它被层次感知，并且理想的是在注释中捕获一些这样的信息。</p><h3 id="一种可替代的格式"><a href="#一种可替代的格式" class="headerlink" title="一种可替代的格式"></a>一种可替代的格式</h3><p>Peeters和Deruty提出了另一种注释格式，旨在解决这些问题。该格式使用了19个标签的受限词汇表，每个标签都涉及一个部分结构的三个方面之一：音乐相似性，音乐角色或乐器角色。在它们的格式中，通过将一个片段的每个部分标记为五个“组成型实体循环”（CSLoops）之一来指示音乐相似性。（如果需要超过五个，则使用第六个CSLoop，但格式并不意味着标有此最后一个标签的所有部分都相似。）功能标签是可选的，仅限于“intro / outro”，“transition”， “chrous”和“solo”。乐器标签表示是否存在主要或支持旋律的声音。Peeters和Deruty的格式也创造性地包含了一些有关结构的分层信息。两个标记“V1”和“V2”划分CSLoops; 第一个表示标记两侧的音乐片段相似，第二个表示它们不相似。</p><h2 id="标注过程"><a href="#标注过程" class="headerlink" title="标注过程"></a>标注过程</h2><p>与音调不同，在很大程度上，节拍，结构的感知是一种高度主观的现象，并且两个听众通常不同意音乐的形式。因此，开发一种注释程序是一项挑战，虽然可能不是客观的，但最大限度地提高了结果的可重复性。请注意，由于结构分析记录了听众的创造性解释和她的感知，因此客观性可以说是注释的不可能的目标。</p><p>一种方法是将注释的创建视为感知实验，并且只要让多个主体听到一个片段并且只要他们感知到结构边界就按下按钮。这些数据是由[2]收集的，他们指出，听众普遍同意他们认为最突出的边界的位置。这些边界被作者用作一种“基础事实”，用于评估一些计算模型在估计边界时的成功。</p><p>Bimbot等[1]通过精确指定注释程序设法获得一定程度的可重复性。他们定义了注释器应该使用的音乐标准和相似性判断，以便估计边界。（标记细分的任务仍然是未来的工作。）他们报告说，通过他们的程序，注释在注释者和随着时间的推移是非常一致的。注释器的目标是将一个片段分解为“自主和可比较的块”。自主意味着无论一个块是独立还是连续循环，结果应该是音乐上可接受的。如果两个块在节拍中具有相同的持续时间，可互换，或者就其时间组织而言是相似的，则它们可以是可比较的。</p><h1 id="SALAMI数据集的描述"><a href="#SALAMI数据集的描述" class="headerlink" title="SALAMI数据集的描述"></a>SALAMI数据集的描述</h1><p>我们使用独特的注释格式开发了一个新的注释语料库，以实现SALAMI项目的目标。为确保语料库可用作SALAMI的评估测试集，主要的设计考虑因素是语料库涵盖尽可能广泛的音乐类型。为了使注释在音乐上有用，注释格式的设计目标是独立描述音乐相似性，功能和主要乐器，并且注释反映音乐结构的等级性质。最后，格式和程序应该允许快速制作注释，以最大限度地降低成本，但要足够灵活，以便能够处理各种类型的作品，同时目标着标注者之间的一致。考虑到这些设计考虑因素，我们对以前的注释语料库和现有注释技术进行了调查。基于此调查以及我们自己对不同方法的实验，我们确定了本节中概述的语料库，格式和过程。</p><h2 id="SALAMI数据集的内容"><a href="#SALAMI数据集的内容" class="headerlink" title="SALAMI数据集的内容"></a>SALAMI数据集的内容</h2><p>设计语料库的第一步是决定放入什么。SALAMI的优先事项之一是为尽可能多种音乐提供结构分析，以匹配算法分析的音乐的多样性。除了流行音乐之外，SALAMI测试装置应该同等重视古典，爵士和非西方音乐，俗称“世界”音乐。为确保录音格式的多样性，我们还强调了录制现场录音。数据库的最终组成如表1所示。</p><p>SALAMI测试集的第二个目标是能够将我们的注释与以前的数据集进行比较。因此，我们重复了之前的一些工作：我们的测试集目前分别包括来自RWC和Isophonics数据集的97和35个记录。注意，这些记录都是单键的（即，由单个人注释），而大多数SALAMI测试语料库是双键的（由两个独立的注释器分析）。双键提供有用的信息，但更昂贵。鉴于其他组已经注释了这些条目，单键输入一些条目似乎是一个合理的妥协。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>手动选择语料库的歌曲会耗费时间，并会引入未知的方法论偏见。然而，从大多数来源随机选择歌曲会导致语料库严重偏向流行音乐。为了解决这个问题，大多数录音都来自Codaich [7]，这是一个包含精心策划的元数据的大型数据库，包括50多个子标签。这使我们能够在仍然随机选择单个作品的同时强制实现对流派的良好报道。测试集的其余部分是从Live Music Archive [6]中随机收集的。遗憾的是，这些录音的元数据不一致，无法按类型分发。大多数似乎是流行和爵士音乐。</p><h2 id="标注格式"><a href="#标注格式" class="headerlink" title="标注格式"></a>标注格式</h2><p>我们开发了一种新的注释格式，它采用Peeters和Deruty设计的格式，采用了许多重要的方式：我们借用它们之间的区别来区分表示音乐相似性，功能和仪器的标签，并且像我们一样，我们也严格限制功能标签的词汇量。但是，我们已经做了一些修改，以适应SALAMI的独特需求和更多的音乐学焦点。三层中的每一层中的标签在以下三个部分中描述。示例注释如图1所示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="音乐相似性轨"><a href="#音乐相似性轨" class="headerlink" title="音乐相似性轨"></a>音乐相似性轨</h3><p>音乐相似性轨迹包括在不同时间尺度的两个层，每个时间尺度识别该部分的哪些部分使用类似的音乐想法。大型图层使用大写字母作为标签（“A”，“B”等），小型图层使用小写字母（“a”，“b”等）。字母标签的使用模仿了熟悉的音乐理论方法。必须为大型和小型图层中的每个记录部分分配一个字母标签。格式规范允许使用任意数量的小写或大写字母（如果字母表用尽，可以使用标签“aa”，“ab”等等）。然而，对于大规模层，指示注释器优选每次记录使用五个或更少的不同大写标签。该偏好规则并未表示在任何记录中存在五个或更少的不同音乐想法的假设。相反，它旨在引导注释器朝向某个抽象级别。当注释不太清晰地组织成不同部分的作品时，这个方向被证明是有用的，例如通过组合的部分。它也有助于注释作品，如奏鸣曲，可以组织成部分，但这些部分不是音乐上同质的，可能包括几个不同的音乐想法。</p><p>另外两个特殊标签表示沉默（“slience”）和非音乐，例如现场记录中的掌声或戏弄（“Z”）。我们还允许字母标记被素数符号（’）所反映，以表示与另一个明显相似的部分，但这被认为是实质上变化的。相似性判断本质上是主观的和不精确的，而主要符号是承认这一点的有用方式。它允许注释者忠实地记录他的解释，同时允许未来的用户根据他们的需要轻松地调整标签。例如，根据应用程序，用户可以删除主要标记（以便“a”和“a’”被重新标记为“a”）或将变体视为不同的部分（以便“a’”将是重新分配了与“a”不同的字母标签）。</p><h3 id="功能轨"><a href="#功能轨" class="headerlink" title="功能轨"></a>功能轨</h3><p>注释格式中的第二个轨道包含音乐功能标签，所有标签都必须从我们严格的20个标签词汇中提取。与字母标签不同，一件作品的每个部分都不一定要收到功能标签。词汇表列在表2中，分为各种相关类别。乐器，过渡和结束组都是同义词组。请注意，在结束组中，标签“fadeout”是除了任何其他标签之外还可以出现的特殊标签。例如，如果乐曲在重复合唱时淡出，则最后一部分可以同时给出两个标签：“合唱”和“淡出”。每个术语的完整定义在我们的注释器指南中指定，可在线获取[11]。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>请注意，某些标签是其他类型的特定类型的替代品：例如，爵士乐歌曲中的“head”类似于流行歌曲中的“chorus”，或者有时候是古典乐曲中的“主题”。此外，术语“exposition”，“development”和“recapitulation”一起特定于奏鸣曲形式，并且在特殊情况下可用于在大于大规模相似性标签的时间尺度上注释第三级结构关系。然而，“development”也具有更广泛的适用性：它可以用于表示对比中间部分的功能，这在许多情况下是相关的，从各种古典类型到渐进式摇滚。另外，词汇表的一些子集可以用作同义词组，如果需要，可以将其折叠成单个功能标签。例如，虽然我们的Annotator’s Guide定义了“pre-chorus,” “pre-verse,” “interlude,”和 “transition” 部分之间相对微妙的区别，但它们都是“ “transition” 的同义词。这种方法允许注释者犯错在精确度方面，同时使未来的数据用户可以忽略不需要的区别。</p><h3 id="领头乐器轨"><a href="#领头乐器轨" class="headerlink" title="领头乐器轨"></a>领头乐器轨</h3><p>注释格式中的最后一个轨道指示单个乐器或声音在哪个位置具有领先的，通常是旋律的角色。此轨道中的标签只是主要乐器的名称，因此词汇不受限制。此外，与其他轨道不同，主要乐器标签可能会重叠，如二重唱。请注意，与功能轨道一样，如果没有仪器满足主导作用，则可能存在没有主要仪器标签的记录部分。<br>请注意，在为此项目设计的书面格式中，描述小规模相似性片段的边界是注释函数和引导仪器轨迹时唯一可用的边界。同样，这有助于将注释器定位到适当的抽象级别，并减轻它们过于辛苦地指示仪器的变化。</p><h2 id="标注过程-1"><a href="#标注过程-1" class="headerlink" title="标注过程"></a>标注过程</h2><p>注释器使用软件Sonic Visualiser [3]来试听和注释碎片。Sonic Visualiser的键盘命令允许用户很快插入和标记边界。我们提出了以下工作流程：首先，每当感知到结构边界时，通过歌曲聆听并标记边界。其次，再次听取这个部分，调整边界并添加小写标签。第三，添加大写和功能标签，最后添加主要仪器标签。虽然我们发现此工作流程高效且简单，但我们并未要求注释者遵循此工作流程或任何其他特定工作流程。</p><h2 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h2><p>注释格式和数据收集在10个月的时间内进行。首先，研究了以前的注释格式和注释数据库。潜在的注释格式由项目负责人设计和测试，并在两个月结束时设定了一种暂定格式。接下来，候选注释器在注释格式和Sonic Visualiser环境中进行训练。聘请了八位成功的候选人，他们都在音乐理论或作曲中继续攻读研究生课程，并在接下来的一周开始收集数据。由于注释格式在工作开始之前尚未进行大规模测试，因此数据收集的前六周被视为延长试用期。每个星期或两个星期，新的流派都会给注释者一个新的作业，从流行开始，558第12届国际音乐信息检索学会（ISMIR 2011）预计将成为问题最少的，并继续按顺序进行爵士乐 ，古典和世界，预计难度越来越大。在六周结束时，放松了对注释者的监督，并且临时解决了任何问题。在接下来的12周内继续收集数据，此时大多数任务已经完成。我们收集了自我报告的时间，用于生成每个注释以评估生产率。时间被绘制为图2中前1700个注释的日期的函数。可以看出，在项目开始时忽略了一些异常值，注释时间从20分钟的模式中适度减少。前100天，其余时间为15分钟的模式，足以让3首完全听完普通歌曲，长度为4:21。平均注释时间也从21分钟下降到17分钟。早期的分析显示歌曲的长度与其注释时间之间略有相关性。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="标注格式和过程修改"><a href="#标注格式和过程修改" class="headerlink" title="标注格式和过程修改"></a>标注格式和过程修改</h3><p>在每次新任务之后，我们征求注释者的反馈意见，了解注释格式和程序中的弱点或含糊之处。大多数问题在定期小组会议上得到解决和解决，我们也在那里计划并商定词汇量。<br>反馈导致引入新的启发式方法（例如，我们建立了一种偏好，即使在拾取器存在的情况下，分段边界也会下降。在一个案例中，反馈导致了格式的重大修订。我们最初使用[10]描述的“V1”和“V2”标记在较短的时间尺度上隐含地编码音乐相似性。<br>然而，注释者发现在两个时间尺度上明确地描述结构在概念上更简单和更快。切换器对注释器感到满意，随后的注释也有更多信息。</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>在本节中，我们将报告所收集数据的某些属性，包括标注人员之间的一致协议。对于大规模分析，每个注释的平均段数为11.3，其中一半的分析具有8到14个段。对于小规模分析，这些数字为38.4，在20和49之间。平均而言，每个注释有4.0个独特的大型标签和7.2个独特的小型标签。从用于比较两个注释（在[12]中定义的）的各种度量中，我们估计了成对f-measure，边界f-measure和Rand指数。通过观察一组边界与另一组边界匹配的精度和召回来找到边界f-度量。如果边界位于彼此的某个容差窗口（0.5或3秒）内，则边界匹配。成对fmeasure将一个描述中具有相同标签的所有帧对视为一组相似关系，其他描述以一定的精度和回忆检索。Rand索引是类似的，除了它还标识在一个描述中具有不同标签的帧对在另一个中具有不同的标签。表3中报告了974对注释之间的协议。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>每个注释都描述了两个细节层次的音乐相似度，两者都应被视为有效描述。为了比较两个注释，我们可以仅比较大尺度标签或仅比较小尺度标签，但我们也可以找到所有对的相似性（包括从小到大和从大到小）并取最大值 相似性来估计标注者之间的一致性。这将使我们能够识别注释者关注不同时间尺度的情况。如表3所示，大规模标签之间的一致性（成对f = 0.76，Rand= 0.79）与小规模标签之间的一致（成对f = 0.69，Rand= 0.81），并且找到的平均最佳匹配是 略高于每一个（成对f = 0.81，Rand= 0.87）。为了比较，[8]报告了来自TUT集的30首歌曲的测试集上的成对f为0.89，并且[1] 0 25 50 75 100 0 100 200 300 400注释时间，以分钟为单位在项目开始日期之后完成的时间。在20首歌曲的测试集上的边界f度为0.91（使用0.75秒阈值）。该协议未被发现在很大程度上取决于该类型。这是合理的，因为这里考虑的每个广泛的类型都非常多样化，包含一些简单和复杂的部分。例如，流行的流派包括直截了当的流行音乐和更难以注释的渐进摇滚; 同样，虽然很多世界音乐对注释者构成了挑战，但像克莱兹默和凯尔特音乐这样的子类可以在结构上直截了当。我们在RWC数据集中复制了97个记录的注释。RWC注释通过向函数标签添加字母（例如，“诗歌A”，“诗歌B”等）来区分相似且相同的部分重复。我们创建了两个版本的RWC标签，一个保留，一个忽略其他字母标签。将这些与大规模和小规模的SALAMI注释进行比较，显示出适度的一致性（见表4）。除Rand指数外，结果表明，大规模SALAMI分析与RWC注释比小规模分析更相似。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>SALAMI测试集有超过2400个注释，描述了近1400种音乐的正式结构，来自各种类型，包括流行音乐，爵士音乐，古典音乐和世界音乐。该组可用于未来的各种研究：例如，关于音乐的表面特征与音乐形式的感知之间的关系，或者正式风格与诸如艺术家，流派和原产地之类的音乐参数之间的关联。很快我们的网站就可以获得测试数据和数十万计算结构描述[11]。<br>虽然语料库的价值最终将取决于研究人员对其的使用，但SALAMI测试集中信息的数量和丰富程度应该使其对音乐学家和音乐信息检索研究人员都具有吸引力。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SALAMI数据集，最早被我注意到是在2018年的ISMIR上的《INTERACTIVE ARRANGEMENT OF CHORDS AND MELODIES BASED ON A TREE-STRUCTURED GENERATIVE MODEL》，里面使用了来自McGil
      
    
    </summary>
    
      <category term="数据集" scheme="http://ldzhangyx.github.io/categories/%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    
    
      <category term="music generation" scheme="http://ldzhangyx.github.io/tags/music-generation/"/>
    
      <category term="dataset" scheme="http://ldzhangyx.github.io/tags/dataset/"/>
    
      <category term="data" scheme="http://ldzhangyx.github.io/tags/data/"/>
    
  </entry>
  
  <entry>
    <title>SLURM快速上手使用指南</title>
    <link href="http://ldzhangyx.github.io/2019/07/08/slurm-quickstart/"/>
    <id>http://ldzhangyx.github.io/2019/07/08/slurm-quickstart/</id>
    <published>2019-07-08T07:53:23.000Z</published>
    <updated>2019-07-08T11:12:53.815Z</updated>
    
    <content type="html"><![CDATA[<p>学校的HPC计算资源通过SLURM进行管理。为了方便我进行配置，我决定整理一个快速上手指南。</p><h1 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h1><p>推荐使用MobaXTerm进行连接。MobaXTerm不仅可以进行连接，对目录还做了可视化处理，因此可以对文件进行方便的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &lt;YourID&gt;@hpc.xxxxx.edu</span><br></pre></td></tr></table></figure><p>输入密码后成功连接服务器。</p><h1 id="几个常用命令"><a href="#几个常用命令" class="headerlink" title="几个常用命令"></a>几个常用命令</h1><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>SLURM上一般有一些预先配置好的库可以使用。</p><ul><li><code>module list</code>: 查看目前存在的模块</li><li><code>module avail</code>: 查看可以安装的模块</li><li><code>module purge</code>: 移除当前所有模块</li><li><code>module load XXX</code>: 加载XXX模块</li></ul><p>模块的加载工作一般直接写在下文提到的脚本里。我自己常用的模块一般就是anaconda/5.2.0和各个版本的cuda，cudnn对环境进行配置。</p><h2 id="sbatch"><a href="#sbatch" class="headerlink" title="sbatch"></a>sbatch</h2><p>sbatch有两种用法。你可以在sbatch命令后直接显式指定你的job要求，比如索取1个CPU，使用4小时，也可以将配置写在脚本文件里（推荐）。格式直接就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbatch xxx.sh</span><br></pre></td></tr></table></figure><p>之后会收到服务器返回的job id。</p><h2 id="scontrol"><a href="#scontrol" class="headerlink" title="scontrol"></a>scontrol</h2><p>可以使用scontrol查看job情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scontrol show &lt;job id&gt;</span><br></pre></td></tr></table></figure><p>会返回这个job的所有状态。</p><h2 id="sview"><a href="#sview" class="headerlink" title="sview"></a>sview</h2><p>输入这个命令可以打开一个新窗口，监控集群结点上所有任务的情况。</p><h1 id="配置重点"><a href="#配置重点" class="headerlink" title="配置重点"></a>配置重点</h1><p>运行和提交一个新任务，只需要做两件事：</p><ol><li>准备并上传代码文件</li><li>编写并运行sh脚本</li></ol><p>下面分两种情况进行讨论。</p><h2 id="运行任务（py文件）"><a href="#运行任务（py文件）" class="headerlink" title="运行任务（py文件）"></a>运行任务（py文件）</h2><p>这种情况意味着你只想得到结果，观察输出。</p><ol><li>上传代码文件。</li><li>编写sh脚本。sh脚本的基本格式如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#SBATCH --mail-user=</span><br><span class="line">#SBATCH --mail-type=ALL</span><br><span class="line">#SBATCH --nodes=1</span><br><span class="line">#SBATCH --ntasks-per-node=1</span><br><span class="line">#SBATCH --time=1-01:10:00</span><br><span class="line">#SBATCH --mem=200G</span><br><span class="line">#SBATCH --output=Job.%j.out</span><br><span class="line">#SBATCH --error=Job.%j.err</span><br><span class="line">#SBATCH --account=testuser</span><br><span class="line">#SBATCH --partition=debug</span><br></pre></td></tr></table></figure><p>文件中的配置部分。—mail-type=<type>代表指定状态发生时，发送邮件通知，有效种类为（NONE, BEGIN, END, FAIL, REQUEUE, ALL）；—mail-user=<user>代表发送给对应邮箱。更多的参数我没有仔细研究，读者可以因地制宜进行控制。</user></type></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module purge</span><br><span class="line">module load anaconda3/5.2.0</span><br><span class="line">python &lt; xxx.py</span><br></pre></td></tr></table></figure><p>加载模块，运行脚本。</p><h2 id="运行任务（Jupyter-Notebook）"><a href="#运行任务（Jupyter-Notebook）" class="headerlink" title="运行任务（Jupyter Notebook）"></a>运行任务（Jupyter Notebook）</h2><p>这种情况比较复杂，因为你需要保持一个状态，进行操作。</p><ol><li>上传代码文件（或者不传，之后新建notebook）。</li><li>编写sh脚本。sh脚本的格式如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#SBATCH -p serial</span><br><span class="line">#SBATCH -n1</span><br><span class="line">#SBATCH -N1</span><br><span class="line">#SBATCH -t 01:00:00</span><br><span class="line">#SBATCH --mem=4GB</span><br><span class="line">#SBATCH --job-name jupyter</span><br><span class="line">#SBATCH --output jupyter-log-%J.txt</span><br></pre></td></tr></table></figure><p>上面对各个资源进行了配置。n代表任务数量。#SBATCH指令的意义可以查看参考链接5，以及官方文档。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module purge</span><br><span class="line">module load anaconda3/5.2.0</span><br></pre></td></tr></table></figure><p>对必要的模块进行加载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">XDG_RUNTIME_DIR=&quot;&quot;</span><br><span class="line">ipnport=$(shuf -i8000-9999 -n1)</span><br><span class="line">ipnip=$(hostname -i)</span><br><span class="line"></span><br><span class="line">echo -e &quot;\n&quot;</span><br><span class="line">echo    &quot;  Paste ssh command in a terminal on local host (i.e., laptop)&quot;</span><br><span class="line">echo    &quot;  ------------------------------------------------------------&quot;</span><br><span class="line">echo -e &quot;  ssh -N -L $ipnport:$ipnip:$ipnport $USER@hpc.shanghai.nyu.edu\n&quot;</span><br><span class="line">echo    &quot;  Open this address in a browser on local host; see token below&quot;</span><br><span class="line">echo    &quot;  ------------------------------------------------------------&quot;</span><br><span class="line">echo -e &quot;  localhost:$ipnport</span><br></pre></td></tr></table></figure><p>输出提示信息，方便之后进行通道搭建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter-notebook --no-browser --port=$ipnport --ip=$ipnip</span><br></pre></td></tr></table></figure><p>运行jupyter notebook。</p><ol><li>运行之后，新开一个local terminal，输入以下命令，为本地localhost与服务器之间建立一个隧道。</li></ol><p>我们假设第二步的输出提示是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Paste ssh command in a terminal on local host (i.e., laptop)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">ssh -N -L 8896:xx.xxx.xx.xx:8896 &lt;yourID&gt;@hpc.xxx.edu</span><br><span class="line"></span><br><span class="line">Open this address in a browser on local host; see token below</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">localhost:8896</span><br></pre></td></tr></table></figure><p>那么直接运行指令，建立隧道：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -N -L 8896:xx.xxx.xx.xx:8896 &lt;yourID&gt;@hpc.xxx.edu</span><br></pre></td></tr></table></figure><ol><li>在本地浏览器上进入下面网址，输入token，开始工作。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:8896</span><br></pre></td></tr></table></figure><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><ol><li><a href="https://github.com/PDC-support/jupyter-notebook/blob/master/0-setup.ipynb" target="_blank" rel="noopener">https://github.com/PDC-support/jupyter-notebook/blob/master/0-setup.ipynb</a></li><li><a href="https://www.youtube.com/watch?v=U42qlYkzP9k&amp;feature=player_embedded" target="_blank" rel="noopener">https://www.youtube.com/watch?v=U42qlYkzP9k&amp;feature=player_embedded</a></li><li><a href="https://github.com/michael-qi/nyush_hpc" target="_blank" rel="noopener">https://github.com/michael-qi/nyush_hpc</a></li><li><a href="https://wikis.nyu.edu/pages/viewpage.action?spaceKey=NYUShanghaiITS&amp;title=NYU+Shanghai+HPC+cluster+Environment" target="_blank" rel="noopener">https://wikis.nyu.edu/pages/viewpage.action?spaceKey=NYUShanghaiITS&amp;title=NYU+Shanghai+HPC+cluster+Environment</a></li><li><a href="http://hpc.pku.edu.cn/guide_sbatch.html" target="_blank" rel="noopener">http://hpc.pku.edu.cn/guide_sbatch.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学校的HPC计算资源通过SLURM进行管理。为了方便我进行配置，我决定整理一个快速上手指南。&lt;/p&gt;
&lt;h1 id=&quot;连接服务器&quot;&gt;&lt;a href=&quot;#连接服务器&quot; class=&quot;headerlink&quot; title=&quot;连接服务器&quot;&gt;&lt;/a&gt;连接服务器&lt;/h1&gt;&lt;p&gt;推荐使用
      
    
    </summary>
    
      <category term="开发笔记" scheme="http://ldzhangyx.github.io/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SLURM" scheme="http://ldzhangyx.github.io/tags/SLURM/"/>
    
      <category term="HPC" scheme="http://ldzhangyx.github.io/tags/HPC/"/>
    
  </entry>
  
  <entry>
    <title>《Ordered Neurons： Integrating Tree Structures into Recurrent Neural Networks》阅读笔记</title>
    <link href="http://ldzhangyx.github.io/2019/07/03/on-lstm/"/>
    <id>http://ldzhangyx.github.io/2019/07/03/on-lstm/</id>
    <published>2019-07-03T06:38:11.000Z</published>
    <updated>2019-07-23T02:34:54.422Z</updated>
    
    <content type="html"><![CDATA[<p>Ordered Neurons是ICLR 2019的The best paper之一。知乎上对这篇论文也有诸多讨论。本文主要探讨ON-LSTM在结构上的构建和分析，为我之后要做的音乐结构分析做一些准备。</p><h1 id="ON-LSTM"><a href="#ON-LSTM" class="headerlink" title="ON-LSTM"></a>ON-LSTM</h1><p>用一句话来概括这篇论文的核心思想，那就是：<strong>重新设计了LSTM中，历史信息的融合更新策略，使其能够显式地分层融合历史信息和当前信息。为了分层地融合信息，本文也设计了一个方法估计信息的层级，之后也利用层级，推导出了序列信息的树状结构</strong>。</p><h2 id="普通的LSTM"><a href="#普通的LSTM" class="headerlink" title="普通的LSTM"></a>普通的LSTM</h2><p>首先回忆一个普通的LSTM：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1.png" alt="LSTM Cell结构" title="">                </div>                <div class="image-caption">LSTM Cell结构</div>            </figure><p>从结构图从左往右依次有三个sigmoid模块：<br>第一个sigmoid是遗忘门，输出一个值，决定$c_{t-1}$应该被遗忘的比例：</p><script type="math/tex; mode=display">f_{t}  = \sigma( W_{f} x_{t} + U_{f} h_{t - 1} + b_{f}）</script><p>第二个sigmoid是输入门，输出一个值，决定输入$x_t$应该多大程度影响到$h_{t-1}$：</p><script type="math/tex; mode=display">o_{t}  = \sigma( W_{o} x_{t} + U_{o} h_{t - 1} + b_{o})</script><script type="math/tex; mode=display">\hat{c}_t  = \tanh ( W_{c} x_{t} + U_{c} h_{t - 1} + b_{c})</script><p>接下来是融合的过程。遗忘门决定了$c_{t-1}$的遗忘程度，输入门处理了输入，用点加的方式将两个向量进行融合：</p><script type="math/tex; mode=display">c_{t}  = f_{t} \circ c_{t - 1} + i_{t} \circ \hat{c}_t</script><p>第三个sigmoid是输出门，将$h_{t-1}$的结果与更新后的$c_t$进行综合考虑，进行输出。这里得到的$h_t$同时也就直接是这个时刻的output，也就是$y_t$：</p><script type="math/tex; mode=display">o_{t}  = \sigma ( W_{o} x_{t} + U_{o} h_{t - 1} + b_{o})</script><script type="math/tex; mode=display">h_{t}  = o_{t} \circ \tanh ( c_{t} )</script><h2 id="ON-LSTM-1"><a href="#ON-LSTM-1" class="headerlink" title="ON-LSTM"></a>ON-LSTM</h2><p>我们注意到，在融合的过程中（也就是点加的过程中），过去的信息、输入的信息、融合的信息，这些向量都是无序排列的。ON-LSTM的总体思想，是将$c_t$，也就是LSTM Cell的状态，赋予了三个层次。向量中，层次比较低的位置，更新比较频繁；层次比较高的位置，更新比较不频繁，这样可以更多地保留一些高层、远程的信息。</p><p>ON-LSTM具体是怎么做的呢？</p><p>假设我们有两个函数，可以在更新$c_t$前，预测出历史信息的层级$d_f$和当前输入的层级$d_i$：</p><script type="math/tex; mode=display">d_f = F_1(x_t, h_{t-1})</script><script type="math/tex; mode=display">f_i = F_2(x_t, h_{t-1})</script><p>新建一个空白的$c_t$，大致分为三个层级进行填充，三个层级的两个分界线，由$d_f$和$d_i$决定。现在分为两个情况：</p><ol><li>当前输入$x_t$的层级高于历史记录$h_{t-1}$的层级，那么$c_t$中，层次高于$d_i$的部分，保持$c_{t-1}$不变，层次低于$d_f$的部分，被当前输入的$\hat{c}_t$直接覆盖，而两个分界线中间的部分，使用点加的方式正常融合：</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>当前输入$x_t$的层级低于历史记录$h_{t-1}$的层级，那么高层仍然保留，底层仍然用$\hat{c}_t$直接覆盖，而分界线中层的位置直接置0：</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这就是ON—LSTM做出的重要更改。高层信息就可能保留相当长的距离（因为高层直接复制历史信息，导致历史信息可能不断被复制而不改变），而低层信息在每一步输入时都可能被更新（因为低层直接复制输入，而输入是不断改变的），所以就通过信息分级来嵌入了层级结构。更通俗地说就是分组更新，更高的组信息传得更远（跨度更大），更低的组跨度更小，这些不同的跨度就形成了输入序列的层级结构。</p><p>这里隐含了一个规律。因为我们总是遗忘$d_f$以下的所有内容，记住$d_i$以上的所有内容，所以，每当我们想更新或者擦除高层次的内容时，我们必定擦除或更新了更低层次的内容。这个结论是非常容易推理出来的。</p><h2 id="无监督树结构的生成"><a href="#无监督树结构的生成" class="headerlink" title="无监督树结构的生成"></a>无监督树结构的生成</h2><p>给定一个预训练好的ON-LSTM模型，输入一个序列${x_t}$，可以得到每一个LSTM Cell在融合时计算出来的历史信息结构的层级序列${d_f}$。找到层级最大值的下标，以它为分界线，将左右两个子序列分开，然后递归地重复这个步骤。</p><p>具体的论文细节在这里不详细描述了。</p><h1 id="见解和感想"><a href="#见解和感想" class="headerlink" title="见解和感想"></a>见解和感想</h1><p>树状结构在各个topic都是有用的。将树状结构引入神经网络语言模型可能会带来一些这样的好处：</p><ol><li>可以得到语言的分层表示；</li><li>可以建模语言的组分效应（compositional effects）；</li><li>可以提供反向求导的捷径，帮助解决长期依赖的问题；</li><li>一个更好的归纳偏置，从而降低训练数据的要求，提高泛化能力。</li></ol><p>在音乐领域，得到一个音乐片段的结构也是非常有用的。</p><p>知乎上面相关的讨论，我比较感兴趣的是一个现象。这样训练的Language Model同时对语法和语义进行了建模，所以对于语义不行而完全符合语法的句子，LSTM的得分也会较低。那么这样得出来的无监督树结构到底是语法的树表达，还是语义的树表达呢？</p><p>这里有一个猜测，ON-LSTM用于树结构生成时，使用了三层ON-LSTM中第二层的历史层级序列，可能暗含一个现象：模型的第一层LSTM偏句法，第二层偏语义。这个问题被ELMo (Peters et al., 2018)和Liu et al. (2019)从不同的角度得出过一些可以参考的见解。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li>苏剑林. (2019, May 28). 《ON-LSTM：用有序神经元表达层次结构 》[Blog post]. Retrieved from <a href="https://kexue.fm/archives/6621" target="_blank" rel="noopener">https://kexue.fm/archives/6621</a></li><li>知乎. 如何评价ICLR 2019 best paper: Ordered Neurons? <a href="https://www.zhihu.com/question/323190069" target="_blank" rel="noopener">https://www.zhihu.com/question/323190069</a></li><li><a href="https://arxiv.org/abs/1810.09536" target="_blank" rel="noopener">https://arxiv.org/abs/1810.09536</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ordered Neurons是ICLR 2019的The best paper之一。知乎上对这篇论文也有诸多讨论。本文主要探讨ON-LSTM在结构上的构建和分析，为我之后要做的音乐结构分析做一些准备。&lt;/p&gt;
&lt;h1 id=&quot;ON-LSTM&quot;&gt;&lt;a href=&quot;#ON-L
      
    
    </summary>
    
      <category term="论文笔记" scheme="http://ldzhangyx.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="music generation" scheme="http://ldzhangyx.github.io/tags/music-generation/"/>
    
      <category term="自然语言处理" scheme="http://ldzhangyx.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
      <category term="NLG" scheme="http://ldzhangyx.github.io/tags/NLG/"/>
    
      <category term="NLP" scheme="http://ldzhangyx.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch工程中，提升代码体验的几点想法</title>
    <link href="http://ldzhangyx.github.io/2019/07/02/python-init/"/>
    <id>http://ldzhangyx.github.io/2019/07/02/python-init/</id>
    <published>2019-07-02T09:14:22.382Z</published>
    <updated>2018-11-16T05:36:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>提及PyTorch的代码写作，我没有找到一个大家约定俗成的规约。我自己遵循了一些能让Python代码更具有可读性和持续开发的规则，现记录如下。</p><a id="more"></a><h2 id="保持工程的模块化"><a href="#保持工程的模块化" class="headerlink" title="保持工程的模块化"></a>保持工程的模块化</h2><p>一个我认为整洁的项目应该遵循这样的结构，现在我以一个Encoder-Decoder框架为例进行描述。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''The structure of my project.</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">+--data</span><br><span class="line">|--+log</span><br><span class="line">|--+dataset</span><br><span class="line">|  |  +--train.txt</span><br><span class="line">|  |  +--test.txt</span><br><span class="line">+--model</span><br><span class="line">|  +--__init__.py</span><br><span class="line">|  +--encoder.py</span><br><span class="line">|  +--decoder.py</span><br><span class="line">|  +--(model_name).py</span><br><span class="line">|  +--highway.py</span><br><span class="line">|  ...</span><br><span class="line">+--utils</span><br><span class="line">|  +--__init__.py</span><br><span class="line">|  +--batch_loader.py</span><br><span class="line">|  +--parameters.py</span><br><span class="line">|  +--functional.py</span><br><span class="line">|  ...</span><br><span class="line">+--README.md</span><br><span class="line">+--LICENSE</span><br><span class="line">+--test.py</span><br><span class="line">+--train.py</span><br></pre></td></tr></table></figure><p>在data文件夹里，放置数据集和模型，以及log输出；<br>在model文件夹里，将模型尽可能模块化，并用一个顶层模块将子模块组合起来。这个顶层模块要实现训练与测试的类方法。<br>在utils里放置参数列表文件，小工具，以及对数据预处理的文件。（我曾见过有用Jupyter Notebook进行可视化的数据清理的做法）<br>如果要开源，请加入README.md和LICENSE，一般我会选择GPL v3的License。<br>在test.py和train.py里实例化模型，进行训练和测试。</p><p>一个可以参照的GitHub开源项目可以点这里：<a href="https://github.com/kefirski/pytorch_RVAE" target="_blank" rel="noopener">https://github.com/kefirski/pytorch_RVAE</a></p><h2 id="写一个好的注释"><a href="#写一个好的注释" class="headerlink" title="写一个好的注释"></a>写一个好的注释</h2><p>Google曾经发布过一个<a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/contents/" target="_blank" rel="noopener">代码风格指南</a>，里面详细地介绍了Python代码应当遵循的有用的规范。在里面的函数一节里，就提及了注释的规范。</p><p>对于文档注释，文档字符串是包, 模块, 类或函数里的第一个语句。这些字符串可以通过对象的<strong>doc</strong>成员被自动提取, 并且被pydoc所用。根据<a href="https://www.python.org/dev/peps/pep-0257/" target="_blank" rel="noopener">PEP-257</a>(这也是一个非常有名的指南)，文档字符串使用的注释风格应当是成对的三个双引号。</p><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Add</span><span class="params">(arg_1, arg_2)</span>:</span></span><br><span class="line">    <span class="string">"""Add two numbers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    There should be some details if needed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        arg_1: The first number to be added.</span></span><br><span class="line"><span class="string">        arg_2: The second number to be added.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        A number. </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>如果是书写一个类，那么在类声明的下一行应该对其<strong>所有的类成员Attributes</strong>做出解释。</p><h2 id="在容易混淆的函数声明中使用类型约束"><a href="#在容易混淆的函数声明中使用类型约束" class="headerlink" title="在容易混淆的函数声明中使用类型约束"></a>在容易混淆的函数声明中使用类型约束</h2><p>这是一点个人的看法。<a href="https://www.python.org/dev/peps/pep-0484/" target="_blank" rel="noopener">PEP-484</a>文档对类型约束提出了规范。在必要的时候使用类型约束能让我在运行之前就能发现一些问题。</p><p>不加类型约束：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greetings</span><span class="params">(name_list)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>加入类型约束：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greetings</span><span class="params">(name_list: List<span class="params">(str)</span>)</span> -&gt; str:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><h2 id="使用数据类装饰器（Python-3-7特性）"><a href="#使用数据类装饰器（Python-3-7特性）" class="headerlink" title="使用数据类装饰器（Python 3.7特性）"></a>使用数据类装饰器（Python 3.7特性）</h2><p>在使用数据类的时候（比如我的parameters.py中的Parameters类）（根据我的个人习惯，我会将文件名全部小写，但是类会大写首字母），遵循这一条会让可读性有一定提升。<a href="https://www.python.org/dev/peps/pep-0557/" target="_blank" rel="noopener">PEP-557</a>规定了相关规则。</p><p>顺带一提，建议工程中所有的类都<strong>显式继承object类</strong>或者<strong>nn.Module类</strong>。</p><p>原版代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br></pre></td></tr></table></figure></p><p>使用类装饰器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    a: str</span><br><span class="line">    b: str</span><br></pre></td></tr></table></figure></p><p>这个类越是数据类，好处越明显。而且这个装饰器还会自动地帮助你实现一些魔术方法。</p><h2 id="使用新的Super方法调用"><a href="#使用新的Super方法调用" class="headerlink" title="使用新的Super方法调用"></a>使用新的Super方法调用</h2><p>在我们初始化一个神经网络模块的时候，这样的代码在开源代码中十分常见：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Model, self).__init__()</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>但是这个超类方法可以被下列写法完全替代：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>推荐使用。</p><h2 id="使用-init-py文件"><a href="#使用-init-py文件" class="headerlink" title="使用__init__.py文件"></a>使用__init__.py文件</h2><p>这个文件的作用是将文件夹变为一个Python模块。Python 中的每个模块的包中，都有__init__.py 文件。</p><p>通常__init__.py 文件为空，但是我们还可以为它增加其他的功能。我们在导入一个包时，实际上是导入了它的__init__.py文件。这样我们可以在__init__.py文件中批量导入我们所需要的模块，而不再需要一个一个的导入。</p><p>这样做在写代码时有个额外的好处：在Visual Studio Code等编辑器中，编辑器能够进行<strong>智能提示和自动补全</strong>。</p><h2 id="在必要的时候使用assert"><a href="#在必要的时候使用assert" class="headerlink" title="在必要的时候使用assert"></a>在必要的时候使用assert</h2><p>assert是一个不怎么被提起的功能，然而我在实际使用中感受到assert可以帮助我们进行debug。一般来说，我进行debug最常用的方法是进行单步调试，在<strong>关键的地方打断点，观察变量列表</strong>；然而断点的机制决定了它并不是持久化的debug策略，我们在与其他人协作写代码的时候，也无法提醒其重点关注和检查哪些问题。</p><p>用于持久化进行测试的常见方法一般是将需要观察的变量进行print输出，然后<strong>观察output控制台</strong>。然而print函数在debug过程中可是要去掉的。所以assert函数可以<strong>在关键的地方对变量进行检查</strong>。通过这种检查，函数的功能得以保证，且无需添加if，避免了过深的隐蔽bug；此外，assert语句可以提醒其他的阅读这段代码的人：这个地方的变量应当满足什么要求，是怎么样的一个变量。</p><h2 id="持续更新中"><a href="#持续更新中" class="headerlink" title="持续更新中"></a>持续更新中</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提及PyTorch的代码写作，我没有找到一个大家约定俗成的规约。我自己遵循了一些能让Python代码更具有可读性和持续开发的规则，现记录如下。&lt;/p&gt;
    
    </summary>
    
      <category term="软件工程" scheme="http://ldzhangyx.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="PyTorch" scheme="http://ldzhangyx.github.io/tags/PyTorch/"/>
    
      <category term="软件工程" scheme="http://ldzhangyx.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="Python" scheme="http://ldzhangyx.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>之后几年里想做的研究（非正式Research Proposal）</title>
    <link href="http://ldzhangyx.github.io/2019/03/31/research-proposal/"/>
    <id>http://ldzhangyx.github.io/2019/03/31/research-proposal/</id>
    <published>2019-03-31T12:01:10.000Z</published>
    <updated>2019-04-01T04:34:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>The area I am passionate about is computational creativity[1]. It includes story generation, message generation, and even music generation. I want to endow machines with creative behaviors, and, I am doing good at music generation, indeed.</p><p>About generation model, there are several questions.</p><ul><li>Is that useful? My answer is yes. We have lots of ideas, but it is difficult to transform ideas to artworks. Most of us only have the abilities to finish a draft. If it can be controlled, then models can be used to assist people do creative task like writing and composition.</li><li>How can we control the model? Some approaches can be applied.</li></ul><ol><li>The first is to control input.[2] FAIR developed a model to generate stories from tags and topic words[3]. Hierarchical attention mechanism is used in this model. By controlling the input, they can create different kinds of stories.</li><li>The second way is to control structure. Skeleton model is used to keep generated narrative consistent[4]. They set a structure via reinforcement learning and generate stories progressively, to keep articles fluent and can be read.</li></ol><ul><li>What is the main difficulty?</li></ul><ol><li>We lack data. However, we can solve the problem by designing training methods. CocoNet is used to generate J.S. Bach’s chorales[5]. In the beginning, they have only 306 pieces of artworks. But they tried to erase different parts and let the model recover them, and then erase again. During this period, the model can gradually learn composition skills</li><li>We lack benchmarks. Now most generative models are evaluated manually. We can quantify the content of the assessment and achieve results similar to human assessment in mathematical form. A good example is VMO analysis, which can discover the hierarchy of music clips and analyze the logic of music.</li><li>We lack good learning target. In my opinion, traditional seq2seq model uses cross-entropy loss, which limits probabilities. My idea is that, we can analyze features, like consistency and local circulation, to train a discriminative model, like GAN.</li><li>Structure design is difficult. Skeleton model applied reinforcement learning, but I have a better idea – use meta-learning techniques. Learning to teach models[6] is my current research topic at Microsoft. Meta-learning can help us decide hypothesis space[7]. Maybe we can use this method to control the structure of artworks.</li></ol><ul><li>Your ideas?</li></ul><ol><li>Generate models hierarchically, but use meta-learning techniques as assistance, to make generated results controllable.</li><li>Graph Convolutional Network should be applied to used to make the text logical. Knowledge graph include prior knowledge in the network structure, and graph embedding allows embedding results to contain information about the knowledge graph[8].</li></ol><p>References<br>[1] Colton, S., Charnley, J. W., &amp; Pease, A. (2011, April). Computational Creativity Theory: The FACE and IDEA Descriptive Models. In ICCC (pp. 90-95).<br>[2] Briot, J. P., &amp; Pachet, F. (2017). Music generation by deep learning-challenges and directions. arXiv preprint arXiv:1712.04371.<br>[3] Fan, A., Lewis, M., &amp; Dauphin, Y. (2018). Hierarchical neural story generation. arXiv preprint arXiv:1805.04833.<br>[4] Xu, J., Zhang, Y., Zeng, Q., Ren, X., Cai, X., &amp; Sun, X. (2018). A skeleton-based model for promoting coherence among sentences in narrative story generation. arXiv preprint arXiv:1808.06945.<br>[5] Huang, C. Z. A., Cooijmans, T., Roberts, A., Courville, A., &amp; Eck, D. (2019). Counterpoint by convolution. arXiv preprint arXiv:1903.07227.<br>[6] Fan, Y., Tian, F., Qin, T., Li, X. Y., &amp; Liu, T. Y. (2018). Learning to teach. arXiv preprint arXiv:1805.03643.<br>[7] Han, B., Yao, Q., Yu, X., Niu, G., Xu, M., Hu, W., … &amp; Sugiyama, M. (2018). Co-teaching: Robust training of deep neural networks with extremely noisy labels. In Advances in Neural Information Processing Systems (pp. 8536-8546).<br>[8] Liu, W., Wang, Z., Liu, X., Zeng, N., Liu, Y., &amp; Alsaadi, F. E. (2017). A survey of deep neural network architectures and their applications. Neurocomputing, 234, 11-26.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The area I am passionate about is computational creativity[1]. It includes story generation, message generation, and even music generatio
      
    
    </summary>
    
    
      <category term="music generation" scheme="http://ldzhangyx.github.io/tags/music-generation/"/>
    
      <category term="个人想法" scheme="http://ldzhangyx.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%83%B3%E6%B3%95/"/>
    
      <category term="NLG" scheme="http://ldzhangyx.github.io/tags/NLG/"/>
    
      <category term="machine learning" scheme="http://ldzhangyx.github.io/tags/machine-learning/"/>
    
      <category term="Master" scheme="http://ldzhangyx.github.io/tags/Master/"/>
    
  </entry>
  
  <entry>
    <title>music21配置与使用</title>
    <link href="http://ldzhangyx.github.io/2019/03/25/music21/"/>
    <id>http://ldzhangyx.github.io/2019/03/25/music21/</id>
    <published>2019-03-25T14:44:04.000Z</published>
    <updated>2019-03-25T15:14:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>一篇讲述music21使用时可能会出现的问题的解决方案。</p><a id="more"></a><p>环境：</p><ul><li>Windows 10</li><li>Python 3.6</li><li>Anaconda</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装不用细说，如果安装不上的话可以考虑开发环境问题，另外配一个开发环境问题可能得解。亲测Anaconda + Python 3.6环境是没有问题的。</p><h1 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h1><p>请先安装MuseScore 3，然后这样在代码中加上这几行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">us = music21.environment.UserSettings()</span><br><span class="line">us[&apos;musescoreDirectPNGPath&apos;] = r&quot;C:\Program Files\MuseScore 3\bin\MuseScore3.exe&quot;</span><br><span class="line">us[&apos;musicxmlPath&apos;] = r&quot;C:\Program Files\MuseScore 3\bin\MuseScore3.exe&quot;</span><br></pre></td></tr></table></figure><h1 id="播放midi文件"><a href="#播放midi文件" class="headerlink" title="播放midi文件"></a>播放midi文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file = music21.converter.parse(<span class="string">"music.mid"</span>)</span><br><span class="line">midi.realtime.StreamPlayer(file).play()</span><br></pre></td></tr></table></figure><h1 id="展示乐谱"><a href="#展示乐谱" class="headerlink" title="展示乐谱"></a>展示乐谱</h1><p>配置好环境变量之后，你可能会遇到这个问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SubConverterFileIOException: png file of xml not found. Or file &gt;999 pages?</span><br></pre></td></tr></table></figure><p>请将你的代码改写成这个样子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.show(<span class="string">'musicxml'</span>)</span><br></pre></td></tr></table></figure><p>当参数设置为musicxml，且环境变量正确，则乐谱可以正常显示。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一篇讲述music21使用时可能会出现的问题的解决方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="音乐生成" scheme="http://ldzhangyx.github.io/tags/%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90/"/>
    
      <category term="python" scheme="http://ldzhangyx.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>个人向RSS订阅列表，以及极简RSS配置指南</title>
    <link href="http://ldzhangyx.github.io/2019/02/18/rss-recommend/"/>
    <id>http://ldzhangyx.github.io/2019/02/18/rss-recommend/</id>
    <published>2019-02-18T05:10:02.000Z</published>
    <updated>2019-02-18T06:40:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>这份订阅列表是微软学生俱乐部一个不完全个人网站清单。</p><a id="more"></a><h1 id="订阅列表"><a href="#订阅列表" class="headerlink" title="订阅列表"></a>订阅列表</h1><ul><li>张逸霄的技术小站<ul><li>ldzhangyx.github.io</li><li>主题：音乐生成，自然语言处理</li><li>也就是我的个人网站，不定期更新有趣的论文笔记和想法。</li></ul></li><li>LeoJhon.Song’s Blog<ul><li>leojhonsong.github.io/zh-CN </li><li>主题：技巧和个人心得</li><li>宋铸恒的博客，本身水平不错，博客质量也比较高。</li></ul></li><li>…</li></ul><h1 id="RSS配置指南"><a href="#RSS配置指南" class="headerlink" title="RSS配置指南"></a>RSS配置指南</h1><h2 id="订阅他人的RSS"><a href="#订阅他人的RSS" class="headerlink" title="订阅他人的RSS"></a>订阅他人的RSS</h2><ol><li>检查此博客支不支持RSS订阅</li></ol><p>最简单的检查方式是，访问atom.xml子页面。比如说我的网站，可以访问ldzhangyx.github.io/atom.xml页面来查看。如果没有这个网页，那就是没有RSS订阅。</p><ol><li>安装chrome插件</li></ol><p>我自己用的是<a href="https://feeder.co/reader" target="_blank" rel="noopener">Feeder</a>，很好用。</p><ol><li>添加网址到插件订阅列表里</li></ol><h2 id="配置RSS"><a href="#配置RSS" class="headerlink" title="配置RSS"></a>配置RSS</h2><ol><li>npm安装hexo-generator-feed</li></ol><p>网址在这里：<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">https://github.com/hexojs/hexo-generator-feed</a></p><ol><li><p>按照上面网页的指引，在根目录的_config.yml添加RSS项。</p></li><li><p>在当前主题的_config.yml添加RSS列，用于显示RSS图标。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: &quot;/atom.xml&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这份订阅列表是微软学生俱乐部一个不完全个人网站清单。&lt;/p&gt;
    
    </summary>
    
    
      <category term="RSS" scheme="http://ldzhangyx.github.io/tags/RSS/"/>
    
  </entry>
  
  <entry>
    <title>《Interactive Arrangement of Chords and Melodies Based on a Tree-Structured Generative Model》论文笔记</title>
    <link href="http://ldzhangyx.github.io/2019/01/22/tree-music/"/>
    <id>http://ldzhangyx.github.io/2019/01/22/tree-music/</id>
    <published>2019-01-22T07:13:00.000Z</published>
    <updated>2019-01-24T11:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>京都大学这篇论文很有意思，是ISMIR 2017年同款论文《Function- and Rhythm-Aware Melody Harmonization Based on Tree-Structured Parsing and Split-Merge Sampling of Chord Sequences》的交互版本。基本理论都是一致的，建立了一个PCFG的统计模型。这篇文章我会两个都提到。</p><a id="more"></a><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文提出了一个harmonization方法。给定一个旋律（音符序列），输出一系列和弦符号。典型的方式使用了HMM，但不能明确表现节奏、和弦结构、和弦功能。所以本文提出了一个分层生成模型，包括：</p><ol><li>PCFG生成和弦</li><li>韵律（metrical）马尔可夫模型生成节奏（强弱关系，同时也是和弦边界）</li><li>在和弦条件下的马尔可夫旋律生成</li></ol><p>为了估计给定旋律的可变长度和弦序列，作者使用了具有分裂、合并操作的Metropolis-Hastings采样器迭代地细化潜在树结构和和弦符号和节奏。实验结果表明，该方法在预测能力方面优于基于HMM的方法。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>和弦序列的创建在音乐构成和排列中起关键作用，因为和声影响音乐的情绪并且表征某种音乐风格的印象。我们的目标是自动旋律协调，或为给定旋律（一系列音符）自动生成一系列和弦符号。在本文中，我们将注意力集中在流行音乐风格的协调问题上。我们采用统计方法自动学习音乐语料库中的模型架构和参数，并根据数据的风格进行协调，而不是手动描述爵士乐和古典音乐等风格的音乐理论。我们制定了一个概率模型，表示和弦序列的生成可能性和另一个代表在和弦序列上有条件地产生旋律的可能性的模型。</p><p>和弦序列通常由马尔可夫模型描述。常用的方法是，使用一个有潜在马尔可夫链的HMM模型，假定旋律在这个和弦上生成。但是这个方法的缺点在于忽略了和弦的句法角色和层次结构。在传统的和声理论中，这种句法角色通常被称为调和函数，包括三类（例如，主音（tonic，第一音级），属音（dominant，第五音级）和下属音（subdominant，第四音级）），它们类似于语言学理论中的词性。</p><p>举个例子，一个和弦序列(C, Dm, G, Am, C, F, G, C)，可以被解释成：(((T, SD),(D, T)), ((T, SD), (D, T)))。因此，当我们计算地帮助人们创造新音乐时，期望考虑这种和弦序列的分层树结构。</p><p>传统HMM的另一个问题在于和弦节奏（起始分数时间或和弦持续时间）的描述。由于和弦持续时间是通过常规时间网格（例如，节拍或条形网格）上的自转移概率来描述的，因此未明确描述和弦节奏。</p><p>模型中PCFG的使用收到了Steedman工作的启发（1984年）。这个工作提出了使用上下文无关语法CFG来表示和弦的层次结构。本文研究的一个关键优势是，PCFG的规则概率和树结构可以以无监督的方式从和弦序列语料库中进行联合估计，期待和弦的句法角色被那些非终结符（non-terminal）捕获。</p><p>韵律马尔可夫模型用于明确地描述后续和弦之间，起始节拍位置的转换概率。</p><p>在这个树状分层生成模型，本文提出了一个统计的harmonization方法，基于具有split、merge操作的复杂的Metropolis-Hasting采样器。为了估计具有适合于给定旋律的和弦节奏的可变长度和弦序列，我们随机地从它们的后验分布中搜索最可能的潜在树结构，符号和和​​弦的起始时间。在这个搜索中，我们的采样器有四种类型的建议：</p><ol><li>使用Viterbi算法的变体，更新整个latent树结构。</li><li>其中一个和弦被分开。</li><li>两个相邻的和弦根据latent树结构合并。</li><li>其中一个和弦的开始时间来回移动。</li></ol><p>这种随机的全局或局部更新可以被解释为寻找最佳和弦序列的重复试错过程。</p><h1 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h1><h2 id="Harmonization（协调）"><a href="#Harmonization（协调）" class="headerlink" title="Harmonization（协调）"></a>Harmonization（协调）</h2><p>Harmonization的研究有两个方向：生成和弦，或者直接生成若干个音（比如说组成和弦的四个音）。</p><p>第一个方向有这些研究：</p><ol><li>用支持向量机（SVM）从给定旋律中选择和弦音（和弦的构成音），从和弦音构造三和弦，以及通过rule-base方法生成和弦行进。</li><li>基于HMM的方法，和弦转换由马尔可夫模型描述。该方法已在MySong中实现。</li><li>提出了类似的马尔可夫模型，其中和弦由旋律和时变键来调节。</li></ol><p>第二个方向：</p><ol><li>基于规则的方法，用于生成巴赫风格的四部分合唱。</li><li>使用基于音乐理论的遗传算法（GA）变体。</li><li>基于HMM的方法，该方法将和弦表示为隐藏状态，将音符表示为观察输出。</li><li>隐半马尔可夫模型（HSMM）用于明确表示和弦的持续时间。</li><li>分层树形结构模型，它通过划分和弦的符号从分层时标的角度描述和弦运动。</li></ol><h2 id="音乐语言建模（Music-Language-Modeling）"><a href="#音乐语言建模（Music-Language-Modeling）" class="headerlink" title="音乐语言建模（Music Language Modeling）"></a>音乐语言建模（Music Language Modeling）</h2><p>根据《Generative Theory of Tonal Music》（GTTM），音符序列被假定有了分层的结构，描述了哪些音符是重要的音符。这个理论包括了一个规则，可以将音符序列递归地减少到一个音符。这个理论已经有了其计算实现。基于PCFG的GTTM概率公式已经被提出了，并且可以直接从音符序列中无监督地学习产生式。</p><p>用于和弦序列地各种语言模型，在音乐音频信号处理、音乐分析、音乐排列（Arrangement）中也被充分研究。</p><p>传统语言模型是n-gram语言模型。同时为了避免n较大带来的稀疏问题，也有平滑方法解决。Yoshii提出了一个vocabulary-free的infinity-gram模型，每个和弦取决于其可变长度的和弦历史。</p><p>也有研究引入了几个隐藏的状态转换层，代表和弦的层次结构。</p><p>一些研究明确使用了生成语法来表示和弦的层次结构。Steedman和Rohimeier提出了和弦序列的产生式（production rules）描述。之后其概率扩展也被研究，且已经进行了概率的无监督学习。</p><p>这些产生式列表和非终结符（non-terminals）是根据音乐理论和经验给出的。</p><h1 id="概率建模"><a href="#概率建模" class="headerlink" title="概率建模"></a>概率建模</h1><p>用于和弦符号的PCFG通过来自和弦序列语料库的无监督学习来训练，同时估计背后的latent树结构。用于和弦节奏的韵律马尔可夫模型来自包括和弦节奏的语料库的监督学习来训练。音调序列的马尔可夫模型也通过来自旋律和和弦序列的配对数据的监督学习来训练。</p><h2 id="模型形式化"><a href="#模型形式化" class="headerlink" title="模型形式化"></a>模型形式化</h2><p>约定下面符号：</p><p>和弦总体用$z$表示.假设共有N个和弦符号，那么第n个和弦符号记为$z_n$。</p><p>和弦开始的时间总体用$\phi$表示（16分音符为单位时间）。N个值与N个和弦一一对应，所以第n个开始时间记为$\phi_n$。</p><p>将$x$记为旋律总体。在第n个和弦范围里，旋律序列可以用$x_n$表示。由于一个和弦可以有多个音符序列，所以其中第i个音符使用$x_{ni}$表示。</p><p>音符也需要控制其长度（确定开始时间）。将开始时间的总体记为$\psi$。所以第n个和弦范围内的开始时间序列也记为$\psi_n$。其中第i个音符的开始时间记为$\psi_{ni}$。</p><p>（说实话原文表示得比这个难懂多了……剩下的表示也非常勉强）</p><p>如果每小节（measure/bar）长度为L，那么$\phi$和$\psi$的取值范围为$[0, 16L-1]$（以16分音符为单位长度）。</p><p>那么概率上下文无关文法（PCFG）被定义为：</p><script type="math/tex; mode=display">G = (V, \Sigma, R, S )</script><p>其中$V$为非终结符集合，$\Sigma$为终结符集合，$R$为推导式集合，$S$为起始变量。</p><p>概率规则在这里有三种形式：</p><ol><li><p>A分裂为BC（不同的BC带来概率）：</p><script type="math/tex; mode=display">\mathbf{\theta_A} = \{\theta_{A\rightarrow BC}\}_{B,C \in V}</script></li><li><p>A转换成非终结符$\alpha$（不同的$\alpha$带来概率）：</p></li></ol><script type="math/tex; mode=display">\mathbf{\eta_A} = \{\eta_{A\rightarrow \alpha}\}_{\alpha \in \Sigma}</script><ol><li>A有几率分裂，也有几率转换为终结符。将其转换为终结符地概率记为$\lambda_A$。</li></ol><p>韵律马尔可夫模型表述了和弦开始的时间点的转移概率：</p><script type="math/tex; mode=display">p(\phi_n|\phi_{n-1}) = \pi_{\bar{\phi}_{n-1},\bar{\phi}_{n}}</script><p>其中，$\phi_n$代表第n个和弦开始的时间点，而$\bar{\phi}_{n} = \phi_n \mod 16$，且$\pi_{ab}$代表了从beat position的转移概率（没太明白）。</p><p>最后音乐生成的马尔可夫模型，是基于和弦进行的还原。</p><script type="math/tex; mode=display">p(x_{nm}|x_{nm-1}, z_n) = \tau^{z_n}_{x_{nm-1}x_{nm}}</script><p>这个公式决定了从一个音符跳到另一个音符的转移概率。</p><p>我们在这些PCFG的参数上施加共轭先验（先验分布=后验分布），以保证和弦不会对旋律产生冲突：</p><script type="math/tex; mode=display">\theta_A \sim Dirichlet(\xi_A) \\\eta_A \sim Dirichlet(\zeta_A) \\\lambda_A \sim Beta(\iota_a)</script><p>（什么玩意儿……我也不熟贝叶斯估计啊……）</p><p>三个参数均为超参数。相同地，对和弦边界的马尔可夫模型：</p><script type="math/tex; mode=display">\pi_a \sim Dirichlet(\beta) \\\tau_x^z \sim Dirichlet(\gamma)</script><p>相似地，我们也要建立一个旋律生成模型。这个旋律生成模型的边界类似于和弦的边界，但是作为协调模型，旋律作为输入进行处理。</p><p>当然也可以使用LSTM进行旋律生成：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="贝叶斯学习"><a href="#贝叶斯学习" class="headerlink" title="贝叶斯学习"></a>贝叶斯学习</h2><p>我们通过最大后验（MAP）估计获得模型参数$\Theta = {\theta, \eta, \lambda, \pi, \tau}$。使用一种内部滤波-外部采样（inside-filtering-outside-sampling，2007年被提出）的算法进行Gibbs采样变体。</p><p>假设和弦序列$z$是从latent树$t$中导出的，那么$t$可以有一组非终结节点${t_{n:m}}_{1 \leq n \leq m \leq N}$，其中$t_{n:m}$是根节点。这样可以导出从n到m的所有和弦$z_{n:m} = {z_n, z_{n+1}, …, z_m}$。这个latent树$t$和参数$\theta, \eta, \lambda$采用条件后验分布$p(t|\theta, \eta, \lambda,z)$和$p(\theta, \eta, \lambda| t,z)$进行交替的采样。</p><p>这个算法可以从正确的后验分布$p(t,\theta, \eta, \lambda|z)$中得到$t,\theta, \eta, \lambda$这四个参数的样本。</p><p>在内部滤波阶段，我们集中于一个条件概率，从树导出和弦：</p><script type="math/tex; mode=display">p_{nm}^A = p(z_{n:m}|t_{n:m} = A)</script><p>这个概率可以递归地从叶节点到根节点进行逐步计算：</p><script type="math/tex; mode=display">p_{nm}^A = \lambda_A\eta_A \rightarrow z_n, \\p^A_{n,n+k} = \sum_{B,C \in V}[(1-\lambda_A)\theta_{A \rightarrow BC}\sum_{1 \leq l \leq k}p^B_{n,n+l-1}p^C_{n+l,n+k}]</script><p>在外部采样地步骤，我们递归地采样一个latent树，从开始符号$S$到叶节点，使用内部概率$p(t|\theta, \eta, \lambda,z)$。当节点$t_{n:n+k} = A$已经被采样，那么这个节点分裂到的$B, C$可以这么采样：</p><script type="math/tex; mode=display">p(l,B,C) = p(t_{n:n+l-1} = B, t_{n+l:n+k} = C | t_{n:n+k} = A, z_{n:n+k}) \\= (1-\lambda_A)\theta_{A \rightarrow BC} p^B_{n,n+l-1}p^C_{n+l,n+k}/p^A_{n,n+k}</script><p>其中$l$就是分裂点。</p><p>最后，采样$\theta, \eta, \lambda$，根据公式：</p><script type="math/tex; mode=display">p(\theta, \eta, \lambda| t,z) = p(\theta|t,z)p(\eta|t,z)p(\lambda|t,z)</script><p>给定：</p><script type="math/tex; mode=display">\theta_A \sim Dirichlet(\xi_A + u_A) \\\eta_A \sim Dirichlet(\zeta_A + v_A) \\\lambda_A \sim Beta(\iota_a + w_A)</script><p>其中，$u_{A\rightarrow BC}(v_A \rightarrow \alpha)$ 是对应产生式对$t$调用的次数，而$w_{A,0}(w_{A,1})$是非终结符$A$分裂（代换为终结符）和$t$的次数。（原文如此）</p><p>马尔可夫模型的学习是通过监督学习完成的。因为Dirichlet分布和分类分布之间的共轭性，参数很容易学习到。</p><h1 id="Harmonization"><a href="#Harmonization" class="headerlink" title="Harmonization"></a>Harmonization</h1><h2 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h2><p>给定一个旋律序列，包括音高$x$，音高开始时间序列$\psi$，训练好的模型参数$\Theta$，估计一个可变长度和弦序列$z$及其开始时间序列$\phi$，以及一个latent树$t$。</p><h2 id="Metropolis-Hasting采样"><a href="#Metropolis-Hasting采样" class="headerlink" title="Metropolis-Hasting采样"></a>Metropolis-Hasting采样</h2><p>使用MH采样生成$t,z,\phi$，通过后验分布$p(t,z,\phi|x,\psi,\Theta)$，基于下面四个proposals:</p><ul><li>全局更新：更新和弦序列和latent树，保持和弦数量和开始时间不变</li><li>分裂</li><li>合并</li><li>节奏更新：移动一个和弦的开始时间 </li></ul><p>虽然使用内部滤波-外侧采样算法进行全局更新更为合适，但Viterbi算法用于后验空间的有效优化。</p><p>在MH采样中，随机选取其中一个proposal，将</p><script type="math/tex; mode=display">s = (t,z,\theta)</script><p>转化到</p><script type="math/tex; mode=display">s^* = (t,z,\theta)^*</script><p>计算接受率，来判断$s^*$是否接受为下一个样本：</p><script type="math/tex; mode=display">g(s^*,s) = min\{1, \frac{p(s^*)p(s|s^*)}{p(s)p(s^*|s)}\}</script><p>我们通过迭代MH采样足够次数来估计最合理的$z$和$\phi$，然后获得最大化完整数据可能性的潜在变量。</p><h2 id="更新和弦符号"><a href="#更新和弦符号" class="headerlink" title="更新和弦符号"></a>更新和弦符号</h2><h3 id="Viterbi算法"><a href="#Viterbi算法" class="headerlink" title="Viterbi算法"></a>Viterbi算法</h3><p>这里执行的是全局更新：$p(t,z,\phi|x,\psi,\Theta)$。</p><p>使用的并不是标准Viterbi算法，因为$t,z$都是需要估计的隐变量。</p><p>首先从最底层的和弦序列$z$，到根节点$S$递归计算内部概率：</p><script type="math/tex; mode=display">p_{nn}^A = \lambda_A\max_{c \in \Sigma}\eta_{A \rightarrow c}p(x_n|c)^{1/I_n}, \\p^A_{n,n+k} = (1-\lambda_A)\max_{B,C \in V, l \in [1,k]}\theta_{A \rightarrow BC}\sum_{1 \leq l \leq k}p^B_{n,n+l-1}p^C_{n+l,n+k}</script><p>其中$p(x_n|c)$是第n个和弦范围里的音高概率：</p><script type="math/tex; mode=display">p(x_n|z_n) = p(x_{n1}|z_n)p(x_{n2}|x_{n1}z_n)...p(x_{nI_n}|x_{n,I_{n}-1}z_n)</script><p>最可能的$t,z$通过回溯最佳路线得到。</p><h3 id="分裂-合并操作"><a href="#分裂-合并操作" class="headerlink" title="分裂-合并操作"></a>分裂-合并操作</h3><p>分割操作与合并操作是相反的操作。</p><p>为了得到新状态$s^*$，在分割操作中，随机选择一个和弦$z_n$，将其分割为$z^L$和$z^R$，选择新的开始时间在$[\phi_n + 1, \phi_{n+1} - 1]$，同时将非终结符$t_{n:n}$分割为$t^L, T^R$。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>合并操作，选择一对相邻和弦进行操作：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>其中$#MergeableNodes(s^*)$指可以在这个状态里合并的和弦对的数量。</p><p>两个概率的似然比：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>通过上述三个式子，可以计算$s^*$的接受率。</p><p>图为示意操作：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="更新和弦节奏"><a href="#更新和弦节奏" class="headerlink" title="更新和弦节奏"></a>更新和弦节奏</h2><p>更新和弦节奏的前提是其他的因素都固定下来了：$p(\phi|t,z,x,\psi,\Theta)$。</p><p>给出相关公式：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h1><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><p>从SALAMI数据集（McGill公开的一个音乐标注数据集）中提取和弦序列，长度从8到32的序列被选择。和弦符号仍被分为25个大小调标记。</p><p>为了以有监督的方式训练两个马尔可夫模型，从Rock Corpus中提取了9902对旋律和对应和弦序列。</p><p>在测试阶段，使用了RWC音乐数据集，用于评估。</p><p>所有数据都被转换到C大（小）调。</p><h2 id="评估旋律预测的能力"><a href="#评估旋律预测的能力" class="headerlink" title="评估旋律预测的能力"></a>评估旋律预测的能力</h2><p>为了根据旋律预测的能力评估PCFG分层生成模型，我们计算了从RWC音乐数据库中提取的旋律的边际似然性。</p><p>非终结符的种类数（或PCFG的复杂度）K，从1变为20。在K的每种情况下，我们通过Gibbs采样获得不同的PCFG参数，并计算每个参数集的边际似然。根据计算复杂性，不同参数集的数量在37和50之间。我们假设和弦开始与小节线完全同步，使得和弦序列在分析上被边缘化。</p><p>将所提出的模型与HMM进行比较，该HMM学习相邻单元之间的和弦符号转换，（相邻单元是）音符或小节。当最小时间单位是音符时，假设每个音符在当时的和弦符号上有条件地生成。当最小时间单位是小节时，假设伴随每个和弦的音符是根据旋律马尔可夫模型生成的。</p><p>每一个音符的边缘似然值：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="评估和弦序列的预测能力"><a href="#评估和弦序列的预测能力" class="headerlink" title="评估和弦序列的预测能力"></a>评估和弦序列的预测能力</h2><p>与标签的比较结果见下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>所提出的模型16.6％优于基于HMM的方法。虽然一定范围的K显示出比基于HMM的方法高得多的准确度（例如，26％），但是K与准确度的中值之间几乎没有相关性。</p><h2 id="生成样本的讨论"><a href="#生成样本的讨论" class="headerlink" title="生成样本的讨论"></a>生成样本的讨论</h2><p>下图显示了具有分裂、合并操作的MH采样方法如何进行harmonization:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>问题依然存在。这个方法更倾向于生成简单的和弦，原因是因为优化使用了Viterbi算法。此外，实验中得出的和弦序列数量往往不高于最初采样的初始化数量，因为拆分比合并接受率更低。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>本文提出了一种harmonization方法，根据隐藏在流行音乐语料库中的音乐规则，为给定的旋律生成可变长度的和弦序列。实验结果表明，所提出的模型在预测能力方面优于基于HMM的方法，并且具有很大的作曲、编曲潜力。<br>由于我们的方法基于统计学习，因此发现它更喜欢更简单和基本的和弦序列。更具体地，产生的和弦的数量倾向于小于小节的数量。这个问题可以通过为MCMC采样中的拆分操作提供更多机会来解决。为了增加所生成的和弦符号的多样性，sampling或beam search方法被认为是有效的，而不是viterbi算法——其倾向于从统计观点找到具有最高后验概率的流行和弦序列。<br>我们还需要进一步研究我们的模型。在本文中，一个4/4拍的小节被分为16个时间单位。因此，研究最佳时间分辨率并扩展模型以处理其他拍子的音乐类型非常重要。此外，为了评估生成的和弦序列的音乐适应性，我们计划进行基于调查的听力测试，并评估我们的模型与音乐理论或音乐直觉的一致性。</p><p>（他们在2018版的确做了一个详尽的测试评估）</p><h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>这个论文过于硬核，以至于我不知道从哪里开始说起……首先值得称道的是使用PCFG文法来表达和弦的分层结构。这个实验室这几年真是对这个idea疯狂灌水，各个顶会和期刊都灌了个遍。但是这个idea，也就是运用乐理来对和弦进行树状分析和生成，是值得称道的。</p><p>那么这篇论文最硬核和晦涩的点在于对这个层次关系树的训练。如果用替代的方法构建这棵树（比如只捕捉相邻关系），结果将会好做很多。</p><p>而且这篇论文的可读性是真的很差了……</p><p>另外这个计算和谐程度的方法很有意思，有一点VAE的影子，从高维到低维，再还原。这样的低维流形可以用图网络去学习吗？我觉得是一个非常有趣的点。</p><p>另外，</p><p>这段时间比较忙，没有顾着更新。然后各个方面发展有些停滞不前，研究院这边的联系、申请的事情，这些都是需要操心的事。更加迷的是，最近看了那篇《Counterpoint by Convolution》，里面叙述的一个无序模型十分令人费解；还有夏老师前段时间的《A Framework for Automated Pop-song Melody Generation with Piano Accompaniment Arrangement》，也是蛮复杂的，不过后面这篇主要是叙事节奏太快，几页纸讲完了一个编曲系统，令人有些迷糊。</p><p>最近也有些新启发。前段时间入手的《完全音乐理论教程》，Laitz的那本。仔细研读这本书（当然还没读完），我对对位法写作和调性音乐有了更加深度的认识。目前我觉得，乐理肯定是复调音乐写作的钥匙。我就这个问题问过Prof. Pasquier，关于乐理在实际音乐生成中的位置，他回应说一些关键的点依旧是人工定义的。类比罗塞塔石碑，不同的语言在同一块石板上，音乐生成任务也可以借鉴乐理知识作为一个重要依据。那么音乐生成就极有意思了。目前的音乐生成实际上是分为了流行音乐和复调音乐两大块，其融合的一个点可能就是夏老师上面那篇论文，用统一的方式生成主旋律、伴奏、分解和弦。流行音乐中，如何生成和弦走向、如何确定鲜明的旋律，如何保证旋律连贯性，都是需要保证的；而复调音乐中需要考虑的也有很多，包括音程关系，对位法规则等等。这些都是值得探索的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;京都大学这篇论文很有意思，是ISMIR 2017年同款论文《Function- and Rhythm-Aware Melody Harmonization Based on Tree-Structured Parsing and Split-Merge Sampling of Chord Sequences》的交互版本。基本理论都是一致的，建立了一个PCFG的统计模型。这篇文章我会两个都提到。&lt;/p&gt;
    
    </summary>
    
      <category term="论文笔记" scheme="http://ldzhangyx.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="音乐生成" scheme="http://ldzhangyx.github.io/tags/%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90/"/>
    
      <category term="和声" scheme="http://ldzhangyx.github.io/tags/%E5%92%8C%E5%A3%B0/"/>
    
  </entry>
  
  <entry>
    <title>《The Effect of Explicit Structure Encoding of Deep Neural Networks for Symbolic Music Generation》论文笔记</title>
    <link href="http://ldzhangyx.github.io/2018/12/26/structure-encoding-music/"/>
    <id>http://ldzhangyx.github.io/2018/12/26/structure-encoding-music/</id>
    <published>2018-12-26T06:17:37.000Z</published>
    <updated>2018-12-27T09:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>翻夏光宇老师论文列表时翻到的一篇文章，觉得里面的分析方法很有特点。</p><a id="more"></a><h1 id="论文要点"><a href="#论文要点" class="headerlink" title="论文要点"></a>论文要点</h1><p>计算创造（Computational Creativity）是一个很好玩的领域。有一个会议名为ICCC，专门为这样的生成模型做展示。生成模型也有很多种，但是音乐生成因为其作曲<strong>结构</strong>十分复杂，使得任务相对难做一些。给定和弦行进，在约束下进行音乐生成，是这篇论文的任务。当然这个任务也可以组合进别的复杂任务中。</p><p>论文探索了一件事，那就是对音乐结构显式地进行了encoding，通过两个模型：LSTM和WaveNet，并且对效果做了对比。从Encoding的角度来看，这篇文章与XiaoIce Band的编码其实有着类似的想法，但是具体方法不一样。</p><p>这篇文章对结构的分析对我很有启发。它们使用了名为Variable Markov Oracle的分析方法分析音乐结构，这个方法能将音乐行进转换为有限状态自动机，使用Markov链描述音乐。</p><p>分析之后的结论：使用堆叠的空洞卷积曾能提高结构编码的表现，以及将和弦行进进行全局编码（global encoding）也能更好地提升表现。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>论文首先聊了一下自动音乐生成的历史。神经网络给音乐生成带来了新进展，但是结构性上仍有所不足。比较成功的作曲局限于巴赫，因为其结构局部化明显，易于察觉。以前的研究提出过结构约束的技术，但是这样的约束与生成的过程有冲突，并且需要细致调参。相比之下直接将结构进行Encoding更加有意义。</p><p>论文选定了给定和弦行进的音乐生成任务。这个任务中，论文对两个结构做了系统比较：LSTM和WaveNet（空洞时序CNN，dilated temporal-CNN）。值得一提的是WaveNet在这篇论文中才第一次被用于象征域（symbolic domain）的音乐生成。就隐藏变量（hidden virables）的依赖性来看，两个结构是相似的——相对于ARMA模型和MA模型（都是统计学领域的模型）。据了解，这篇论文也是第一个进行两个结构系统性比较的论文。</p><p>象征域的音乐生成任务，有着信息量丰富的优点。在任务中，论文提出了一种创新的编码方式，将和弦与旋律进行交错表示（如图1）。这样能够高效组合不同时间尺度的和弦与旋律，使得模型能够同时学习到“过去的旋律”和“接下来两个小节的旋律”之间的时间延迟的依赖性,同时也可以学到两个小节内的和弦与旋律的同时关系。这样操作的优点在于，人们很少完全做即兴创作，几乎总是依赖于一个提前定义好的蕴含了高层音乐结构的信息（比如figured bass）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h3><p>对长度为$T$的音乐，给定直到时间点$t$的旋律，和全局和弦行进，目标是生成从$t$到$T$的剩余旋律。所以和弦是用作condition，在每一个step给出，最终的输出应保持旋律流，且与和弦有交互。</p><p>回头看图1，其中K是给定的内容，而P是期待输出的内容。</p><p>一个单向模型的条件概率分布可以这么定义：</p><script type="math/tex; mode=display">p(M_{T-t+1:T}|C_{1:T}) = \prod_{i=1}^{T-t}p(m_i|m_1, ..., m_{i-1}, c_1, ..., c_i)</script><p>其中$m_i$表示第$i$个step的旋律，$c_i$是第$i$个step的和弦，而$C_k$表示一直到$k$个step和和弦总体表示。</p><h3 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h3><h4 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h4><p>在LSTM模型中，将输入表示为向量V，V是两个向量M和C的组合：</p><script type="math/tex; mode=display">V = (M,C)</script><p>拥有1*155的维度，其中0~127代表MIDI的128个音，128代表休止符，129代表holding；130~154代表25个不同的和弦，其中前12个是大调和弦，之后12个是小调和弦，而最后一个代表没有和弦。</p><p>和弦不止24个，那么将之外的和弦映射到对应的和弦，比如C7和弦映射到C和弦，Cm7和弦映射到Cm和弦。</p><p>一首长度为T的乐曲，可以分别用五线谱和矩阵表示为下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看出来数据处理以八分音符为最小的分辨率（实际模型可以使用更高的分辨率），四分音符就可以表示为八分音符，然后holding住一个八分音符时长（在双向的模型里有所区别）。我个人认为这是一个有效的表示法。其他类似的表示法是music21提供的包，也可以对音乐进行编码。</p><p>特别要指出一点，在原来的论文里没有提及，是我对作者进行询问之后得到的结论。</p><p>在单向模型里，这一个表示没有问题，但是在双向模型里，这样的表示会让输入有一些奇怪之处，比如说holding究竟是在holding哪个音。对于这个问题，作者实际处理的时候使用了回文序列（在双向模型中），即将一个这样的序列：[64,129,129,129]改成了[64,129,129,64]，以保证模型不会出现理解障碍。这样就有另一个问题了，如果这个模型短到holding不存在，即“单音序列”，这该怎么表示呢？作者使用了0.03125秒作为最小分辨率，而八分音符的时长为0.125秒，所以0.03125秒应该是32分音符的时长。作者去除了这些单音序列，保证这样的数据表示正常工作（其实我也没有完全明白，因为单音序列看起来并不会带来任何问题）。</p><h4 id="WaveNet"><a href="#WaveNet" class="headerlink" title="WaveNet"></a>WaveNet</h4><p>表示与上述相同，但是M只有128维，0代表rest，其他代表音高。这里不区分连续多音，相连的两个同样音高视为延音（为什么？）。而和弦仍然是25维。</p><h3 id="LSTM结构"><a href="#LSTM结构" class="headerlink" title="LSTM结构"></a>LSTM结构</h3><p>两个模型，单向和双向。其中双向编码的特别之处在于将和弦完全编码进来了。编码的方式如之前所说是交叉编码，所以在i时刻之后的旋律部分置空，只留和弦部分，将这个矩阵进行编码。</p><p>LSTM结构的大致结构如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="WaveNet结构"><a href="#WaveNet结构" class="headerlink" title="WaveNet结构"></a>WaveNet结构</h3><p>WaveNet将旋律与和弦分开编码，所以也需要分开输入。没有condition的模型公式如下（k代表第k层）：</p><script type="math/tex; mode=display">z = \tanh(W_{f,k} * m) \odot \sigma(W_{g,k} * m)</script><p>其中*符号代表了空洞卷积。</p><p>而加入了condition的模型公式改成了这个样子：</p><script type="math/tex; mode=display">z = \tanh(W_{f,k} * m + V_{f,k} * c) \odot \sigma(W_{g,k} * m + V_{f,k} * c)</script><p>上述公式的第一个*符号都代表了空洞卷积操作，而涉及到c的第二个*符号代表了一个1*1的卷积层。</p><p>空洞卷积的结构如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>WaveNet的结构如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>训练的时候使用交叉熵，将其对比原始的音乐序列（loss函数一直是NLP生成模型的痛，因为原有的label不一定是唯一解，所以在NLP领域也出现了一些别的方法来解决生成模型多样性的问题）。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><p>Nottingham数据集，平移到12个大/小调，进行数据增强；速度调整为120bpm，所以4分音符对应0.5秒，而最小分辨率0.03125秒对应16分音符。</p><h3 id="人类评估的调查问卷"><a href="#人类评估的调查问卷" class="headerlink" title="人类评估的调查问卷"></a>人类评估的调查问卷</h3><p>评分制，只要考察：旋律与和弦的交互性，旋律复杂性，旋律结构性。</p><p>验证姐u哦采用了ANOVA方法做假设检验，以及对不同的模型做了两两的t检验。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>模型性能的确有着统计学显著的差异。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="VMO的模式发现（Pattern-Discovery）"><a href="#VMO的模式发现（Pattern-Discovery）" class="headerlink" title="VMO的模式发现（Pattern Discovery）"></a>VMO的模式发现（Pattern Discovery）</h3><p>VMO，全称Variable Markov Oracle，用于分析时间序列的音乐模式。VMO可以捕捉三种连接：前向连接（forward link）、后缀连接（suffix link）、反向后缀连接（reverse suffix link）。每个时间片段t的后缀连接是给定序列的最长后缀的起始点。</p><p>相关的论文可以看《Music Pattern Discovery with Variable Markov Oracle: A Unified Approach to Symbolic and Audio Representations》。一个典型的VMO分析图可以看下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="9.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>作者将生成的midi文件转化成了波形用于对比。采样频率44.1kHz，并且实现了short-time Frourier transform得到频谱数据。下图将频谱根据energy折成了12类音高得到的图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>频谱中前10秒是给定的开头。</p><p>作者还计算了信息率（Information Rate）得到距离阈值$\theta$。如果两个时序的距离如果小于$\theta$的话，将会被认为是同一个时间序列。所以过大或者过小的阈值都会影响到模式识别的结果。作者通过寻找最大的IR值来确定$\theta$的值，如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="11.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><h3 id="VMO"><a href="#VMO" class="headerlink" title="VMO"></a>VMO</h3><p>VMO分析能够寻找音乐的主题片段。由于VMO分析中，阈值并不完全相同，所以显示出来的结果也会略有不同。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="LSTM-1"><a href="#LSTM-1" class="headerlink" title="LSTM"></a>LSTM</h3><p>我们发现LSTM模型生成的音乐在重复生成模式方面具有很大的潜力。图10显示单向LSTM模型出现几次重复（蓝色框），而双向LSTM模型在时间范围内肯定会有更多的模式重复（红色框和黄色框表示）。由于它所拥有的短期记忆和我们处理的直接输入，LSTM模型揭示了捕获数据集中固有结构的自然和主动性。此外，我们注意到，与单向LSTM相比，双向LSTM产生的音乐对于变化的和弦更稳定且更敏感。下图显示了一个示例，其中顶部系统表示双向LSTM模型，底部系统表示单向LSTM模型。我们看到两种模型都可以在当前和弦之后生成音符片段（度量），单向模型无法作为整体进行和弦进行。对于双向LSTM，生成的音符序列趋向于更不稳定，平滑和音乐。这可能是因为生成过程包括即将到来的和弦作为全局结构限制。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="WaveNet-1"><a href="#WaveNet-1" class="headerlink" title="WaveNet"></a>WaveNet</h3><p>WaveNet能够学到一些有趣的节奏模式，下图可以看出切分被学习到了，而这个模式因为分辨率只有16分音符，所以需要长期结构才能捕捉到。这表示空洞卷积的堆叠恰好与音乐结构一致。从节奏生成的角度来看，WaveNet更适合象征域的音乐生成（对比音频），因为音频的层次结构较少。<br>但，WaveNet同时丢失了一些结构特征。所以双向WaveNet是一个很好的idea。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="14.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>结果表明，两个关键因素在很大程度上改善了模型性能：</p><ol><li>一组扩张的卷积层，它们明确地编码了旋律序列的结构依赖性。</li><li>并入chordprogress作为全局结构约束。</li></ol><p>期待作者能研究出高效可用的双向WaveNet。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;翻夏光宇老师论文列表时翻到的一篇文章，觉得里面的分析方法很有特点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="音乐生成" scheme="http://ldzhangyx.github.io/tags/%E9%9F%B3%E4%B9%90%E7%94%9F%E6%88%90/"/>
    
      <category term="WaveNet" scheme="http://ldzhangyx.github.io/tags/WaveNet/"/>
    
      <category term="VMO" scheme="http://ldzhangyx.github.io/tags/VMO/"/>
    
      <category term="deep learning" scheme="http://ldzhangyx.github.io/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>最近想读的一些论文</title>
    <link href="http://ldzhangyx.github.io/2018/12/25/recent/"/>
    <id>http://ldzhangyx.github.io/2018/12/25/recent/</id>
    <published>2018-12-25T09:36:17.000Z</published>
    <updated>2018-12-25T10:25:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>一篇很随便的随记。</p><a id="more"></a><h1 id="音乐生成"><a href="#音乐生成" class="headerlink" title="音乐生成"></a>音乐生成</h1><p>首先说一句，音乐生成这个方向我现在正在写一篇论文笔记。这篇论文不怎么出名，但是可以表明一个方向。伴随这篇论文笔记，我还会重新系统阐述一些Python与音乐生成方向的常用处理方法，比如pretty-midi，music21等这样的库，以及数据增强和预处理的一般方法套路。</p><h1 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h1><p>这个方向我的论文阅读比较自由，因为最近实习做的内容其实与NLP没有特别大的关系。</p><p>第一篇是关于图网络的综述。《Deep Learning on Graphs: A Survey》，对图网络的发展做了一个比较详细的阐述。</p><p>第二篇是《From Recognition to Cognition: Visual Commonsense Reasoning》，提出了一个常识推理数据集。相关方向我不打算深入，仅仅是去做个了解，明白常识推理在NLP各个领域的现状。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一篇很随便的随记。&lt;/p&gt;
    
    </summary>
    
      <category term="随记" scheme="http://ldzhangyx.github.io/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="心得体会" scheme="http://ldzhangyx.github.io/tags/%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>我将UESTC加入到了CSRankings的列表里</title>
    <link href="http://ldzhangyx.github.io/2018/12/18/csrankings-uestc/"/>
    <id>http://ldzhangyx.github.io/2018/12/18/csrankings-uestc/</id>
    <published>2018-12-18T05:54:38.000Z</published>
    <updated>2018-12-18T06:57:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>如同字面意思，我之前添加UESTC到CSRankings的Pull Request已经被Merge到主分支了。<a href="http://csrankings.org" target="_blank" rel="noopener">http://csrankings.org</a></p><a id="more"></a><h1 id="我为什么要这么做"><a href="#我为什么要这么做" class="headerlink" title="我为什么要这么做"></a>我为什么要这么做</h1><p>CSRankings本身就是一个非常流行的科研排名。我很高兴能在这样一个排名里做出贡献，帮助国内和国外的同行对这个行业的科研水准有更准确的认识。这包括，对中国科研整体水准的认识；对我的母校电子科大的科研水准有更高的估计。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>虽然现在CSRankings的评价基准是各大顶会的论文数量，固然因为人海因素导致院校之间的平均水准得不到有效的评估；但另一方面，这个排名又非常纯粹，并且详细到了每一个教授。这样的排名是客观的、不掺杂主观因素的清流榜单。</p><p>这个排名上，我国的很多高校都没有出现，如果想和我一样补完这个榜单的话，可以看下一节。</p><h1 id="我做了什么"><a href="#我做了什么" class="headerlink" title="我做了什么"></a>我做了什么</h1><p>首先，我找到了他们的<a href="https://github.com/emeryberger/CSrankings" target="_blank" rel="noopener">GitHub页面</a>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>然后我提交了一个pull resuest，将UESTC加入了机构名单；同时将计算机学院的大部分博导加入了名单。根据要求，这个排名里只能收录博导。</p><p>最后等待大约一周，即可被merge。这期间会有修改要求，只要按照建议修改即可。</p><h1 id="我之后会怎么做"><a href="#我之后会怎么做" class="headerlink" title="我之后会怎么做"></a>我之后会怎么做</h1><p>我写了这篇文章，希望能被更多人看到，然后意识到CSRankings的价值，以及增添PR上自己学校的动力。我之后会持续增加、补全计算机学院的教授们。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如同字面意思，我之前添加UESTC到CSRankings的Pull Request已经被Merge到主分支了。&lt;a href=&quot;http://csrankings.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://csrankings.org&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://ldzhangyx.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>使用statsmodels库做线性回归的指南</title>
    <link href="http://ldzhangyx.github.io/2018/12/18/ols/"/>
    <id>http://ldzhangyx.github.io/2018/12/18/ols/</id>
    <published>2018-12-18T03:16:59.000Z</published>
    <updated>2018-12-19T02:48:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是一个简化的实践指南。阅读完这篇文章之后，你将可以快速使用statsmodels库进行最小二乘回归。</p><a id="more"></a><h1 id="线性回归模型"><a href="#线性回归模型" class="headerlink" title="线性回归模型"></a>线性回归模型</h1><p>对于一元线性回归，其回归模型是：</p><script type="math/tex; mode=display">Y = \beta_0 + \beta_1X_1</script><p>其回归系数应为：</p><p>$\beta_0, \beta_1$</p><p>对于多元线性回归，其回归模型是：</p><script type="math/tex; mode=display">Y = \beta_0 + \beta_1X_1 + \beta_2X_2 + ... + \beta_nX_n</script><p>其回归系数应为：</p><p>$\beta_0, \beta_1, \beta_2, …, \beta_n$</p><p>其中$\beta_0$为常数项。</p><h1 id="代码实现和解释"><a href="#代码实现和解释" class="headerlink" title="代码实现和解释"></a>代码实现和解释</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">statsmodels</span>.<span class="title">regression</span>.<span class="title">linear_model</span>.<span class="title">OLS</span><span class="params">(endog, exog=None, missing=<span class="string">'none'</span>, hasconst=None, **kwargs)</span></span></span><br></pre></td></tr></table></figure><p>我们使用statsmodels的OLS类进行初始化，其重要参数是前两个。</p><p>endog —— 因变量<br>exog —— 自变量</p><p>注意如果要实现多元线性回归的话，那么其输入应该是一个这样的矩阵：</p><script type="math/tex; mode=display">  \begin{matrix}   1 & x_{11} & x_{m1} \\   ... & ... & ... \\   1 & x_{1n} & x_{mn}  \end{matrix}</script><p>这里要注意两点：</p><ol><li>OLS类默认不提供常数项，所以需要手动添加一列常数项。statsmodels提供了方便地添加常数项的方法。</li><li>每一列都是一个自变量。所以可以使用这样的方法进行拼接：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设数据以list的方法输入</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自变量</span></span><br><span class="line">x1 = list()</span><br><span class="line">x2 = list()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因变量</span></span><br><span class="line">y = list()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表转为横向量，转置成纵向量，然后拼接（concatenate）起来</span></span><br><span class="line">X = np.concatenate(np.array(x1).reshape(<span class="number">-1</span>,<span class="number">1</span>), </span><br><span class="line">                np.array(x1).reshape(<span class="number">-1</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在自变量矩阵X的最左侧一列添加一列常数1</span></span><br><span class="line">X = sm.add_constant(X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化OLS类，得到一个model对象。</span></span><br><span class="line">model = sm.OLS(y, X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用类方法，使model对象进行拟合，然后返回结果。</span></span><br><span class="line">results = model.fit()</span><br><span class="line"></span><br><span class="line">print(results.params)</span><br><span class="line"><span class="comment"># 返回值将会是这样的形式</span></span><br><span class="line"><span class="comment"># [1.04510666, 9.97239799 2.23455534]</span></span><br><span class="line"><span class="comment"># 按照顺序分别是常数项系数、x1系数，x2系数，etc.</span></span><br><span class="line"></span><br><span class="line">print(results.summary())</span><br><span class="line"><span class="comment"># 如果调用这个方法，则会返回一个详尽的表格，其中coef就是回归系数。</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/22692029" target="_blank" rel="noopener">Python Statsmodels 统计包之 OLS 回归</a></li><li><a href="http://www.statsmodels.org/stable/generated/statsmodels.regression.linear_model.OLS.html#statsmodels.regression.linear_model.OLS" target="_blank" rel="noopener">statsmodels.regression.linear_model.OLS</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是一个简化的实践指南。阅读完这篇文章之后，你将可以快速使用statsmodels库进行最小二乘回归。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://ldzhangyx.github.io/tags/Python/"/>
    
      <category term="统计" scheme="http://ldzhangyx.github.io/tags/%E7%BB%9F%E8%AE%A1/"/>
    
      <category term="statsmodels" scheme="http://ldzhangyx.github.io/tags/statsmodels/"/>
    
  </entry>
  
</feed>
