[{"title":"本站评论系统即日起升级为gitment组件","date":"2019-10-23T06:16:12.000Z","path":"2019/10/23/update-1023/","text":"本站之前的评论系统使用了valine，评论并不能被即时地阅读。升级了评论系统后，gitment将访客的评论转为issue添加到GitHub repo中，这样我可以及时收到评论提醒。 因为这样的机制，评论模块需要访客的GitHub OAuth授权。 另外，最有效和快速的联系方法是点击首页头像下的邮箱链接，向我发送邮件。技术讨论类问题会在一天内进行回复。","tags":[{"name":"others","slug":"others","permalink":"http://ldzhangyx.github.io/tags/others/"}]},{"title":"Python两个代码技巧","date":"2019-10-16T08:50:16.000Z","path":"2019/10/16/python-trick-1016/","text":"字符串格式化：F-string（v3.6+）之前版本的Python给字符串赋值会使用%和.format()两种方法。F-string提供了第三种方法。 F-string的使用例子： 12345name = 'Bob'age = 12print(f\"My name is &#123;name&#125;, and my age is &#123;age&#125;.\") 这种表达在阅读代码的时候能让人更加容易将位置和变量对应起来。 PEP 498中提到，其规范的格式应当是： 1f &apos; &lt;text&gt; &#123; &lt;expression&gt; &lt;optional !s, !r, or !a&gt; &lt;optional : format specifier&gt; &#125; &lt;text&gt; ... &apos; 赋值的表达式（Assignment Expressions， v3.8+）这是Python 3.8加入的新功能。众所周知Python的=赋值运算符不返回任何值。新增的赋值表达式运算符:=可以完成运算，同时将赋值结果返回。 这使得以下代码成为可能： 12if (result := function()) is not None: print(result) 而如果用普通的=运算符，只能以额外声明变量实现： 123result = function()if result is not None: print(result) 或重复计算表达式： 12if function() is not None:print(function()) 新的语法糖改善了此过程。 PEP 572完整阐述了这个语法糖的使用。给出的其他例子如： 12345while True: line = fp.readline() if not line: break print(line) 可以简化成： 12while (line := fp.readline()): print(line) 以及列表推导式可以从 1234results = [ f(x) for x in data if f(x)] 改进以避免重复运算，到： 1234results = [ y for x in data if (y := f(x))]","tags":[{"name":"Python","slug":"Python","permalink":"http://ldzhangyx.github.io/tags/Python/"}]},{"title":"使音乐模型更好地训练的一些技巧（2019.10.16）","date":"2019-10-16T07:17:32.000Z","path":"2019/10/16/practice-1016/","text":"PyTorch与TensorBoard的交互PyTorch最近一直在改进TensorBoard的支持，包括在最新v1.3中，也在一直改进。 最基本的使用方法是，新建一个SummaryWriter对象，之后在合适的位置进行add_scalar()记录，最后close()即可。 123456from torch.utils.tensorboard import SummaryWriterwriter = SummaryWriter()writer.add_scalar(\"valid loss\", loss, n_iter) # 三个参数代表变量，数值，横坐标writer.close() 文件会保存在代码的.run/目录里，访问localhost:6006即可进行观察。 音乐数据集的移调数据扩增1234567891011121314train_X_augment = []train_Y_augment = []for i, target in enumerate(train_Y): train_X_augment.append(pad(train_X[i], pad_size)) train_Y_augment.append(pad(train_Y[i], pad_size)) if augment_data: for direction in [-1, 1]: for shift in range(1, 12): train_X_temp = (train_X[i]).clone() train_X_temp[:] += direction * shift train_X_augment.append(pad(train_X_temp, pad_size)) train_Y_augment.append(pad(train_Y[i], pad_size))train_X = torch.stack(train_X_augment)train_Y= torch.stack(train_Y_augment) 统计模型总参数量1234params = list(model.parameters())total_params = sum(x.size()[0] * x.size()[1] if len(x.size()) &gt; 1 else x.size()[0] for x in params if x.size())print('Args:', args)print('Model total parameters:', total_params) CUDA out of memory问题模型在做evaluate的时候经常遇到CUDA out of memory的问题。常见的做法是用with torch.no_grad()方法将对应的代码块包起来，使模型不存储梯度。 注意，model.eval()代码执行的仅为dropout层和batchnorm层固定的功能，并不能达到torch.no_grad()这样的效果。","tags":[{"name":"music generation","slug":"music-generation","permalink":"http://ldzhangyx.github.io/tags/music-generation/"},{"name":"心得体会","slug":"心得体会","permalink":"http://ldzhangyx.github.io/tags/心得体会/"},{"name":"PyTorch","slug":"PyTorch","permalink":"http://ldzhangyx.github.io/tags/PyTorch/"}]},{"title":"音乐相关会议的deadline一览","date":"2019-09-12T15:05:35.000Z","path":"2019/09/12/music-conference-deadline/","text":"网站运营的简要介绍。 之前看到aideadlin.es对AI各个领域会议做了一个汇总。音乐领域没有专门的网站做汇集，于是我fork过来重新整理发布了一个网站，挂载在我特意注册的小号上。 网址是：yixiao-music.github.io，直接点这个网页的侧栏tab也可以直接进去。 网页更新采用ISMIR社区的回复更新：https://groups.google.com/a/ismir.net/forum/#!topic/community/8CnJfljcx0E 我计划手动根据回复对这个网站进行数据更新，以避免我的GitHub小号因不常登陆而收不到PR的情况。","tags":[{"name":"music generation","slug":"music-generation","permalink":"http://ldzhangyx.github.io/tags/music-generation/"},{"name":"MIR","slug":"MIR","permalink":"http://ldzhangyx.github.io/tags/MIR/"},{"name":"community","slug":"community","permalink":"http://ldzhangyx.github.io/tags/community/"}]},{"title":"PyTorch中，LSTM的两种不同形式","date":"2019-09-11T10:20:56.000Z","path":"2019/09/11/lstm/","text":"最近在LSTM这一块有点扯不清，现在回想一下发现自己将两种LSTM记混了。 LSTM(input与label无关)第一种是这样的： t时刻的input x与t-1时刻的label y没有关系，完成的是一个序列到另一个序列的转换。 Neural Language Models通过input和output的错位，用一行LSTM完成操作。 PyTorch中，直接 LSTM（input与label有关）LSTM被广泛地用于构造Encoder-Decoder模型。Encoder部分没什么问题，但是Decoder部分与上面提到的结构不同，因为Decoder的过程是一步步解码的过程，是将t-1时刻应有的输出，传递给t时刻的cell。这意味着在编码的时候不能一步到位。 TensorFlow的解决方案是包装了一个decoder。 在训练的时候，PyTorch的官方文档框架（https://pytorch.org/tutorials/intermediate/seq2seq_translation_tutorial.html）是这样的： 12345678910111213141516171819if use_teacher_forcing: # Teacher forcing: Feed the target as the next input for di in range(target_length): decoder_output, decoder_hidden, decoder_attention = decoder( decoder_input, decoder_hidden, encoder_outputs) loss += criterion(decoder_output, target_tensor[di]) decoder_input = target_tensor[di] # Teacher forcingelse: # Without teacher forcing: use its own predictions as the next input for di in range(target_length): decoder_output, decoder_hidden, decoder_attention = decoder( decoder_input, decoder_hidden, encoder_outputs) topv, topi = decoder_output.topk(1) decoder_input = topi.squeeze().detach() # detach from history as input loss += criterion(decoder_output, target_tensor[di]) if decoder_input.item() == EOS_token: break 可以看到Decoder是通过for循环进行逐步解码的。这和上面那类LSTM模型的运作规律不一致。","tags":[{"name":"PyTorch","slug":"PyTorch","permalink":"http://ldzhangyx.github.io/tags/PyTorch/"},{"name":"基础","slug":"基础","permalink":"http://ldzhangyx.github.io/tags/基础/"},{"name":"坑","slug":"坑","permalink":"http://ldzhangyx.github.io/tags/坑/"}]},{"title":"诗歌生成模型“九歌”：《Stylistic Chinese Poetry Generation via Unsupervised Style Disentanglement》论文笔记","date":"2019-08-10T07:22:58.000Z","path":"2019/08/10/jiuge/","text":"清华孙茂松老师组的工作，从效果来看，“九歌”的效果相当不错。适逢最近这个模型开源，我希望能梳理一下和这个模型有关的论文，尤其是《Stylistic Chinese Poetry Generation via Unsupervised Style Disentanglement》的工作（发表在EMNLP 2018）。 关于模型开源的相关信息今年7月，九歌模型开源。其诗歌生成的模型在这个链接里：https://github.com/THUNLP-AIPoet/StylisticPoetry 同时，他们组也放出了相关领域的论文列表：https://github.com/THUNLP-AIPoet/PaperList 以及诗歌生成的相关数据集：https://github.com/THUNLP-AIPoet/Datasets 有兴趣的话可以深入了解。 相关论文梳理《Stylistic Chinese Poetry Generation via Unsupervised Style Disentanglement》这篇论文在发表之后，被相关的后续论文引用。 Sentiment-Controllable Chinese Poetry Generation Rhetorically Controlled Encoder-Decoder for Modern Chinese Poetry Generation Jiuge: A Human-Machine Collaborative Chinese Classical Poetry Generation System GPT-based Generation for Classical Chinese Poetry（华为诺亚方舟实验室） 论文Introduction论文的目标在于无监督生成风格诗歌。之前的诗歌生成更注重于一致性、连续性。本文更关注于同一输入下生成不同风格的诗歌。 同一意象下，人们可以以不同的风格写出不同的诗歌： 诗歌并没有明确的风格label。本文使用了无监督的方法生成不同风格的诗词。 论文中，我们提出了一个模型，可以从诗歌中解耦出不同的风格，并在给定人工风格输入后生成特定风格的诗歌。模型总体是seq2seq的，同时通过最大化衡量两个随机变量之间依赖的互信息，以强化人工风格输入和生成的特定风格输出的关系。 实验结果表明模型可以生成不同风格的诗歌而不丢失一致性和连贯性。 Method模型输入：$s_\\text{input}$和风格id，$k \\in K$，K为风格总数。 互信息(Mutual Information)互信息常被用于无监督生成模型。当我们遇到存在潜在的类别差别而没有标签数据，我们就需要一类能够无监督地辨别出这类潜在标签的数据。互信息在生成模型中被人们注意，最早应该是InfoGAN的提出。 给定两个随机变量$X$，$Y$，可以将两个随机变量的互信息记为$I(X, Y)$。互信息表示在一个随机变量中包含另一个随机变量的信息的数量。也可以理解为两个变量的相关性。 互信息可以表示为联合概率$P(X,Y)$与边缘概率的$P(X)P(Y)$的相关性： I(X, Y)=\\int_{Y} \\int_{X} p(X, Y) \\log \\frac{p(X, Y)}{p(X) p(Y)} d X d Y风格解耦的Decoder模型定义输入句子$X$，输出句子$Y$，字典为$V$，时间步为$T$。 模型如图： 将Encoder最后一步的hidden state与风格的one-hot向量concatenate起来，送Decoder。 我们无法从理论上证明，Decoder的output能与风格K正确地对应起来。output很可能会忽略掉风格输入，使得输出不受风格影响。因此我们显式添加一个约束，强制风格K与output有强烈的依赖关系。 假定K的id分布k是一个均匀分布的随机向量，就是这样： P_r(\\text{sty} = k) = \\frac{1}{k}, \\text{for }k= 1,2,...,K目标转化为：最大化风格分布$P_r(\\text{sty})$与输出分布$P_r(Y;X)$之间的互信息。 互信息这么计算： \\begin{aligned} & I(\\operatorname{Pr}(\\text {Sty}), \\operatorname{Pr}(Y ; X)) \\\\=& \\sum_{k=1}^{K} \\operatorname{Pr}(\\text {Sty}=k) \\int_{Y | k ; X} \\log \\frac{\\operatorname{Pr}(Y, S t y=k ; X)}{\\operatorname{Pr}(\\text {Sty}=k) \\operatorname{Pr}(Y ; X)} d Y \\\\=& \\sum_{k=1}^{K} \\operatorname{Pr}(\\text {Sty}=k) \\int_{Y | k ; X} \\log \\frac{\\operatorname{Pr}(Y, S t y=k ; X)}{\\operatorname{Pr}(Y ; X)} d Y \\\\ &-\\sum_{k=1}^{K} \\operatorname{Pr}(\\text {Sty}=k) \\log \\operatorname{Pr}(\\text {Sty}=k)\\\\ =& \\sum_{k=1}^{K} \\operatorname{Pr}(\\text {Sty}=k) \\int_{Y | k ; X} \\log \\operatorname{Pr}(\\text {Sty}=k | Y) d Y+\\log K \\\\ =&\\int_{Y ; X} \\sum_{k=1}^{K} \\operatorname{Pr}(\\text {Sty}=k | Y) \\log P(\\text {Sty}=k | Y) d Y+\\log K\\end{aligned}因为输入变量$\\text{sty}$与$X$相互独立，所以 \\operatorname{Pr}(S t y=k | Y ; X)=\\operatorname{Pr}(S t y=k | Y)由于后验分布$\\operatorname{Pr}(S t y=k | Y)$是未知的，我们无法对它计算积分。于是我们使用变分推理最大化的方式，训练一个参数化的函数$Q(\\text{Sty}=k|Y)$，这个函数估计了后验分布，最大化方程互信息的下界： \\begin{aligned} & I(\\operatorname{Pr}(S t y), \\operatorname{Pr}(Y ; X))-\\log K \\\\=& \\int_{Y ; X} \\sum_{k=1}^{K} \\operatorname{Pr}(S t y=k | Y) \\log \\operatorname{Pr}(S t y=k | Y) d Y \\\\=& \\int_{Y ; X} \\sum_{k=1}^{K} \\operatorname{Pr}(S t y=k | Y) \\log Q(S t y=k | Y) d Y \\\\ &+\\int_{Y ; X} \\sum_{k=1}^{K} \\operatorname{Pr}(S t y=k | Y) \\log \\frac{\\operatorname{Pr}(S t y=k | Y)}{Q(S t y=k | Y)} d Y \\\\ =& \\int_{Y ; X} \\sum_{k=1}^{K} \\operatorname{Pr}(S t y=k | Y) \\log Q(S t y=k | Y) d Y \\\\ &+\\int_{Y ; X} K L(\\operatorname{Pr}(S t y | Y), Q(\\operatorname{Sty} | Y)) d Y \\\\ \\geq & \\int_{Y ; X} \\sum_{k=1}^{K} \\operatorname{Pr}(S t y=k | Y) \\log Q(S t y=k | Y) d Y \\\\=& \\sum_{k=1}^{K} \\operatorname{Pr}(S t y=k) \\int_{Y | k ; X} \\log Q(S t y=k | Y) d Y \\end{aligned}我们知道KL散度一定是非负的，故上式的不等式一定成立。 因此我们只需要设计一个参数化的函数Q，使得Q被模型最大化，那么目的就达到了。 后验分布估计给定输出序列$Y$，函数$Q$估计序列$Y$的风格的概率分布。直接计算序列$Y$的平均embedding，用矩阵$W$映射为一个值： Q(S t y | Y)=\\operatorname{softmax}\\left(W \\cdot \\frac{1}{T} \\sum_{i=1}^{T} e\\left(y_{i}\\right)\\right)最后要做的是计算$Q$在$Y|k;X$上的积分，然而序列$Y$的搜索空间是字典长度的指数，因此采用枚举的方式计算积分。如果我们采样部分Y，这个结果是不可微的。这里我们使用embedding的期望进行积分的近似。 期望的词向量embedding之前的相关工作是《Semantic parsing with semi-supervised sequential autoencoders》。即，只生成一个期望embedding序列，$Y|k;X$，拥有100%的生成概率。下式表达第i词的分布： p\\left(y_{i} | y_{1}, y_{2}, \\ldots y_{i-1}, X\\right)=g\\left(y_{i}, s_{i}\\right)所以第i词的期望就是： \\operatorname{expect}(i ; k, X)=\\sum_{c \\in V} g\\left(c | s_{i}\\right) e(c)之后将其喂给下一步的输出： s_{i+1}=L S T M_{d e c o d e r}\\left(s_{i},\\left[e x p e c t(i ; k, X), a_{i+1}\\right]\\right)然后使用这些期望向量近似$Y|k;X$的概率分布。 所以，上面推导出来的 Q(S t y | Y)=\\operatorname{softmax}\\left(W \\cdot \\frac{1}{T} \\sum_{i=1}^{T} e\\left(y_{i}\\right)\\right)可以被重写为： \\mathcal{L}_{r e g}=\\frac{1}{K} \\sum_{k=1}^{K} \\log \\left\\{\\operatorname{softmax}\\left(W * \\frac{1}{T} \\sum_{i=1}^{T} \\operatorname{expect}(i ; k, X)\\right)[k]\\right\\}k代表第k个风格。所以上面一直推导的的积分公式就可以表达为上式。 于是上面那个公式就可以作为正则项加入训练过程，作为一个额外的loss： \\operatorname{Train}(X, Y)=\\sum_{i=1}^{T} \\log p\\left(y_{i} | y_{1} y_{2} \\ldots y_{i-1}, X\\right)+\\lambda \\mathcal{L}_{\\text { reg }}loss的前半部分与风格没有什么关系，保证生成的效果，公式中的X置零；而后半部分保证了结果的风格相关。 Experiment主要通过人工评估。 数据集与模型细节16.8W首古诗，一半五言，一半七言。8:1:1划分。将连续的两个句子作为训练对$(X,Y)$。 embedding和Encoder的hidden size为512，风格K=10，所以Decoder的hidden state维度为1034维。 batch size=50，前5W个batch中$\\lambda=0$，之后设为1. Baselines Seq2seq，主要用于对比风格模块的提升。 Polish(Yan, 2016)，特点是多次修改生成的句子。 Memory(Zhang et al., 2017)，将memory融入到诗歌生成，可以被视为一个正则化行为。 不考虑rule-based或模板模型。 评估将第一句话作为评估，依次生成后续三个句子。由于模型需要指定风格，于是我们使用上文的函数Q来估计第一句的风格，在后面三句中套用同样的风格。 流畅性 一致性 意义性 诗歌性 上述四个指标被纳入考虑。 分别生成了20首五言和20首七言，作为评估。邀请了10个中国文学专家，做了两组实验。第一组对比seq2seq，第二组对比别的先进模型。 实验结果 seq2seq生成的是混合风格的模型，更可能产生无意义的诗歌。风格作为统一信息，为一致性提供了帮助，并且缩小了空间，因此在风格内部能学习得更加准确、紧凑。 习得风格的可解释性10种风格的关键词如下： 首先输入每种风格各生成5首诗，再由人类专家进行分类。由于是无监督生成的，故模型很可能不会严格对齐人类的风格标注。 可以看见，人类可以以更高的概率成功识别出很多风格。观察结果表明，模型的学习风格只有两三个关键词有意义、可识别。除此之外，生成的诗歌需要是多样的，否则他们不能被区分开。 实例","tags":[{"name":"诗歌生成","slug":"诗歌生成","permalink":"http://ldzhangyx.github.io/tags/诗歌生成/"},{"name":"generation","slug":"generation","permalink":"http://ldzhangyx.github.io/tags/generation/"},{"name":"poem generation","slug":"poem-generation","permalink":"http://ldzhangyx.github.io/tags/poem-generation/"},{"name":"distanglement","slug":"distanglement","permalink":"http://ldzhangyx.github.io/tags/distanglement/"}]},{"title":"如何评估树结构的相似性？也许可以了解一下Tree Editing Distance","date":"2019-08-07T09:03:45.000Z","path":"2019/08/07/tree-evaluation/","text":"这是一篇关于树编辑距离相关算法和相关包的介绍。 如何衡量两个树结构之间有多相似？这个领域有很多相关研究。在这里介绍一个可能的算法：Tree Editing Distance。 这个词被翻译为树编辑距离。形象地理解，就是从一棵树通过编辑，变为另一棵树的复杂程度。 树编辑距离的形式化形式化地来说，有序标记树之间的树编辑距离，是奖一棵树转换为另一棵树的节点操作的最小成本序列。定义下面三种编辑： 删除节点，将其子节点连接到父节点上，以保持有序。 在一个已知的节点，和这个节点的连续子节点的子序列之间插入一个节点。 更改这个节点的label。 每编辑一次需要花费一点成本，而问题的目标是找到一个操作序列，使得总成本最小。 现有算法Queen’s University有一份slides，专门用于讲述一些比较早期的算法：http://research.cs.queensu.ca/TechReports/Reports/1995-372.pdf 这个问题可以被递归地解决，然而其具有指数级的复杂度。Zhang and Shasha（1989年）将这个问题的复杂度降低到了$O(m^2n^2)$级别，而最新的算法（Demaine et al.）将算法的时间复杂度降低到了$O(n^2m(1+\\log \\frac{m}{n}))$级别。 具体的论文亮点可以参考这个网址：http://tree-edit-distance.dbresearch.uni-salzburg.at/#bibliography 可以使用的包GitHub上有人复现了Zhang and Shasha的算法，并且可以直接通过pip方式安装，import调用： https://github.com/timtadh/zhang-shasha 奥地利萨尔茨堡大学公开了一个Java程序，用于实现RTED等复杂度更低的算法：http://tree-edit-distance.dbresearch.uni-salzburg.at","tags":[{"name":"structure","slug":"structure","permalink":"http://ldzhangyx.github.io/tags/structure/"},{"name":"algorithm","slug":"algorithm","permalink":"http://ldzhangyx.github.io/tags/algorithm/"}]},{"title":"PyTorch使用的日常（2019.8.5）","date":"2019-08-05T08:23:48.000Z","path":"2019/08/05/pytorch-0801/","text":"nn.Embedding我一直对nn.Embedding层感到困惑。它在训练中有没有改变过呢？ 查询StackOverflow，我得到了一个答案： 我可以随机初始化一个词向量，也可以导入一个预训练的词向量； 我可以选择是否让它参与训练（默认参与了训练）。 如果要固定某几层不进行训练，需要做两件事： 层数的requires_grad参数设为False； 传给optimizer的parameters需要手动过滤。 1optimizer.SGD(filter(lambda p: p.requires_grad, model.parameters()), lr=1e-3) CUDA out of memory遇到了一次这样的情况。考虑optimizer产生的大量中间结果，使得显存爆炸。 解决方案： 12with torch.no_grad(): .... 将validation代码放在里面，减少显存占用。实际起到的效果和model.eval()是一样的。 Learning Rate Scheduler学习率衰减（weight decay）被证明与参数的二阶范数正则化等价。PyTorch使用lr_scheduler进行学习率衰减操作。下面是一类 12optimizer = optim.Adam(model.parameters(), lr=0.0005)scheduler = ExponentialLR(optimizer, gamma=0.95, minimum=1e-5) 在训练的时候这样调整学习率： 1scheduler.step() 将这行代码插入你认为应该调整的地方。下面是一种常见做法： 12345678...optimizer.zero_grad()output = model(input)loss = loss(output, label)loss.backward()optimizer.step()schedule.step()...","tags":[]},{"title":"《Regularizing and Optimizing LSTM Language Models》论文笔记","date":"2019-07-31T13:43:44.000Z","path":"2019/07/31/awd-lstm/","text":"人称“语言建模的王者”，AWD-LSTM模型。 原文地址：https://openreview.net/references/pdf?id=rJI9awpBf 论文亮点摘要本文为了解决词级别的语言建模问题，研究了正则化、优化LSTM类模型的策略。本文提出了weighted-dropped LSTM，在hidden to hidden weights上使用了DropConnect，作为循环正则化的形式；此外引入了NT-AvSGD，是平均随机梯度方法的非单调触发变体，使用NT条件自动确定平均触发。 使用这些和其他正则化策略，AWD-LSTM在PTB和WikiTest-2上达到了最优ppl。模型可用于Q-RNN（Quasi-RNN，和SRU目的一致，都是对RNN进行了并行化改进）。 Weight-Dropped LSTM首先给出LSTM的公式： \\begin{aligned} i_{t} &=\\sigma\\left(W^{i} x_{t}+U^{i} h_{t-1}\\right) \\\\ f_{t} &=\\sigma\\left(W^{f} x_{t}+U^{f} h_{t-1}\\right) \\\\ o_{t} &=\\sigma\\left(W^{o} x_{t}+U^{o} h_{t-1}\\right) \\\\ \\tilde{c}_{t} &=\\tanh \\left(W^{c} x_{t}+U^{c} h_{t-1}\\right) \\\\ c_{t} &=i_{t} \\odot \\tilde{c}_{t}+f_{t} \\odot+\\tilde{c}_{t-1} \\\\ h_{t} &=o_{t} \\odot \\tanh \\left(c_{t}\\right) \\end{aligned}正则化技术用于防止RNN过度拟合。之前的递归正则化对$h_{t-1}$或$c_{t}$起作用，阻止了黑盒RNN的实现。 建议使用DropConnect。DropConnect应用于隐藏状态之间的权重矩阵(Ui, Uf, Uo, Uc)，而不是隐藏状态或记忆状态。这一丢弃操作只在前向和反向传播前进行一次，从而最小化对训练速度的影响，并且适用于任何标准的黑盒RNN优化实现。通过丢弃隐藏状态之间的权重矩阵的部分信息，可以防止LSTM循环连接的过拟合。 NT-ASGD在语言建模过程中，不带动量的SGD的表现比其他优化方法更好。 我们调查AvSGD进一步改善训练过程。AvSGD展示了许多惊讶的结果，比如说而渐近二阶收敛。普通SGD更新公式如下： w_{k+1}=w_{k}-\\gamma_{k} \\hat{\\nabla} f\\left(w_{k}\\right)但AvSGD不使用最后一步的迭代作为解，而是使用 \\frac{1}{(K-T+1)} \\sum_{i=T}^{K} w_{i}其中K是迭代总数，T是用户指定的平均计算触发器。 ASGD的缺点在于，学习率$\\ita_k$和T的调参没有明确的方法论。 理想情况下，SGD收敛到稳态分布时，需要触发平均。语言建模使用的一种常见策略是指标停滞时降低学习率，而触发也可以参照这种方法。 NT-ASGD的作法是， 仅当验证测度在多次循环后没有改善的情况下才触发平均。所以，当验证测度在n次循环（n称为非单调间隔超参数）后没有改善时，算法换用ASGD。论文作者发现n=5这一设置效果良好。 使用恒定学习率，因此无需进一步调整。 其他正则化策略变长BPTT论文作者指出了固定长度BPTT的低效。假设我们在100个元素上进行长度为10的固定窗口的BPTT。在这一情形下，任何可以被10整除的元素将没有任何元素可以反向传播。固定长度BPTT阻止了1/10的数据以循环的方式改善自身，还有8/10的数据仅仅使用部分BPTT窗口。 变长BPTT首先选择一个基本序列长度。人工制定一个BPTT，然后基本BPTT长度有p的概率选择BPTT，也有1-p的概率选择BPTT/2。 然后通过基本BPTT长度计算得到sequence length： \\text{sequence length} = \\max(5, l \\in N(bptt, \\sigma))l从正态分布中取样得到结果。这一步是必要的，因为取样任意序列长度的情况下， 使用固定学习率将倾向于短序列。 变分Dropout在标准dropout中，每次调用dropout时取样一个新的dropout掩码。而在变分dropout中，dropout掩码只在第一次调用时取样，接着锁定的dropout掩码重复应用于前向和反向过程中的所有连接。 尽管RNN的隐藏到隐藏转换中使用了DropConnect，但其他所有dropout操作中使用了变分dropout，特别是在给定的前向和反向传播中，LSTM的所有输入和输出使用同样的dropout掩码。mini-batch内的每个样本使用不同的dropout掩码，而不是在所有样本上使用同一个掩码，以确保元素丢弃的多样性。 嵌入Dropout实际上就是在Embedding Matrix上使用dropout，使得该字在完整的前向、反向传播上都消失了。该技术最早由A Theoretically Grounded Application of Dropout in Recurrent Neural Networks这篇论文提出。 权重绑定权重绑定在embedding和softmax layer上共享了权重，减少了模型中的总参数。该技术具有理论动机（Inan等，2016），并防止模型必须学习输入和输出之间的一对一对应，从而对标准LSTM语言模型进行实质性改进。 独立embedding size和hidden size在大多数自然语言处理任务中，预训练和训练的单词矢量都具有相对较低的维度 - 通常在100到400维之间。大多数先前的LSTM语言模型将单词向量的维度与LSTM的隐藏状态的维度联系起来。即使减少单词嵌入大小对防止过度拟合也没有好处，语言模型的总参数的最简单减少是减少单词向量大小。 为了实现这一点，修改第一个和最后一个LSTM层，使得它们的输入和输出维度分别等于减小的嵌入大小。 激活正则化和时域激活正则化L2正则化除用于网络参数上，还可以用在独立单元的激活上，和不同时间步里，RNN的输出上。 激活正则化惩罚显著过大的激活： \\alpha L_{2}\\left(m \\odot h_{t}\\right)时域激活正则化，惩罚过大的hidden state波动： \\beta L_{2}\\left(h_{t}-h_{t+1}\\right)实验细节在PTB和WikiText-2上实验。PTB的词汇量约1W单词，导致大量词汇OOV。WT2的词汇量超过3W。 LSTM隐单元为三层，1150神经元，Embedding size为400.loss被examples和timesteps平均。embedding被均匀初始化在[-0.1, 0.1]之间，其他权重在$[-\\frac{1}{\\sqrt{H}}, \\frac{1}{\\sqrt{H}}]$之间，H为hidden size。 NT-AvSGD算法训练750 epoches，L相当于1 epoch，n=5. batch size为80（WT2）和40（PTB）。经验表明batch size较大时表现更好。完成后，运行AvSGD，T=0，热启动w0作为finetuning step以进一步改进解。对于这个finetuning步骤，使用算法1的相同的标准终止执行。 最大范数为0.25的梯度裁剪，初始学习率为30，随机BPTT长度设置为N(70, 5)，p=0.95和N(35, 5)，p=0.05. 用于word vector的dropout、LSTM层间输出，LSTM最上层输出，embedding dropout分别为(0.4, 0.3, 0.4, 0.1)。对WD-LSTM，dropour=0.5用在rurrent weight matrices，而WT2上值增加到0.65，考虑到增加到词汇量。 对于所以实验，分别使用2和1的AR和TAR值，并将embedding和softmax权重联系起来。所有超参数通过反复实验选择。 指针模型在过去的工作中，已经证明基于指针的注意力模型在改进语言建模方面非常有效（Merity等，2016; Grave等，2016）。鉴于对基础神经语言模型的这种实质性改进，关于指针增强的有效性仍然是一个悬而未决的问题，特别是当重量绑定等改进可能以相互排斥的方式起作用时。 可以以可忽略的成本在预训练的语言模型之上添加神经缓存模型（Grave等，2016）。神经缓存将先前隐藏状态存储在存储器单元中，然后使用由缓存建议的概率分布和用于预测的语言模型的简单凸组合。缓存模型有三个超参数：缓存的内存大小（窗口），组合的系数（确定两个分布如何混合），以及缓存分布的平坦度。一旦获得训练有素的语言模型，所有这些都在验证集上进行调整，并且不需要自己进行培训，使得使用起来非常便宜。这些超参数的调整值分别为PTB（2000,0.1,1.0）和WT2（3785,0.1279,0.662）。 在表1和表2中，我们表明该模型进一步改善了语言模型的困惑，PTB的6个困惑点和WT2的11个点。虽然这比Grave等报道的增益要小。（2016），使用LSTM没有重量绑定，这仍然是一个实质性的下降。鉴于神经缓存模型的简单性以及缺乏任何受过训练的组件，这些结果表明现有的神经语言模型基本上缺乏，无法捕获长期依赖关系或有效记住最近看到的单词。为了理解指针对模型的影响，特别是验证集的困惑，我们详细说明了每个单词对表3中缓存模型的整体困惑的贡献。我们计算WikiText-2数据集的验证部分中的目标字的LSTM和LSTM与缓存模型之间的损失函数值（即，对数困扰）的总差异的总和。我们提出差异总和的结果而不是均值，因为后者不合适地过分强调了不经常出现的单词，其中高速缓存有助于显着地忽略频繁出现的单词，其中高速缓存提供适度的改进，累积地做出强有力的贡献。最大累积增益在提高的令牌的处理，虽然这是超过11540个的情况。第二个最好的改进，大约五分之一由令牌给定的增益，为经，然而，这仅字发生161次。这表明缓存对于相对罕见的单词仍然有显着帮助，丘吉尔，布莱斯或索尼克进一步证明了这一点。当处理频繁的单词类别（例如标点符号或停用单词）时，缓存不是有益的，语言模型很可能适合这些单词类别。这些观察结果激发了缓存框架的设计，该框架更加了解两个模型的相对优势。 AWD-QRNN概括一下就是模型也适合Q-RNN。 模型消融分析 详见原论文。 最明显的困惑度提升来自LSTM hidden to hidden的lSTM正则化，也就是DropConnect。 代码与训练速度https://github.com/salesforce/awd-lstm-lm 代码在上述网址开源，记载了更加详细的实验结果。readme里特意提及了速度的问题。NVIDIA Quadro GP100的速度在PTB上大约是65秒一个epoch。考虑到我们将会使用的HookTheory，这个速度相比WT2的速度更具有参考价值。作者体积K80的速度大约是1/3，而我做实验可以用到一块1080Ti(for each task)。根据NVIDIA提供的compute Capability数值来看： Tesla K80：3.7 Tesla V100：7.0 Tesla P100：6.0 Quadro GP100：6.0 GTX 1080Ti：6.1 Jetson Nano：5.3 猜想在词级语言建模任务上，我达到45秒每epoch的速度是正常的。另外这个计算力表其实和我的认知差别有点大。K80这么弱的吗？值得一提的是Jetson Nano，达到5.3的分数意味着可以一用了。过段时间我会调研一下树莓派4和Jetson Nano。 想法和见解还能说什么呢，一年被引用200+次，只能说大佬牛逼，工作量和模型质量都是一流的。","tags":[{"name":"AWD-LSTM","slug":"AWD-LSTM","permalink":"http://ldzhangyx.github.io/tags/AWD-LSTM/"},{"name":"language model","slug":"language-model","permalink":"http://ldzhangyx.github.io/tags/language-model/"}]},{"title":"简洁明快的命令行解析器argparse简明指南","date":"2019-07-30T04:22:23.000Z","path":"2019/07/30/argparse/","text":"为了避免Python代码在需要设置的情况下进行hard code，我们有很多种方式将参数指定在一个地方，便于集中、解耦地修改参数。可以使用的解决办法很多，如设立config类，全局变量指明，以及使用argparse。 本文是argparse的简明指南，指明了argparse模块的快速上手方法。 指南argparse应该放在文件的什么地方？argparse可以放在main.py文件的最上方，仅在import语句块下。 argparse分为几个步骤？四个步骤。 第一步，import argparse。 1import argparse 第二步，定义parser。 1parser = argparse.ArgumentParser(description=&apos;Process some integers.&apos;) 第三步，增加参数。 12345parser.add_argument(&apos;integers&apos;, metavar=&apos;N&apos;, type=int, nargs=&apos;+&apos;, help=&apos;an integer for the accumulator&apos;)parser.add_argument(&apos;--sum&apos;, dest=&apos;accumulate&apos;, action=&apos;store_const&apos;, const=sum, default=max, help=&apos;sum the integers (default: find the max)&apos;) 第四步，解析参数并实例化。 1args = parser.parse_args() 在调用main.py时，在后面增添命令行参数，或以default值的方式指定参数。后面的参数值可以以args变量的各个attribute直接使用，如： 1args.sum add_augment接收几种参数？ name or flags - 一个命名或者一个选项字符串的列表，例如 foo 或 -f, —foo。action - 当参数在命令行中出现时使用的动作基本类型。nargs - 命令行参数应当消耗的数目。const - 被一些 action 和 nargs 选择所需求的常数。default - 当参数未在命令行中出现时使用的值。type - 命令行参数应当被转换成的类型。choices - 可用的参数的容器。required - 此命令行选项是否可省略 （仅选项可用）。help - 一个此选项作用的简单描述。metavar - 在使用方法消息中使用的参数值示例。dest - 被添加到 parse_args() 所返回对象上的属性名。 name or flags这几乎是必须的。add_augment后需要为参数命名。一般来说，使用--name字段即可。这样调用时写--name=xxx进行参数指定。 action默认action是store，代表存储参数的值。 nargs关联剁个参数到一个arguments里。N代表之后N个参数会形成一个列表。+代表片段内所有参数被聚集到列表（直到下一个参数）。 default指定默认值。最常用。 type指定参数类型，指定为str或int最常用。 help填写参数的提示。 参数实例如下： 123456parser.add_argument(&apos;--model&apos;, type=str, default=&apos;LSTM&apos;, help=&apos;type of recurrent net (LSTM, QRNN, GRU)&apos;)parser.add_argument(&apos;--emsize&apos;, type=int, default=100, help=&apos;size of word embeddings&apos;)parser.add_argument(&apos;--when&apos;, nargs=&quot;+&quot;, type=int, default=[-1], help=&apos;When (which epochs) to divide the learning rate by 10 - accepts multiple&apos;)","tags":[{"name":"argparse","slug":"argparse","permalink":"http://ldzhangyx.github.io/tags/argparse/"},{"name":"python","slug":"python","permalink":"http://ldzhangyx.github.io/tags/python/"},{"name":"tutorial","slug":"tutorial","permalink":"http://ldzhangyx.github.io/tags/tutorial/"}]},{"title":"MobaXTerm简明指南","date":"2019-07-29T09:24:38.000Z","path":"2019/07/29/mobaxterm-tutorial/","text":"这个简明指南旨在介绍MobaXTerm，Windows下的一个现代SSH客户端。 首先下载MobaXTerm的对应版本。网址如下：https://mobaxterm.mobatek.net/download.html 左上角点击Session，新建一个SSH连接。 配置完成。 这篇文章主要想说明MobaXTerm一些优点： 可以检测服务器运行情况。Remote Monitoring开启后，服务器的运行情况可以被实时地监控。 自带一个SFTP协议的可视化文件树，并且支持拖动上传下载文件。 附带了一个文本编辑器，是vi的良好替代。","tags":[{"name":"tutorial","slug":"tutorial","permalink":"http://ldzhangyx.github.io/tags/tutorial/"},{"name":"software","slug":"software","permalink":"http://ldzhangyx.github.io/tags/software/"}]},{"title":"Coding on Server! PyCharm远程调试、文件同步、GitHub版本控制简明指南","date":"2019-07-29T09:22:55.000Z","path":"2019/07/29/ssh-for-pycharm/","text":"这个指南适用于想在PyCharm上debug，同时使用远程服务器上的解释器运行代码的人。 使用PyCharm本地编辑代码，调用远程服务器的Python解释器。这个方案支持PyCharm单步调试等操作。 新建或打开你想运行的项目。 Tools -&gt; Deployment -&gt; Configuration，打开界面。 在界面中配置对服务器的连接。 在Mappings里面设置文件映射，映射到服务器的对应目录。 注意，对应的目录是步骤3的root path + Mappings的Deployment path。 点击左边侧栏的√，使得服务器名字变为粗体。这代表你启用了这个Deployment。 Tools -&gt; Deployment -&gt; Settings，将文件同步设置，更改为仅在ctrl+S时保存。至此，所有的本地代码文件都会被同步到服务器上。 File -&gt; Settings -&gt; Project -&gt; Project Interpreter，打开界面，右上角选择小齿轮， Add，选择服务器上的python.exe应用程序，链接到远程解释器。 此时不需要特意设置path mappings，因为会沿用Deployment的mapping。 我们开始版本控制。VCS -&gt; Import into Version Control -&gt; Share project on GitHub。 此时你的每一次保存会被视为一次commit。 配置完毕。 以下是你可能遇到的问题： File Transfer失败。可以检查一下mapping地址是否正确。 Error:Python helpers are not copied yet to the remote host. Please wait until remote interpreter initialization finishes. 如果你的服务器名称是字符串，推荐改用IP地址；如果无效，请删除服务器上的.pycharm_helper文件夹，等待重新建立index。 以下是一些附带的常用操作。 PyCharm在debug的时候，可以在右下角的Console Tab点击Python图标，进入交互式Python，你可以在断点debug时运行各种表达式。","tags":[{"name":"python","slug":"python","permalink":"http://ldzhangyx.github.io/tags/python/"},{"name":"tutorial","slug":"tutorial","permalink":"http://ldzhangyx.github.io/tags/tutorial/"},{"name":"software","slug":"software","permalink":"http://ldzhangyx.github.io/tags/software/"},{"name":"PyCharm","slug":"PyCharm","permalink":"http://ldzhangyx.github.io/tags/PyCharm/"},{"name":"SSH","slug":"SSH","permalink":"http://ldzhangyx.github.io/tags/SSH/"}]},{"title":"《Deep Music Analogy via Latent Representation Distanglement》论文笔记","date":"2019-07-29T06:30:57.000Z","path":"2019/07/29/ec2vae/","text":"组里大佬们的工作。 论文笔记Abstract类比制作（Analogy-making）是使用计算机算法生成自然而有创造力的音乐作品的关键方法。通常来说，将音乐的抽象形式（如，高层表示及这些表示之间的关系）做部分地转移，可以达成类比的目的。 这个过程要求对音乐表示做解耦（如，保留风格，创作内容不一样的曲子）。对于人类音乐家来说，是轻而易举的事情，但是这对计算机来说却是一个难题。要完成这个目标，我们有三个步骤： 从观察（observation）中提取潜在的表示（latent representations）； 对表示进行解耦，使得解耦后每一部分有唯一的的语义解释； 将潜在表示映射回实际的音乐。 这篇论文提出了一个具有明确约束（explicitly-constrained）的VAE模型（简称$EC^2-VAE$），作为所有三个子问题的统一解决方案。 更确切地说，本文专注于对8-beat音乐片段，以和弦（chord）作为condition，解耦音高（pitch）和节奏（rhythm）的表示。这个模型借用了其他音乐片段的表示，帮助我们实现了假设情景：一个片段如果使用别的音高、节奏、和弦将会怎么样？ 最后，本文用客观的测量方法验证了模型的解耦方法，并通过一个主观的研究，评估了类比的实际例子。 Introduction类比是一个生成高质量艺术作品的有效方法。一般来说，如果两个系统有共同的抽象表示、共同的表示间关系，那么这两个系统就是相似的。举个例子，“氢原子就像太阳系”，形式化表示为$A:B::C:D$的形式：“原子核:氢原子::太阳::太阳系”。两个系统共享的抽象就是“更大的部分是一个系统的中心”。对于生成算法来说，解决一个“what if”问题，即已知ABC，D是什么的问题，是生成算法的一个捷径。 A:B::C:D 对于音乐生成来说，如果A是B的抽象，A与B的关系是，A是音乐B的节奏pattern（一个例子）。那么，如果我们有另一个节奏pattern C，那么B搭配上C的pattern，得到的D将会是什么样子呢？ 类比生成的一大优势是能够产生自然、有创意的结果。之所以自然，是因为模型复用了人类作品实例的表示（如image style等），以及这些概念之间的内在关系；之所以有创意，是因为这些表示使用了新颖的方式进行重新组合，进行了不同的表达。 我们清楚地意识到，类比的实质是对抽象表征的迁移，而不是浅层observation的组合和复读。要进行有意义的类比，需要对高层表征进行解耦，而这对计算机来说是一个难题。 EC2-VAE模型，就是一个学习解耦的有效工具。具体来说，Encoder从Observation中获取latent representation，语义约束（semantic constraints）解耦表征，使得每个部分具有唯一的解释，然后Decoder将解耦表示映射回实际的音乐，同时保持表示之间的内在关系。 作为生成模型，我们希望EC2-VAE有三个特性。 对表示的解耦是明确的。即我们可以指定哪些维度表示哪些语义因素。 解耦不能对重建造成大量牺牲。 训练阶段不需要任何类似的例子，但该模型能够在推理阶段进行类比。 为了评估，我们提出了一个新的指标（metric）进行调查。 Related Work类比生成两种类比算法： 监督学习。需要大量标注，表示学习的需求较少。 严格的类比算法，不仅需要学习表示，还需要解耦表示，允许模型通过操纵任何解耦的表示来进行domain-free的类比。 表示学习 &amp; 解耦（相关研究略） 本文模型并不直接约束z，而是将loss应用于与latent factor有关的中间输出。间接而显式的约束使得模型能够进一步将表示分解为音调、节奏等语义因素。 Method目标是解开时长为8拍的旋律的节奏和音高两个方面。数据均来源于Nottingham数据集。分辨率为1/4拍。 数据表示每个8拍旋律都可以用一个32x130的矩阵表示。32为时间维，130为音高、保持和休止符维。 额外设计了一个节奏pattern约束网络的中间输出。8拍节奏模式表示为32x3的矩阵，3为one-hot向量，代表：(onset, holding, rest)。 chord作为条件，表示成32x12的矩阵（色度图），如12维的multi-hot向量。 模型结构模型基本结构与Vanilla sequence VAE一致。 模型的创新点在于，为Decoder的一部分（橙色）设计了一个子任务，通过明确地鼓励$z_r$的中间输出，匹配节点的节奏特征，从而将潜在（latent）节奏表示$z_r$从整体的表示z中解开。 因此z的另一部分是节奏以外的一切，被解释为音高表示$z_p$。这样明确编码的解耦技术非常灵活，因为可以设计多个子部分，解开z的多个语义可解释的因子。只要可以定义相应潜在因子的中间输出。 新模型将chord作为condition，优点是使z免于存储和弦信息。 Decoder中，为了解耦，本文将z分割成了两半：$z_p$和$z_r$，让两边的向量各有128个维度。 具有解耦功能的ELBO目标的理论正当性表征解耦有时会牺牲重建能力。本节主要证明了模型没有遭受大量的解耦-重构悖论，并且模型的likelihood bound接近原始条件的VAE，在一些情况下甚至可能相等。 ELBO目标函数： \\begin{aligned} \\operatorname{ELBO}(\\phi, \\theta)=& \\mathbb{E}_{Q}\\left[\\log P_{\\phi}(x | z, c)\\right] \\\\ &-\\mathbb{K} \\mathbb{L}\\left[Q_{\\theta}(z | x, c)| | P_{\\phi}(z | c)\\right] \\leq \\log P_{\\phi}(x | c) \\end{aligned}下面用$\\mathcal{D}$代替$&amp;-\\mathbb{K} \\mathbb{L}\\left[Q_{\\theta}(z | x, c)| | P_{\\phi}(z | c)\\right]$。如果我们将图1(b)的中间节奏输出看作网络的hidden variable，模型的ELBO只会增加基于原始节奏的节奏重建loss，达到原始ELBO的下限。 \\begin{aligned} & \\mathrm{ELBO}^{\\mathrm{new}}(\\phi, \\theta) \\\\=& \\mathbb{E}_{Q}\\left[\\log P_{\\phi}(x | z, c)\\right]-\\mathcal{D}+\\mathbb{E}_{Q}\\left[\\log P_{\\phi_{r}}\\left(r(x) | z_{r}\\right)\\right] \\\\=& \\operatorname{ELBO}(\\phi, \\theta)+\\mathbb{E}_{Q}\\left[\\log P_{\\phi_{r}}\\left(r(x) | z_{r}\\right)\\right] \\end{aligned}其中$\\phi_r$代表节奏decoder的参数。新ELBO是原始ELBO的一个下界，因为$\\mathbb{E}_{Q}\\left[\\log P_{\\phi_{r}}\\left(r(x) | z_{r}\\right)\\right] \\leq 0$。 此外，如果将global decoder的其余部分采用原始节奏而不是节奏decoder的中间输出作为输入，则目标可以重写为： \\begin{aligned} & \\operatorname{ELBO}^{\\mathrm{new}}(\\phi, \\theta) \\\\=& \\mathbb{E}_{Q}\\left[\\underbrace{\\log P_{\\phi}\\left(x | r(x), z_{p}, c\\right)+\\log P_{\\phi}\\left(r(x) | z_{r}, c\\right)}_{x \\underline{ \\|} z_{r} | r(x),c;r(x)\\underline{ \\|}z_p}\\right] -\\mathcal{D}\\\\=& \\mathbb{E}_{Q}\\left[\\log P_{\\phi}(x, r(x) | z, c)\\right]-\\mathcal{D} \\\\=& \\mathbb{E}_{Q}\\left[P_{\\phi}(x | z, c)+\\log P_{\\phi}(r(x) | x, z, c)\\right]-\\mathcal{D} \\\\=& \\operatorname{ELBO}(\\phi, \\theta) \\end{aligned}第二个等号表示一个完美的解耦，最后一个等号成立，因为$r(x)$由$x$决定。换而言之，我们展示了在某些假设下，两个ELBO相同。 实验客观指标一旦成功解耦，音高的任何变化都不应影响潜在的节奏表示。为此设计了两个指标： 换位后的Δz； 一个augmantation-based序列的F-score。 音高转换的Δz可视化将$F_i$定义为一个操作，将所有音符转$i$个半音。使用L1范数测量z的变化。 增加音高时，音高的潜在表示的变化$z_p$远高于节奏的潜在表示变化$z_r$。这充分证明了解耦的成功。 F-score从IR角度，可以实现新的评估方法。我们将模型结构定义中的pitch-rhythm split作为ground truth，将factor-wise数据增强（保持一个，改变另一个，vice versa），作为query。将因此出现了最大variance的实际上latent dimensions，成为结果集（result set）。用这种方法，可以量化评估模型的P、R和F分数。 这是第一个为明确编码的解耦模型定制的测量方法，因此将random作为baseline。 后面的case study略。 想法与见解一路看下来感觉很流畅，从音乐的结果来看也是一个非常好的模型，起解耦能力值得肯定。 值得挑一些刺的地方我认为有两点。 在模型描述上，模型的图画得并不是很清楚。比如说在对z的分割上，原文中提到对z对半分割，而图中的描述并不能体现这一点。 F-score的evaluation做得并不是很清晰。这个measurement从实现上来说是衡量解耦效果的，但是与random对比并不是好的选择。我猜测，使用“没有明确解耦”的普通VAE比较，也许是一个更好的选择。这就像是ON-LSTM的论文，也有人质疑，普通的LSTM会不会也有一定的order性呢？ 模型可以发展的地方相比缺点来说要多得多。首先是解耦设计的灵活性，几乎可以无成本地在之后进行扩展；其次，解耦类比生成的这个topic本身，也应该是正确的方向。","tags":[{"name":"music generation","slug":"music-generation","permalink":"http://ldzhangyx.github.io/tags/music-generation/"},{"name":"VAE","slug":"VAE","permalink":"http://ldzhangyx.github.io/tags/VAE/"},{"name":"representation learning","slug":"representation-learning","permalink":"http://ldzhangyx.github.io/tags/representation-learning/"},{"name":"analogy","slug":"analogy","permalink":"http://ldzhangyx.github.io/tags/analogy/"}]},{"title":"我们来聊聊EsAC和Essen Folk Song Database","date":"2019-07-26T07:01:14.000Z","path":"2019/07/26/esac/","text":"古董级民歌数据集，对数据格式做了一些整理，在本文进行解释和说明。 简介历史EsAC全称是Essen Associative Code，可能是现存最长的音乐编码系统。EsAC的概念可以追溯到200年前，于1982年正式形成。因为其年代过于久远，现在很多音乐文档，尤其是欧洲音乐文档都在使用这种编码格式。 1980年-1994年，项目在Helmut Schaffrath在Essen领导推动这个项目。1994年Schaffrach意外去世后，他生前所在的实验室继续着他的工作。 用途EsAC项目搜集了世界各地（尤其是欧洲）的民歌和历史上的音乐，编码后用于方便地进行搜索、分析和表示研究。 格式说明EsAC被编码为Database record，在esac-data.org能下载到其txt版本。在这里，一条record对应一首曲调。 一条常见的记录如下： 123456789101112131415161718ALTDEUCUT[Landsknecht als Schlemmer]REG[Europa, Mitteleuropa, Deutschland]KEY[A0359 08 G 4/4]MEL[1_ 3b_3b_4_4_ 5_5_5_7b_ ^_656_6_ 5__0_ 3b_ 2_3b_2_2_ 1__.+1_ +1_7b_6_6_ 5__0_ 5_ +1__+1__ 7b__5__ 7b__6b__ 5__0_ 7b_ 5_5_5_3b_ 5_5_5_1_ 4_3b_2_2_ 1__0_ 1_ 3b_3b_4_4_ 5_5_5_7b_ ^_656_6_ 5__0_ 3b_ 2_3b_2_2_ 1__.+1_ +1_7b_6_6_ 5__0_ 5_ +1__+1__ 7b__5__ 7b__6b__ 5__0_ 7b_ 5_5_5_3b_ 5_5_5_1_ 4_3b_2_2_ 1__0__ +1__+1_+1_ 7b__6b__ 5_5_5__ 4_4_4__ 3b__3b__ 7b_7b_7b__ 5__5_5_ 4_4_4__ 3b_3b_3b_3b_ 4_3b_2_2_ 1__3b__ 4_.41_2_ 3b_.45_.6b 7b__.6b_ 5_4_3b_2_ 1__. //] &gt;&gt;FCT[Romanze, Ballade, Lied]CMT[Forster II. 1540 No. 17.] 其中音乐旋律信息为单音旋律，由简谱格式构成。是的，当时他们采用了简谱格式。旋律包含在MEL字段里。 CUT：标题 REG：区域 TRD：曲调来源，如书籍、录音带 KEY：签名行 MEL：旋律线 FKT：歌曲功能，如舞曲 BEM：标记 TXT：歌词 KEY签名行包含了正确解释旋律所需要的信息： 1KEY[A0359 08 G 4/4] 这一行包含了：签名、最小节奏单位、调性、拍子，四个信息。 EsAC syntaxEsAC的语法基本与简谱一致，但在细微之处做了很多的补充。MEL中的数字代表首调音高，而2、3等数字代表相对音高。 节奏以下划线和点作为标记。 我自己在看数据的时候遇到了”^”的标记，这个意味着跨小节延音。 两个空格代表小节线 换行代表断句。 注意，这里的附点一般出现在延音符后，会将延音后总时长*150%。 注意，延音符连着出现，时长成倍增长。 i.e. 5__的时长是4倍，5__.的时长是6倍，5___的时长是8倍。 标注中会出现括号，意味着出现了三连音等连音。 i.e. (-3-71) 3_2_(-5-72) 4_3_ 即使经过这样的处理之后，还是会有这等肮脏的例子，可以说是非常恶心了…… i.e. 33 2__(^_1#_2_)(2_3_4_) 5__(^_4#_5_)(5_3_1_) 甚至还有打拍子……： i.e. xxxx xxxx 1_2-5 1_ //] &gt;&gt; 甚至还有神奇的调子（居然还是德国标注法，将B调标为H调是什么鬼辣！）： i.e. KEY[U0002 16 H 6/8] 甚至还有不在旋律结束处加//标记的： i.e. 1_+2+31_+3+51_+5_+5__ 1_+5+61_+6++11_++1_++1__] &gt;&gt; 参考资料 http://wiki.ccarh.org/wiki/EsAC http://www.cs.uu.nl/events/dech1999/dahlig/tsld001.htm http://www.esac-data.org/","tags":[{"name":"music generation","slug":"music-generation","permalink":"http://ldzhangyx.github.io/tags/music-generation/"},{"name":"音乐生成","slug":"音乐生成","permalink":"http://ldzhangyx.github.io/tags/音乐生成/"},{"name":"dataset","slug":"dataset","permalink":"http://ldzhangyx.github.io/tags/dataset/"},{"name":"music information retrival","slug":"music-information-retrival","permalink":"http://ldzhangyx.github.io/tags/music-information-retrival/"},{"name":"MIR","slug":"MIR","permalink":"http://ldzhangyx.github.io/tags/MIR/"},{"name":"音乐结构分析","slug":"音乐结构分析","permalink":"http://ldzhangyx.github.io/tags/音乐结构分析/"}]},{"title":"《Graph Neural Network for Music Score Data and Modeling Expressive Piano Performance》论文笔记","date":"2019-07-21T08:38:46.000Z","path":"2019/07/21/gnn-for-performance/","text":"这篇文章的亮点在于利用了图网络编码额外信息，来改进其他任务效果的思想。这篇文章写作清晰，想法新颖，值得关注。文章出自韩国KAIST的Juhan Nam老师组（出身Stanford的CCRMA实验室，师承Malcolm Slaney老师）。 Abstract本文使用图神经网络表示乐谱，将其应用于钢琴演奏的渲染过程中。具体地说，本文使用了音符级别的门控图网络（GGNN）和在小节级别的带分层Attention机制（HAN）的bi-LSTM，进行模型设计。为了建模不同的表现风格，本文使用了VAE。试验结果表明，本文提出的模型产生了更像人类的表现。 Introduction如同演员的表现能更好地调动观众情绪一样，音乐的演奏也具有很多细节。使用计算方法表达演奏，从基于规则的方法、高斯过程、卡尔曼滤波、贝叶斯网络、条件随机场、循环神经网络，都有相关的研究。然而，之前的方法仍然在这个task上有缺陷。 近年来，生成模型在各个领域取得了很多成果，音乐上如自动作曲、音乐转录、声音合成等，都有显著成就。 将神经网络应用到音乐数据，一个主要问题在于定义其输入结构。一般来说，乐谱根据其音高，转换成一个一维的序列数据(Simon &amp; Oore, 2017; Oore et al., 2018; Jeong et al., 2018)。但是一维的编码可能会丢失音符之间的一些多边关系。 另一种输入表示是通过采样，得到Piano Roll的2D矩阵。这使得CNN可以使用，但是基于采样的表示需要更高的维度，和随乐曲复杂性而跟着增长的时间分辨率。这种高维可能会阻碍模型学习长期结构。 为了解决这个问题，我们提出了一种基于GNN的模型，音符作为图中的节点，而乐谱中音符的关系被转化为一个表（后文会详细论述表的构造）。 如图1所示，我们将GNN结合到轻量的RNN来学习长期结构。此外，我们建议使用迭代循环来使用彼此的结果更新GNN和RNN的输入。 与其他生成任务类似，给定condition，生成各种结果是建模有表现力的演奏的重要目标。我们采用VAE训练模型，包含相同条件C但具有不同输出Y的数据。 系统的范围侧重于为MusicXML格式的乐谱生成MIDI格式的演奏。 论文两点有两个： 首次尝试图网络学习乐谱表示； HAN+RNN的新方法，对钢琴演奏的模仿是无需数据上的额外注释的。 BackgroundGNN虽然CNN和RNN分别在图像处理和序列建模方面取得了重大进展，但是有各种类型的数据无法用这些网络正确处理，图形就是其中一个例子。利用图形神经网络（GNN）处理图形数据的早期研究由（Gori等人，2005）和（Scarselli等人，2009）引入。（Li et al。，2016）介绍了门控图神经网络（GGNN），它结合了现代RNN实践的门控循环单元和GNN。虽然之前的模型受到收缩映射的限制，但GGNN模型首先克服了这一局限。最近使用GNN的研究在各种任务中取得了最新成果，例如分析引文网络（Kipf＆Welling，2016），分子结构（Jin等，2018），程序代码（Allamanis等，2018）），学习结构化政策（Wang et al。，2018a）。 VAEModel我们的模型组合了音符级的GGNN，小节级的HAN（使用LSTM），使用在迭代方法中。 GGNN我们采用了有向多类别边GGNN（其实就是有向图，箭头还分了个类）学习输入乐谱中的隐含表示。图可以表示为边与节点的集合，即$G=(V,E)$，其中V是节点，E是边。在音乐中，E就是相邻音符之间的连接线。 我们定义了六种边：next，rest，onset，sustain，voice，slur。 next：将音符连接到接下来的音符上。如接下来的音符在上一个音符结束时恰好开始。rest：将音符连接到休止符后面的音符上。多个休止符会被当做单个处理。onset：连接两个同时开始的音符。sustain：在一个音符的开始和结尾中间出现的音符用sustain连接。voice：是next边集的子集。它们仅用以连接同一个语音内的音符。slur：在同一个圆滑线下的音符通过slur边互相连接。 （sustain和slur的定义有一些模糊，因为其没有注明是否仅为邻接的） 除了onset边以外，所有的边都是有向的。所以我们将前向和后向的边视为两种不同的类型。同时，为每一个音符添加自我连接，这样一共得到12种不同的边。每种边共享不同的权重参数。 我们使用GGNN，因为它在学习图中的节点级表示方面有优势。 GGNN的概念介绍如下： 论文中对于GGNN的表述没有超出上面所介绍的范围。 Hierarchical Attention RNN（HAN）我们之前的工作曾使用过HAN渲染有表现力的钢琴演奏。（对比了HRNN和HMRNN） 在分层RNN模型中，使用HAN的原因是其直接适用于GNN。事实上，因为HAN使用注意力来总结较低级别的表示，因此它可以直接应用于任何类型的网络。 我们的系统里，使用了context attention（《Hierarchical attention networks for document classification》里的），将音符表示转为小节向量。attention同时使用了多头注意力机制（multi-head attention）。通过这种方法，每一个小节的内容可以转化到高层的一个节点里。 作者的公式有一些问题，不过大致上就是attention计算那一套，其中$u_c$是context vector。因为context vector并没有接受其他输入，实际上这是一个trainable的参数。计算细节不在此赘述。 Iterative Sequential Graph Network组合来自不同分层单元的输出的简单方法是将它们连接为单个向量。然而，这种方法具有以下限制：较低级别的层不能以较高层中编码的长期上下文为条件，因为较高级别的输出不会影响较低级别的层。在HRNN和HM-RNN中，较低级别的隐藏状态在分层边界处被馈送到较高级别，反之亦然。然而，在HAN中，隐藏状态传播仅在自下而上的方向上进行。当模型的目标结果是给定顺序输入的单个输出时，例如在最初应用HAN的文档分类中，这种限制并不重要。但是为每个音符学习音乐表示时，我们希望高层的信息也能传到底层去，利用更加扩展的上下文学习。为了克服这个限制，我们提出了GGNN和HAN的组合，称为迭代顺序图网络（ISGN），GGNN和HAN以迭代的方式将它们的结果互相馈送： GGNN不仅接受音符表示，还接受高层的hidden state，以concatenate的方式输送。第一次迭代中，高层信息为0，之后再用HAN高层状态接进来。 这样的结构有两个优点： GGNN可以将HAN输出作为输入，考虑更长时间的context。 RNN可以自回归推理，可以补偿GGNN中缺乏的自回归机制。 另外，多次迭代也一定程度上能弥补非自回归模型的缺点。 Expressive Performance Rendering System下图展示了模型结构。 输入和输出模型使用预定义的乐谱和演奏作为输入和输出。特征提取方案在《 Score and performance features for rendering expressive music performances》有详述。输入feature包括各类音乐信息，比如音高、市场、速度、响度、起始偏差、清晰度、踏板等。 模块系统包括三个结构：乐谱编码器$E_s$，演奏编码器$E_p$，演奏解码器$D_p$。对于给定输入X，$E_s$推断乐谱条件$C$。模块包括两层GGNN，和一层LSTM。输入X经过三层选链接，第一层GGNN仅更新音符级别特征（固定小节级别的特征）；第二层GGNN更新整个隐状态。输出进行skip connection组成C。 根据C和对应的演奏特征Y，$E_p$编码出latent vector Z。Encoder的输入使用了全连接，对concatenated data进行了降维。编码器由GGNN和LSTM组成，具体如图。 Decoder解码器产生演奏特征Y，迭代地推断输入乐谱中每个音符的演奏参数。解码采用了分层解码的概念（《A hierarchical latent vector model for learning long-term structure in music》）。 解码器的输入是C、小节级别演奏风格向量$z_m$，和初始演奏参数的concatenatation。具体设置可以参考原论文。 Related Works最近使用深度神经网络进行音乐生成的最值得注意的研究是Music Transformer（Huang et al。，2019）。该研究的目的是通过将作曲和表演结合为一个单一阶段来产生音乐。基于由self-attention组成的原始Transformer模型（Vaswani等，2017），他们提出了相对位置嵌入的音高和时间，并成功地通过超越他们以前的基于LSTM的模型生成具有长期结构的音乐作品 （Oore等，2018）。然而，如上所述，该任务与本文的范围不同。我们的研究侧重于解释和执行给定的乐谱，但Music Transformer更像是制作即兴创作。 最近，VAE已被用于若干音乐数据生成模型中，例如音乐生成（Roberts等，2018），音乐风格转移（Brunner等，2018）。（Maezawa，2018）正如我们在这项工作中所做的那样，采用有condition的VAE来表现音乐表现。然而，VAE中的潜在向量是在音符级别生成的，而我们的模型使用VAE编码整个演奏，因此单个潜在向量可以表示整个片段的表现风格。已经有关于使用包括神经网络的数据驱动方法自动生成表达演奏任务的研究，其在（Cancino-Chacon等人，’2018）中得到了很好的总结，但是它们实现了有限的演奏要素。例如，他们只推断了速度（Malik＆Ek，2017），忽略了速度变化（Lauly，2010; Giraldo＆Ramirez，2016），假设旋律总是高音（Flossmann等，2013; Kim等 。，2013），或使用标准化的节奏（Grachten＆Cancino Chacon’，2017）。我们的模型旨在实现全面的演奏要素。 将图连接应用在音乐上，生成有表现力的演奏，也有研究(Moulieras &amp; Pachet, 2016)。但是系统仅限于生成单音旋律，且图连接仅用于捕获单音上的音符特征。这个研究与我们的有基本性的不同。 ExperimentData收集了MuseScore、Musicalion（这是公开的吗？）的MusicXML数据，以及Yamaha e-competition的MIDI数据，将其做了对齐（Makamura, 2017）。 收集到了16位作曲家的227个作品，以及1061个演奏，包含3606930个音符。 对比模型本文使用了基于HAN的VAE模型。HAN模型包括使用HAN的score encoder和演奏decoder。score encoder使用音符和语音LSTM作为字符表示，HAN作为节拍几别和小节级别的表示。Baseline省略了HAN和语音LSTM，仅使用音符级别的LSTM。仅使用GGNN替换语音和音符LSTM的修改版本被称为G-HAN。 模型对比如下： 训练设置具体参见原论文。 评估重建误差（Reconstruction Loss） 相关系数 聆听测试 Conclusion我们提出了一种迭代序列图网络，它结合了门控图神经网络和分层注意RNN，用于为给定的乐谱建模表现的钢琴演奏。定量和定性评估表明，与以前的模型相比，所提出的模型取得了显着的进步。对于未来的工作，我们将进一步研究如何定量评估表达性能模型。 想法和见解用图网络进行乐谱表示是一个很棒的主意。音乐不同于NLP其他任务的一点在于，它可以是多声部协调进行的；音乐的Piano Roll相比图像的丰富信息来说，也比较稀疏。乐谱上的音符稀疏度，用一个图来表示是相当合理的。规定图网络的连接线属性，对图拓扑结构进行定义和约束，图就能自然地表示出乐谱。 论文阐述了一个生成任务，VAE的中间结果z是随机取样的。但是从表示学习的角度来看，VAE能解耦出演奏风格，z必然有其意义。如果指定VAE中间的z，而不是随机生成，那么能否做到某种意义上的演奏风格迁移？ 本文的模型设计也颇有意思。实际上，LSTM的表示是GNN的高层表示，这种表示方法是自然且高效的，如果不使用GNN，这种方法难以自然地导出。HAN和GNN的流动机制也是一个很有意思的点。 评估中，模型的性能并不突出，我个人猜测是因为音乐生成任务较困难，在其他的task上也许能有更好的表现。","tags":[{"name":"music generation","slug":"music-generation","permalink":"http://ldzhangyx.github.io/tags/music-generation/"},{"name":"音乐生成","slug":"音乐生成","permalink":"http://ldzhangyx.github.io/tags/音乐生成/"},{"name":"VAE","slug":"VAE","permalink":"http://ldzhangyx.github.io/tags/VAE/"},{"name":"structure","slug":"structure","permalink":"http://ldzhangyx.github.io/tags/structure/"},{"name":"图网络","slug":"图网络","permalink":"http://ldzhangyx.github.io/tags/图网络/"}]},{"title":"音乐生成的兵器库：必要的包和数据集","date":"2019-07-21T03:08:44.000Z","path":"2019/07/21/music-toolkits/","text":"首先做个小宣传。因为很多想做这一块的同行本科生们不是很清楚国内外的院校列表。有一位前辈在GitHub上整理了大部分的院校列表出来，我也对这个列表做了一点贡献。点击查看 Python官网整理的Python库有这些：链接 基础组件Python-MIDI 项目官网：https://github.com/vishnubob/python-midi/tree/feature/python3 很多库的前置库，安装时记得选择其Python 3的branch。 乐谱生成 相关的知乎问题：链接 LilyPond 项目官网：http://lilypond.org/index.html LilyPond是GNU Project的一部分，是免费的乐谱生成软件。生成的乐谱质量很高，支持从xml/mxl以及从midi转化成lilypond格式源代码（.ly），并且可以使用类LaTeX语言编写。 可以用两个方法通过Python代码调用LilyPond库： Python-ly库，其GitHub地址在这里 mingus的lilypond模块，GitHub地址在这里 MuseScore 项目官网：https://musescore.org 社区和乐谱集：https://musescore.org MuseScore的特点在于其有充分活跃的社区。这个软件和LilyPond都可以通过XML和MIDI进行数据传送，所以在接口方面很灵活。 音乐的符号化表示music21 项目官网：http://web.mit.edu/music21/ 对Python3的支持很好，也是目前为止最完善的一个Python库、武器库。包括音乐的乐谱显示、音乐合成、矩阵分析、语料库、符号表达等。 ABC格式 项目官网：http://abcnotation.com/ ABC格式是一种复杂而古早的模式，很多早期的数据集使用了这种标注。ABC格式可以转化为music21，或者被其他方法解析。 Pretty_MIDI表示的Piano Roll 项目官网：https://github.com/craffel/pretty-midi 我以前写的文章：https://www.cnblogs.com/ldzhangyx/p/7789939.html 一个方便将MIDI文件转化为Piano Roll的库。这个库被用在Google Magenta里，我自己的项目也要使用它。master分支现在已经支持了Python3。 libROSA 项目官网：https://librosa.github.io/librosa/ libROSA库的display.specshow模块可以将piano roll可视化为一个（还可以看的）图片。 MIR_eval 项目官网：https://craffel.github.io/mir_eval/ Google的Colin Raffel写的一个库。这个Python库提供了一些和弦的向量表示，以及和弦分析的一些其他有用的工具。 mingus 项目官网：https://bspaans.github.io/python-mingus/ Python 3版本：https://github.com/edudobay/python-mingus 作者很久没有维护过了，但是从快速上手来看是一个不错的Python库。Python 3版本已经给出。 音乐合成PySynth 项目官网：https://mdoege.github.io/PySynth/ 主要用处就是将midi或ABC格式的文件转化为wav文件，有多种合成方法可选，十分方便好用。 pyfluidsynth3 项目官网：https://github.com/tea2code/pyfluidsynth3 Pretty-MIDI的前置库，用于合成音乐。这里推荐的是Python 3的重写版本。 项目官网 数据集Nottingham Dataset 地址：https://github.com/jukedeck/nottingham-dataset 特别有名的数据集，音乐界的MNIST。ABC格式可以被上面一些库直接解析，MIDI格式也可以转换。数据预处理的办法一般是shift到12个大调或者小调，速度调整至120bpm。 Lakh Dataset 地址：https://colinraffel.com/projects/lmd/ GitHub：https://github.com/craffel/midi-dataset Lakh MIDI数据集是176,581个独特MIDI文件的集合，其中45,129个已匹配并与Million Song Dataset中的条目对齐。 Lakh Pianoroll 地址：https://salu133445.github.io/lakh-pianoroll-dataset/ 上面数据集的转化版本，但是表示使用了Pianoroll。 Million Songs 地址：https://labrosa.ee.columbia.edu/millionsong/ 不是midi文件而是波形文件，特点在于数据量极大。 SALAMI Dataset 地址：https://github.com/DDMAL/salami-data-public 非常完整的标注数据集，值得一提的是可以从中提取和弦标注进行学习。 MAESTRO Piano Dataset 地址：https://magenta.tensorflow.org/datasets/maestro Google Magenta一直在用的钢琴演奏数据集。有文字标注版和音乐原版，数据量极为庞大。 IMSLP Music Library 地址：https://imslp.org/ 国际上最大的乐谱典藏数据库。其亮点在于录音和乐谱非常全，也许可以用于图像识别领域。有些乐谱似乎是收费的。 the Classical piano MIDI database 地址：http://www.piano-midi.de/ 需要自己爬下来整理，钢琴MIDI数据集。 The Largest MIDI Dataset 地址：https://www.reddit.com/r/WeAreTheMusicMakers/comments/3ajwe4/the_largest_midi_collection_on_the_internet/ 可以说是很神奇了，在Reddit上贡献了出来。是我看到的最大的MIDI数据集（3.65Gb），没有之一。 MuseData 地址：http://musedata.stanford.edu/ 也是需要自己爬，但是这里的数据是根据流派做好划分的，非常一目了然。 JSB Chorales 地址：https://github.com/czhuang/JSB-Chorales-dataset 四声部众赞歌数据集。源地址挂掉了，这个GitHub提供了pickle包，很好用。 FMA Dataset 地址：https://github.com/mdeff/fma 这是一个音乐分析用的数据集，其亮点在于对流派、ID等数据的详尽标注。具体可以阅读readme。 Midi Archive 地址：http://archive.cs.uu.nl/pub/MIDI/ 罗切斯特大学维护的一个数据集。 The Session 地址：https://thesession.org/tunes 非常非常完备的一个ABC格式的数据集，虽然需要自己爬，但是非常齐全。数据仍在不断增加中。 MusicNet 地址：https://homes.cs.washington.edu/~thickstn/start.html 这个数据集是raw的音频格式，大约10GB，提供了丰富的形式，标注详尽全面，甚至还做了PyTorch接口。 the Symbolic Music dataset by Walder 地址：http://users.cecs.anu.edu.au/~u1018264/data.html 清洗过的MIDI文件，作者目前还活跃在音乐研究一线。 TheoryTab 地址：https://www.hooktheory.com/theorytab 严格来说这不算是一个数据集，但是很多人在论文中用过它（比如MidiNet）。最出彩的地方在于其和弦标注。我觉得应该是网络上和弦标注最为全面的一个数据集了。这个网站现代化、可交互，非常值得看一看。 J.S. Bach Series 地址：http://www.jsbach.net/midi/ 地址：http://bachcentral.com/ emm，他们真的很喜欢巴赫。 The Josquin Research Project 地址：http://josquin.stanford.edu/ 斯坦福的一个网站，好像也不能直接下载，但是数据整理得非常漂亮，提供了MIDI、XML等多种格式，收录了1420-1520年的复调音乐，并且支持在线搜索和试听。 Drum Dataset 地址：https://www.reddit.com/r/WeAreTheMusicMakers/comments/3anwu8/the_drum_percussion_midi_archive_800k/ 虽然数据很小只有800k，但是这是我见过的第一个专用于鼓点的数据集。 Video Game Datasets 地址：https://www.vgmusic.com/ 收录了游戏的背景音乐，而且真的非常非常齐全。 Essen Folk Songs Database 地址：http://www.esac-data.org/ 古老的数据集，用于音乐结构分析。数据的提供方式是简谱。这个网站似乎有反爬机制，注意下载方式。 Billboard Dataset 地址：https://ddmal.music.mcgill.ca/research/The_McGill_Billboard_Project_(Chord_Analysis_Dataset)/ 用作和弦分析的数据集，由McGill的DDMAL组提供。数据集提供了约900首音乐的和弦注释，但是tonic之间没有区分大小调。 HookTheory 地址：https://www.hooktheory.com/ 用作和弦分析的数据集。可惜的是，这个数据集似乎不提供公开下载。","tags":[{"name":"音乐生成","slug":"音乐生成","permalink":"http://ldzhangyx.github.io/tags/音乐生成/"},{"name":"Python","slug":"Python","permalink":"http://ldzhangyx.github.io/tags/Python/"}]},{"title":"abc-midi","date":"2019-07-14T09:38:09.000Z","path":"2019/07/14/abc-midi/","text":"","tags":[]},{"title":"SALAMI数据集介绍和使用指南","date":"2019-07-12T05:10:47.000Z","path":"2019/07/12/salami-dataset/","text":"SALAMI数据集，最早被我注意到是在2018年的ISMIR上的《INTERACTIVE ARRANGEMENT OF CHORDS AND MELODIES BASED ON A TREE-STRUCTURED GENERATIVE MODEL》，里面使用了来自McGill University的SALAMI数据集。 这个数据集的特点是，人工标注了音乐的层次结构。从规模上来说，涵盖了一千余首音乐，足以充当模型的测试集，用于检查模型对音乐层级结构的推导准确性。 这篇文章主要是数据集公开时发表的论文《DESIGN AND CREATION OF A LARGE-SCALE DATABASE OF STRUCTURAL ANNOTATIONS》的全文翻译，附带了我使用这个数据集的一些心得体会。 摘要本文描述了一个前所未有的大型数据库的设计和创建，该数据库包含近1400种音乐录音的2400多种结构注释。该数据库旨在成为算法的测试集，用于分析数十万个记录的更大的语料库，作为大量音乐信息结构分析（SALAMI）项目的一部分。本文描述了数据库的设计目标以及在创建过程中遇到的实际问题。 特别是，我们讨论了录音的选择，注释格式的开发和适应Peeters和Deruty [10]的工作的程序，以及项目的管理和执行。我们还总结了所得到的注释语料库的一些属性，包括平均了标注者之间的一致。 Introduction大量音乐信息（SALAMI）项目的结构分析是一项音乐学活动，其目标是为大量音乐制作结构分析 - 超过300,000个录音。这里的结构是指将一段音乐划分为多个部分，并将相似或重复的部分组合在一起。这些部分通常对应于功能独立的部分，例如流行歌曲的“诗歌（verse）”和“合唱（chorus）”部分，奏鸣曲的“呈示部（exposition）”和“展开部（development）” - 或者在更短的时间尺度，呈示部的“主题”，“转型”和次要主题”群体。 SALAMI语料库中的录音代表了各种类型，从klezmer到40强流行音乐，以及各种来源，包括专业录音室录音和观众录制的现场会议。SALAMI数据集将免费提供，可以为音乐理论家，音乐学家和其他音乐研究人员提供很好的服务，因为确定单个音乐片段的形式通常是一项耗时的任务。SALAMI数据集可以促进形式的大规模研究，目前这种研究相对不常见。 由于了解音乐片段结构的价值，追求自动生成结构描述的算法是一个活跃的研究领域。（有关评论，请参阅[9]。）SALAMI项目计划使用这些算法中的一些来分析其数十万个记录。但是，在使用这些算法之前，有必要在所代表的大量类型上验证它们的性能。这需要创建一个人类注释的地面实况数据集。设计和创建大型数据库（如SALAMI测试集）引发了许多与音乐选择，注释格式和过程相关的方法问题。本文解释了所涉及的问题以及我们为解决这些问题所做的决定。 本文的下一部分总结了几个现有结构注释语料库的内容和贡献，以及最近对注释过程本身的重要研究[1,10]。第3节描述了SALAMI测试集的创建，包括语料库选择，使用的注释格式和推荐的工作流程。第4节介绍并讨论了结果数据集的一些属性。 之前的工作既有的数据SALAMI需要一个包含大量流行音乐，爵士乐，古典音乐和世界音乐的数据库。然而，大多数以前的注释集合只考虑流行音乐。现有最大的三个注释数据库是TUTstructure07 [13]（557个注释），由坦佩尔理工大学（TUT）编制，主要包含流行音乐;由Alan Pollack创建并由两组独立同步的Beat les工作室目录的注释[5,14]（180注释）;和RWC音乐数据库（285注释）附带的AIST注释集[4]。RWC套装大约是一半流行音乐，每个爵士乐和古典音乐四分之一，还有少数世界音乐作品，但对于许多爵士乐和古典乐曲，只有“合唱”部分。 注释格式几乎所有以前的注释语料库都​​使用了相同的直接注释格式。片段被分割成非重叠的片段，并且每个片段被给予单个标签，例如“前奏”或“合唱”，以指示哪些片段彼此相似或重复。标签还表明每个部分的音乐角色或功能。在一些语料库中，例如披头士乐队的注释[5]，标签可以指示乐器（例如，“verse_guitar”）或乐段的变体（例如，“verse_with_ending”）。 存在的问题正如Peeters和Deruty [10]所指出的，音乐相似性，功能和仪器的这种混合是有问题的。例如，歌曲的“outro”可以使用与之前的“transition”相同的音乐，但是将它们标记为未能记录它们的相似性。相反，具有单一功能的部分可能在音乐上是异质的，如同延伸的两部分介绍一样。Peeters和Deruty还批评了在某些注释集合中使用的大型，看似无约束的词汇表。再次考虑Isophonics Beatles注释[5]：在146个独特标签中，95种只使用一次。一次性标签可以为检查注释的人提供信息，其中其含义在上下文中是可理解的（例如，“introredux”，“verse（slow）”），但是当注释正在进行时，具有太多唯一标签的用处不大 由机器使用。标准注释格式的另一个缺点是它仅描述单个时间尺度的结构。音乐结构最重要的属性之一是它被层次感知，并且理想的是在注释中捕获一些这样的信息。 一种可替代的格式Peeters和Deruty提出了另一种注释格式，旨在解决这些问题。该格式使用了19个标签的受限词汇表，每个标签都涉及一个部分结构的三个方面之一：音乐相似性，音乐角色或乐器角色。在它们的格式中，通过将一个片段的每个部分标记为五个“组成型实体循环”（CSLoops）之一来指示音乐相似性。（如果需要超过五个，则使用第六个CSLoop，但格式并不意味着标有此最后一个标签的所有部分都相似。）功能标签是可选的，仅限于“intro / outro”，“transition”， “chrous”和“solo”。乐器标签表示是否存在主要或支持旋律的声音。Peeters和Deruty的格式也创造性地包含了一些有关结构的分层信息。两个标记“V1”和“V2”划分CSLoops; 第一个表示标记两侧的音乐片段相似，第二个表示它们不相似。 标注过程与音调不同，在很大程度上，节拍，结构的感知是一种高度主观的现象，并且两个听众通常不同意音乐的形式。因此，开发一种注释程序是一项挑战，虽然可能不是客观的，但最大限度地提高了结果的可重复性。请注意，由于结构分析记录了听众的创造性解释和她的感知，因此客观性可以说是注释的不可能的目标。 一种方法是将注释的创建视为感知实验，并且只要让多个主体听到一个片段并且只要他们感知到结构边界就按下按钮。这些数据是由[2]收集的，他们指出，听众普遍同意他们认为最突出的边界的位置。这些边界被作者用作一种“基础事实”，用于评估一些计算模型在估计边界时的成功。 Bimbot等[1]通过精确指定注释程序设法获得一定程度的可重复性。他们定义了注释器应该使用的音乐标准和相似性判断，以便估计边界。（标记细分的任务仍然是未来的工作。）他们报告说，通过他们的程序，注释在注释者和随着时间的推移是非常一致的。注释器的目标是将一个片段分解为“自主和可比较的块”。自主意味着无论一个块是独立还是连续循环，结果应该是音乐上可接受的。如果两个块在节拍中具有相同的持续时间，可互换，或者就其时间组织而言是相似的，则它们可以是可比较的。 SALAMI数据集的描述我们使用独特的注释格式开发了一个新的注释语料库，以实现SALAMI项目的目标。为确保语料库可用作SALAMI的评估测试集，主要的设计考虑因素是语料库涵盖尽可能广泛的音乐类型。为了使注释在音乐上有用，注释格式的设计目标是独立描述音乐相似性，功能和主要乐器，并且注释反映音乐结构的等级性质。最后，格式和程序应该允许快速制作注释，以最大限度地降低成本，但要足够灵活，以便能够处理各种类型的作品，同时目标着标注者之间的一致。考虑到这些设计考虑因素，我们对以前的注释语料库和现有注释技术进行了调查。基于此调查以及我们自己对不同方法的实验，我们确定了本节中概述的语料库，格式和过程。 SALAMI数据集的内容设计语料库的第一步是决定放入什么。SALAMI的优先事项之一是为尽可能多种音乐提供结构分析，以匹配算法分析的音乐的多样性。除了流行音乐之外，SALAMI测试装置应该同等重视古典，爵士和非西方音乐，俗称“世界”音乐。为确保录音格式的多样性，我们还强调了录制现场录音。数据库的最终组成如表1所示。 SALAMI测试集的第二个目标是能够将我们的注释与以前的数据集进行比较。因此，我们重复了之前的一些工作：我们的测试集目前分别包括来自RWC和Isophonics数据集的97和35个记录。注意，这些记录都是单键的（即，由单个人注释），而大多数SALAMI测试语料库是双键的（由两个独立的注释器分析）。双键提供有用的信息，但更昂贵。鉴于其他组已经注释了这些条目，单键输入一些条目似乎是一个合理的妥协。 手动选择语料库的歌曲会耗费时间，并会引入未知的方法论偏见。然而，从大多数来源随机选择歌曲会导致语料库严重偏向流行音乐。为了解决这个问题，大多数录音都来自Codaich [7]，这是一个包含精心策划的元数据的大型数据库，包括50多个子标签。这使我们能够在仍然随机选择单个作品的同时强制实现对流派的良好报道。测试集的其余部分是从Live Music Archive [6]中随机收集的。遗憾的是，这些录音的元数据不一致，无法按类型分发。大多数似乎是流行和爵士音乐。 标注格式我们开发了一种新的注释格式，它采用Peeters和Deruty设计的格式，采用了许多重要的方式：我们借用它们之间的区别来区分表示音乐相似性，功能和仪器的标签，并且像我们一样，我们也严格限制功能标签的词汇量。但是，我们已经做了一些修改，以适应SALAMI的独特需求和更多的音乐学焦点。三层中的每一层中的标签在以下三个部分中描述。示例注释如图1所示。 音乐相似性轨音乐相似性轨迹包括在不同时间尺度的两个层，每个时间尺度识别该部分的哪些部分使用类似的音乐想法。大型图层使用大写字母作为标签（“A”，“B”等），小型图层使用小写字母（“a”，“b”等）。字母标签的使用模仿了熟悉的音乐理论方法。必须为大型和小型图层中的每个记录部分分配一个字母标签。格式规范允许使用任意数量的小写或大写字母（如果字母表用尽，可以使用标签“aa”，“ab”等等）。然而，对于大规模层，指示注释器优选每次记录使用五个或更少的不同大写标签。该偏好规则并未表示在任何记录中存在五个或更少的不同音乐想法的假设。相反，它旨在引导注释器朝向某个抽象级别。当注释不太清晰地组织成不同部分的作品时，这个方向被证明是有用的，例如通过组合的部分。它也有助于注释作品，如奏鸣曲，可以组织成部分，但这些部分不是音乐上同质的，可能包括几个不同的音乐想法。 另外两个特殊标签表示沉默（“slience”）和非音乐，例如现场记录中的掌声或戏弄（“Z”）。我们还允许字母标记被素数符号（’）所反映，以表示与另一个明显相似的部分，但这被认为是实质上变化的。相似性判断本质上是主观的和不精确的，而主要符号是承认这一点的有用方式。它允许注释者忠实地记录他的解释，同时允许未来的用户根据他们的需要轻松地调整标签。例如，根据应用程序，用户可以删除主要标记（以便“a”和“a’”被重新标记为“a”）或将变体视为不同的部分（以便“a’”将是重新分配了与“a”不同的字母标签）。 功能轨注释格式中的第二个轨道包含音乐功能标签，所有标签都必须从我们严格的20个标签词汇中提取。与字母标签不同，一件作品的每个部分都不一定要收到功能标签。词汇表列在表2中，分为各种相关类别。乐器，过渡和结束组都是同义词组。请注意，在结束组中，标签“fadeout”是除了任何其他标签之外还可以出现的特殊标签。例如，如果乐曲在重复合唱时淡出，则最后一部分可以同时给出两个标签：“合唱”和“淡出”。每个术语的完整定义在我们的注释器指南中指定，可在线获取[11]。 请注意，某些标签是其他类型的特定类型的替代品：例如，爵士乐歌曲中的“head”类似于流行歌曲中的“chorus”，或者有时候是古典乐曲中的“主题”。此外，术语“exposition”，“development”和“recapitulation”一起特定于奏鸣曲形式，并且在特殊情况下可用于在大于大规模相似性标签的时间尺度上注释第三级结构关系。然而，“development”也具有更广泛的适用性：它可以用于表示对比中间部分的功能，这在许多情况下是相关的，从各种古典类型到渐进式摇滚。另外，词汇表的一些子集可以用作同义词组，如果需要，可以将其折叠成单个功能标签。例如，虽然我们的Annotator’s Guide定义了“pre-chorus,” “pre-verse,” “interlude,”和 “transition” 部分之间相对微妙的区别，但它们都是“ “transition” 的同义词。这种方法允许注释者犯错在精确度方面，同时使未来的数据用户可以忽略不需要的区别。 领头乐器轨注释格式中的最后一个轨道指示单个乐器或声音在哪个位置具有领先的，通常是旋律的角色。此轨道中的标签只是主要乐器的名称，因此词汇不受限制。此外，与其他轨道不同，主要乐器标签可能会重叠，如二重唱。请注意，与功能轨道一样，如果没有仪器满足主导作用，则可能存在没有主要仪器标签的记录部分。请注意，在为此项目设计的书面格式中，描述小规模相似性片段的边界是注释函数和引导仪器轨迹时唯一可用的边界。同样，这有助于将注释器定位到适当的抽象级别，并减轻它们过于辛苦地指示仪器的变化。 标注过程注释器使用软件Sonic Visualiser [3]来试听和注释碎片。Sonic Visualiser的键盘命令允许用户很快插入和标记边界。我们提出了以下工作流程：首先，每当感知到结构边界时，通过歌曲聆听并标记边界。其次，再次听取这个部分，调整边界并添加小写标签。第三，添加大写和功能标签，最后添加主要仪器标签。虽然我们发现此工作流程高效且简单，但我们并未要求注释者遵循此工作流程或任何其他特定工作流程。 项目实现注释格式和数据收集在10个月的时间内进行。首先，研究了以前的注释格式和注释数据库。潜在的注释格式由项目负责人设计和测试，并在两个月结束时设定了一种暂定格式。接下来，候选注释器在注释格式和Sonic Visualiser环境中进行训练。聘请了八位成功的候选人，他们都在音乐理论或作曲中继续攻读研究生课程，并在接下来的一周开始收集数据。由于注释格式在工作开始之前尚未进行大规模测试，因此数据收集的前六周被视为延长试用期。每个星期或两个星期，新的流派都会给注释者一个新的作业，从流行开始，558第12届国际音乐信息检索学会（ISMIR 2011）预计将成为问题最少的，并继续按顺序进行爵士乐 ，古典和世界，预计难度越来越大。在六周结束时，放松了对注释者的监督，并且临时解决了任何问题。在接下来的12周内继续收集数据，此时大多数任务已经完成。我们收集了自我报告的时间，用于生成每个注释以评估生产率。时间被绘制为图2中前1700个注释的日期的函数。可以看出，在项目开始时忽略了一些异常值，注释时间从20分钟的模式中适度减少。前100天，其余时间为15分钟的模式，足以让3首完全听完普通歌曲，长度为4:21。平均注释时间也从21分钟下降到17分钟。早期的分析显示歌曲的长度与其注释时间之间略有相关性。 标注格式和过程修改在每次新任务之后，我们征求注释者的反馈意见，了解注释格式和程序中的弱点或含糊之处。大多数问题在定期小组会议上得到解决和解决，我们也在那里计划并商定词汇量。反馈导致引入新的启发式方法（例如，我们建立了一种偏好，即使在拾取器存在的情况下，分段边界也会下降。在一个案例中，反馈导致了格式的重大修订。我们最初使用[10]描述的“V1”和“V2”标记在较短的时间尺度上隐含地编码音乐相似性。然而，注释者发现在两个时间尺度上明确地描述结构在概念上更简单和更快。切换器对注释器感到满意，随后的注释也有更多信息。 结果在本节中，我们将报告所收集数据的某些属性，包括标注人员之间的一致协议。对于大规模分析，每个注释的平均段数为11.3，其中一半的分析具有8到14个段。对于小规模分析，这些数字为38.4，在20和49之间。平均而言，每个注释有4.0个独特的大型标签和7.2个独特的小型标签。从用于比较两个注释（在[12]中定义的）的各种度量中，我们估计了成对f-measure，边界f-measure和Rand指数。通过观察一组边界与另一组边界匹配的精度和召回来找到边界f-度量。如果边界位于彼此的某个容差窗口（0.5或3秒）内，则边界匹配。成对fmeasure将一个描述中具有相同标签的所有帧对视为一组相似关系，其他描述以一定的精度和回忆检索。Rand索引是类似的，除了它还标识在一个描述中具有不同标签的帧对在另一个中具有不同的标签。表3中报告了974对注释之间的协议。 每个注释都描述了两个细节层次的音乐相似度，两者都应被视为有效描述。为了比较两个注释，我们可以仅比较大尺度标签或仅比较小尺度标签，但我们也可以找到所有对的相似性（包括从小到大和从大到小）并取最大值 相似性来估计标注者之间的一致性。这将使我们能够识别注释者关注不同时间尺度的情况。如表3所示，大规模标签之间的一致性（成对f = 0.76，Rand= 0.79）与小规模标签之间的一致（成对f = 0.69，Rand= 0.81），并且找到的平均最佳匹配是 略高于每一个（成对f = 0.81，Rand= 0.87）。为了比较，[8]报告了来自TUT集的30首歌曲的测试集上的成对f为0.89，并且[1] 0 25 50 75 100 0 100 200 300 400注释时间，以分钟为单位在项目开始日期之后完成的时间。在20首歌曲的测试集上的边界f度为0.91（使用0.75秒阈值）。该协议未被发现在很大程度上取决于该类型。这是合理的，因为这里考虑的每个广泛的类型都非常多样化，包含一些简单和复杂的部分。例如，流行的流派包括直截了当的流行音乐和更难以注释的渐进摇滚; 同样，虽然很多世界音乐对注释者构成了挑战，但像克莱兹默和凯尔特音乐这样的子类可以在结构上直截了当。我们在RWC数据集中复制了97个记录的注释。RWC注释通过向函数标签添加字母（例如，“诗歌A”，“诗歌B”等）来区分相似且相同的部分重复。我们创建了两个版本的RWC标签，一个保留，一个忽略其他字母标签。将这些与大规模和小规模的SALAMI注释进行比较，显示出适度的一致性（见表4）。除Rand指数外，结果表明，大规模SALAMI分析与RWC注释比小规模分析更相似。 结论SALAMI测试集有超过2400个注释，描述了近1400种音乐的正式结构，来自各种类型，包括流行音乐，爵士音乐，古典音乐和世界音乐。该组可用于未来的各种研究：例如，关于音乐的表面特征与音乐形式的感知之间的关系，或者正式风格与诸如艺术家，流派和原产地之类的音乐参数之间的关联。很快我们的网站就可以获得测试数据和数十万计算结构描述[11]。虽然语料库的价值最终将取决于研究人员对其的使用，但SALAMI测试集中信息的数量和丰富程度应该使其对音乐学家和音乐信息检索研究人员都具有吸引力。","tags":[{"name":"music generation","slug":"music-generation","permalink":"http://ldzhangyx.github.io/tags/music-generation/"},{"name":"dataset","slug":"dataset","permalink":"http://ldzhangyx.github.io/tags/dataset/"},{"name":"data","slug":"data","permalink":"http://ldzhangyx.github.io/tags/data/"}]},{"title":"SLURM快速上手使用指南","date":"2019-07-08T07:53:23.000Z","path":"2019/07/08/slurm-quickstart/","text":"学校的HPC计算资源通过SLURM进行管理。为了方便我进行配置，我决定整理一个快速上手指南。 连接服务器推荐使用MobaXTerm进行连接。MobaXTerm不仅可以进行连接，对目录还做了可视化处理，因此可以对文件进行方便的操作。 1ssh &lt;YourID&gt;@hpc.xxxxx.edu 输入密码后成功连接服务器。 几个常用命令moduleSLURM上一般有一些预先配置好的库可以使用。 module list: 查看目前存在的模块 module avail: 查看可以安装的模块 module purge: 移除当前所有模块 module load XXX: 加载XXX模块 模块的加载工作一般直接写在下文提到的脚本里。我自己常用的模块一般就是anaconda/5.2.0和各个版本的cuda，cudnn对环境进行配置。 sbatchsbatch有两种用法。你可以在sbatch命令后直接显式指定你的job要求，比如索取1个CPU，使用4小时，也可以将配置写在脚本文件里（推荐）。格式直接就是： 1sbatch xxx.sh 之后会收到服务器返回的job id。 scontrol可以使用scontrol查看job情况。 1scontrol show &lt;job id&gt; 会返回这个job的所有状态。 sview输入这个命令可以打开一个新窗口，监控集群结点上所有任务的情况。 配置重点运行和提交一个新任务，只需要做两件事： 准备并上传代码文件 编写并运行sh脚本 下面分两种情况进行讨论。 运行任务（py文件）这种情况意味着你只想得到结果，观察输出。 上传代码文件。 编写sh脚本。sh脚本的基本格式如下： 1234567891011#!/bin/bash#SBATCH --mail-user=#SBATCH --mail-type=ALL#SBATCH --nodes=1#SBATCH --ntasks-per-node=1#SBATCH --time=1-01:10:00#SBATCH --mem=200G#SBATCH --output=Job.%j.out#SBATCH --error=Job.%j.err#SBATCH --account=testuser#SBATCH --partition=debug 文件中的配置部分。—mail-type=代表指定状态发生时，发送邮件通知，有效种类为（NONE, BEGIN, END, FAIL, REQUEUE, ALL）；—mail-user=代表发送给对应邮箱。更多的参数我没有仔细研究，读者可以因地制宜进行控制。 123module purgemodule load anaconda3/5.2.0python &lt; xxx.py 加载模块，运行脚本。 运行任务（Jupyter Notebook）这种情况比较复杂，因为你需要保持一个状态，进行操作。 上传代码文件（或者不传，之后新建notebook）。 编写sh脚本。sh脚本的格式如下： 12345678#!/bin/bash#SBATCH -p serial#SBATCH -n1#SBATCH -N1#SBATCH -t 01:00:00#SBATCH --mem=4GB#SBATCH --job-name jupyter#SBATCH --output jupyter-log-%J.txt 上面对各个资源进行了配置。n代表任务数量。#SBATCH指令的意义可以查看参考链接5，以及官方文档。 12module purgemodule load anaconda3/5.2.0 对必要的模块进行加载。 1234567891011XDG_RUNTIME_DIR=&quot;&quot;ipnport=$(shuf -i8000-9999 -n1)ipnip=$(hostname -i)echo -e &quot;\\n&quot;echo &quot; Paste ssh command in a terminal on local host (i.e., laptop)&quot;echo &quot; ------------------------------------------------------------&quot;echo -e &quot; ssh -N -L $ipnport:$ipnip:$ipnport $USER@hpc.shanghai.nyu.edu\\n&quot;echo &quot; Open this address in a browser on local host; see token below&quot;echo &quot; ------------------------------------------------------------&quot;echo -e &quot; localhost:$ipnport 输出提示信息，方便之后进行通道搭建。 1jupyter-notebook --no-browser --port=$ipnport --ip=$ipnip 运行jupyter notebook。 运行之后，新开一个local terminal，输入以下命令，为本地localhost与服务器之间建立一个隧道。 我们假设第二步的输出提示是： 1234567Paste ssh command in a terminal on local host (i.e., laptop)------------------------------------------------------------ssh -N -L 8896:xx.xxx.xx.xx:8896 &lt;yourID&gt;@hpc.xxx.eduOpen this address in a browser on local host; see token below------------------------------------------------------------localhost:8896 那么直接运行指令，建立隧道： 1ssh -N -L 8896:xx.xxx.xx.xx:8896 &lt;yourID&gt;@hpc.xxx.edu 在本地浏览器上进入下面网址，输入token，开始工作。 1localhost:8896 相关资料 https://github.com/PDC-support/jupyter-notebook/blob/master/0-setup.ipynb https://www.youtube.com/watch?v=U42qlYkzP9k&amp;feature=player_embedded https://github.com/michael-qi/nyush_hpc https://wikis.nyu.edu/pages/viewpage.action?spaceKey=NYUShanghaiITS&amp;title=NYU+Shanghai+HPC+cluster+Environment http://hpc.pku.edu.cn/guide_sbatch.html","tags":[{"name":"SLURM","slug":"SLURM","permalink":"http://ldzhangyx.github.io/tags/SLURM/"},{"name":"HPC","slug":"HPC","permalink":"http://ldzhangyx.github.io/tags/HPC/"}]},{"title":"《Ordered Neurons： Integrating Tree Structures into Recurrent Neural Networks》阅读笔记","date":"2019-07-03T06:38:11.000Z","path":"2019/07/03/on-lstm/","text":"Ordered Neurons是ICLR 2019的The best paper之一。知乎上对这篇论文也有诸多讨论。本文主要探讨ON-LSTM在结构上的构建和分析，为我之后要做的音乐结构分析做一些准备。 ON-LSTM用一句话来概括这篇论文的核心思想，那就是：重新设计了LSTM中，历史信息的融合更新策略，使其能够显式地分层融合历史信息和当前信息。为了分层地融合信息，本文也设计了一个方法估计信息的层级，之后也利用层级，推导出了序列信息的树状结构。 普通的LSTM首先回忆一个普通的LSTM： LSTM Cell结构 从结构图从左往右依次有三个sigmoid模块：第一个sigmoid是遗忘门，输出一个值，决定$c_{t-1}$应该被遗忘的比例： f_{t} = \\sigma( W_{f} x_{t} + U_{f} h_{t - 1} + b_{f}）第二个sigmoid是输入门，输出一个值，决定输入$x_t$应该多大程度影响到$h_{t-1}$： o_{t} = \\sigma( W_{o} x_{t} + U_{o} h_{t - 1} + b_{o})\\hat{c}_t = \\tanh ( W_{c} x_{t} + U_{c} h_{t - 1} + b_{c})接下来是融合的过程。遗忘门决定了$c_{t-1}$的遗忘程度，输入门处理了输入，用点加的方式将两个向量进行融合： c_{t} = f_{t} \\circ c_{t - 1} + i_{t} \\circ \\hat{c}_t第三个sigmoid是输出门，将$h_{t-1}$的结果与更新后的$c_t$进行综合考虑，进行输出。这里得到的$h_t$同时也就直接是这个时刻的output，也就是$y_t$： o_{t} = \\sigma ( W_{o} x_{t} + U_{o} h_{t - 1} + b_{o})h_{t} = o_{t} \\circ \\tanh ( c_{t} )ON-LSTM我们注意到，在融合的过程中（也就是点加的过程中），过去的信息、输入的信息、融合的信息，这些向量都是无序排列的。ON-LSTM的总体思想，是将$c_t$，也就是LSTM Cell的状态，赋予了三个层次。向量中，层次比较低的位置，更新比较频繁；层次比较高的位置，更新比较不频繁，这样可以更多地保留一些高层、远程的信息。 ON-LSTM具体是怎么做的呢？ 假设我们有两个函数，可以在更新$c_t$前，预测出历史信息的层级$d_f$和当前输入的层级$d_i$： d_f = F_1(x_t, h_{t-1})f_i = F_2(x_t, h_{t-1})新建一个空白的$c_t$，大致分为三个层级进行填充，三个层级的两个分界线，由$d_f$和$d_i$决定。现在分为两个情况： 当前输入$x_t$的层级高于历史记录$h_{t-1}$的层级，那么$c_t$中，层次高于$d_i$的部分，保持$c_{t-1}$不变，层次低于$d_f$的部分，被当前输入的$\\hat{c}_t$直接覆盖，而两个分界线中间的部分，使用点加的方式正常融合： 当前输入$x_t$的层级低于历史记录$h_{t-1}$的层级，那么高层仍然保留，底层仍然用$\\hat{c}_t$直接覆盖，而分界线中层的位置直接置0： 这就是ON—LSTM做出的重要更改。高层信息就可能保留相当长的距离（因为高层直接复制历史信息，导致历史信息可能不断被复制而不改变），而低层信息在每一步输入时都可能被更新（因为低层直接复制输入，而输入是不断改变的），所以就通过信息分级来嵌入了层级结构。更通俗地说就是分组更新，更高的组信息传得更远（跨度更大），更低的组跨度更小，这些不同的跨度就形成了输入序列的层级结构。 这里隐含了一个规律。因为我们总是遗忘$d_f$以下的所有内容，记住$d_i$以上的所有内容，所以，每当我们想更新或者擦除高层次的内容时，我们必定擦除或更新了更低层次的内容。这个结论是非常容易推理出来的。 无监督树结构的生成给定一个预训练好的ON-LSTM模型，输入一个序列${x_t}$，可以得到每一个LSTM Cell在融合时计算出来的历史信息结构的层级序列${d_f}$。找到层级最大值的下标，以它为分界线，将左右两个子序列分开，然后递归地重复这个步骤。 具体的论文细节在这里不详细描述了。 实验实验分为四个task：语言建模，无监督依赖解析，针对性的句法评估，逻辑推理。笔记只关注语言建模部分。因为只有这个task在音乐界才有公认的数据集。 Language ModelingLanguage Modeling通过测量PTB的困惑度（ppl）评估我们的模型。 模型使用三层ON-LSTM，hidden unit有1150个，embedding size为400。对于master gates，缩小因子C=10. Embedding dropout为(0.5, 0.3, 0.45, 0.1)。current matrics使用了0.45的weight dropout。 同等状态下ON-LSTM表现优于普通LSTM，值得注意的是，不需要增加skip connection或者是大量增加参数。 见解和感想树状结构在各个topic都是有用的。将树状结构引入神经网络语言模型可能会带来一些这样的好处： 可以得到语言的分层表示； 可以建模语言的组分效应（compositional effects）； 可以提供反向求导的捷径，帮助解决长期依赖的问题； 一个更好的归纳偏置，从而降低训练数据的要求，提高泛化能力。 在音乐领域，得到一个音乐片段的结构也是非常有用的。 知乎上面相关的讨论，我比较感兴趣的是一个现象。这样训练的Language Model同时对语法和语义进行了建模，所以对于语义不行而完全符合语法的句子，LSTM的得分也会较低。那么这样得出来的无监督树结构到底是语法的树表达，还是语义的树表达呢？ 这里有一个猜测，ON-LSTM用于树结构生成时，使用了三层ON-LSTM中第二层的历史层级序列，可能暗含一个现象：模型的第一层LSTM偏句法，第二层偏语义。这个问题被ELMo (Peters et al., 2018)和Liu et al. (2019)从不同的角度得出过一些可以参考的见解。 论文引用链这篇文章有两篇前置文章，分别是： Neural Language Modeling by Jointly Learning Syntax and Lexicon, ICLR 2018 这篇文章提出了PRPN模型，将类似的距离——树结构信息用在了这个模型。 Straight to the Tree: Constituency Parsing with Neural Syntactic Distance, ACL 2018 这篇文章正式提出了衡量两个节点之间距离的概念，并且提出了将距离与二叉树进行相互转换的算法。 这篇文章后面被这些文章引用： Unsupervised Recurrent Neural Network Grammars, NAACL 2019 这篇文章通过一个VAE的类似结构，将树结构作为latent information传递。然而算法无监督，论文使用了变分推理以及Inside算法，推导出可能的语法树，而生成模型是一个RNNG，输入语法树，使用句子本身作为监督信号。更详细的讲解可以看这里：https://zhuanlan.zhihu.com/p/64032803 An Imitation Learning Approach to Unsupervised Parsing, ACL 2019（最佳短文章提名） 这个模型将PRPN的知识转移到了Tree-LSTM模型上，然后通过Gumbel-Softmax training将任务转换到语义导向上来。 参考文献 苏剑林. (2019, May 28). 《ON-LSTM：用有序神经元表达层次结构 》[Blog post]. Retrieved from https://kexue.fm/archives/6621 知乎. 如何评价ICLR 2019 best paper: Ordered Neurons? https://www.zhihu.com/question/323190069 https://arxiv.org/abs/1810.09536","tags":[{"name":"music generation","slug":"music-generation","permalink":"http://ldzhangyx.github.io/tags/music-generation/"},{"name":"自然语言处理","slug":"自然语言处理","permalink":"http://ldzhangyx.github.io/tags/自然语言处理/"},{"name":"NLG","slug":"NLG","permalink":"http://ldzhangyx.github.io/tags/NLG/"},{"name":"NLP","slug":"NLP","permalink":"http://ldzhangyx.github.io/tags/NLP/"}]},{"title":"PyTorch工程中，提升代码体验的几点想法","date":"2019-07-02T09:14:22.382Z","path":"2019/07/02/python-init/","text":"提及PyTorch的代码写作，我没有找到一个大家约定俗成的规约。我自己遵循了一些能让Python代码更具有可读性和持续开发的规则，现记录如下。 保持工程的模块化一个我认为整洁的项目应该遵循这样的结构，现在我以一个Encoder-Decoder框架为例进行描述。 123456789101112131415161718192021222324'''The structure of my project.'''+--data|--+log|--+dataset| | +--train.txt| | +--test.txt+--model| +--__init__.py| +--encoder.py| +--decoder.py| +--(model_name).py| +--highway.py| ...+--utils| +--__init__.py| +--batch_loader.py| +--parameters.py| +--functional.py| ...+--README.md+--LICENSE+--test.py+--train.py 在data文件夹里，放置数据集和模型，以及log输出；在model文件夹里，将模型尽可能模块化，并用一个顶层模块将子模块组合起来。这个顶层模块要实现训练与测试的类方法。在utils里放置参数列表文件，小工具，以及对数据预处理的文件。（我曾见过有用Jupyter Notebook进行可视化的数据清理的做法）如果要开源，请加入README.md和LICENSE，一般我会选择GPL v3的License。在test.py和train.py里实例化模型，进行训练和测试。 一个可以参照的GitHub开源项目可以点这里：https://github.com/kefirski/pytorch_RVAE 写一个好的注释Google曾经发布过一个代码风格指南，里面详细地介绍了Python代码应当遵循的有用的规范。在里面的函数一节里，就提及了注释的规范。 对于文档注释，文档字符串是包, 模块, 类或函数里的第一个语句。这些字符串可以通过对象的doc成员被自动提取, 并且被pydoc所用。根据PEP-257(这也是一个非常有名的指南)，文档字符串使用的注释风格应当是成对的三个双引号。 格式： 12345678910111213141516def Add(arg_1, arg_2): \"\"\"Add two numbers. There should be some details if needed. Args: arg_1: The first number to be added. arg_2: The second number to be added. Returns: A number. Raises: ... \"\"\" pass 如果是书写一个类，那么在类声明的下一行应该对其所有的类成员Attributes做出解释。 在容易混淆的函数声明中使用类型约束这是一点个人的看法。PEP-484文档对类型约束提出了规范。在必要的时候使用类型约束能让我在运行之前就能发现一些问题。 不加类型约束：12def greetings(name_list): ... 加入类型约束：12def greetings(name_list: List(str)) -&gt; str: ... 使用数据类装饰器（Python 3.7特性）在使用数据类的时候（比如我的parameters.py中的Parameters类）（根据我的个人习惯，我会将文件名全部小写，但是类会大写首字母），遵循这一条会让可读性有一定提升。PEP-557规定了相关规则。 顺带一提，建议工程中所有的类都显式继承object类或者nn.Module类。 原版代码：1234class MyClass(object): def __init__(self, a, b): self.a = a self.b = b 使用类装饰器：1234@dataclassclass MyClass(object): a: str b: str 这个类越是数据类，好处越明显。而且这个装饰器还会自动地帮助你实现一些魔术方法。 使用新的Super方法调用在我们初始化一个神经网络模块的时候，这样的代码在开源代码中十分常见： 1234class Model(nn.Module): def __init__(self): super(Model, self).__init__() ... 但是这个超类方法可以被下列写法完全替代：1234class Model(nn.Module): def __init__(self): super().__init__() ... 推荐使用。 使用__init__.py文件这个文件的作用是将文件夹变为一个Python模块。Python 中的每个模块的包中，都有__init__.py 文件。 通常__init__.py 文件为空，但是我们还可以为它增加其他的功能。我们在导入一个包时，实际上是导入了它的__init__.py文件。这样我们可以在__init__.py文件中批量导入我们所需要的模块，而不再需要一个一个的导入。 这样做在写代码时有个额外的好处：在Visual Studio Code等编辑器中，编辑器能够进行智能提示和自动补全。 在必要的时候使用assertassert是一个不怎么被提起的功能，然而我在实际使用中感受到assert可以帮助我们进行debug。一般来说，我进行debug最常用的方法是进行单步调试，在关键的地方打断点，观察变量列表；然而断点的机制决定了它并不是持久化的debug策略，我们在与其他人协作写代码的时候，也无法提醒其重点关注和检查哪些问题。 用于持久化进行测试的常见方法一般是将需要观察的变量进行print输出，然后观察output控制台。然而print函数在debug过程中可是要去掉的。所以assert函数可以在关键的地方对变量进行检查。通过这种检查，函数的功能得以保证，且无需添加if，避免了过深的隐蔽bug；此外，assert语句可以提醒其他的阅读这段代码的人：这个地方的变量应当满足什么要求，是怎么样的一个变量。 持续更新中","tags":[{"name":"PyTorch","slug":"PyTorch","permalink":"http://ldzhangyx.github.io/tags/PyTorch/"},{"name":"Python","slug":"Python","permalink":"http://ldzhangyx.github.io/tags/Python/"},{"name":"软件工程","slug":"软件工程","permalink":"http://ldzhangyx.github.io/tags/软件工程/"}]},{"title":"之后几年里想做的研究（非正式Research Proposal）","date":"2019-03-31T12:01:10.000Z","path":"2019/03/31/research-proposal/","text":"The area I am passionate about is computational creativity[1]. It includes story generation, message generation, and even music generation. I want to endow machines with creative behaviors, and, I am doing good at music generation, indeed. About generation model, there are several questions. Is that useful? My answer is yes. We have lots of ideas, but it is difficult to transform ideas to artworks. Most of us only have the abilities to finish a draft. If it can be controlled, then models can be used to assist people do creative task like writing and composition. How can we control the model? Some approaches can be applied. The first is to control input.[2] FAIR developed a model to generate stories from tags and topic words[3]. Hierarchical attention mechanism is used in this model. By controlling the input, they can create different kinds of stories. The second way is to control structure. Skeleton model is used to keep generated narrative consistent[4]. They set a structure via reinforcement learning and generate stories progressively, to keep articles fluent and can be read. What is the main difficulty? We lack data. However, we can solve the problem by designing training methods. CocoNet is used to generate J.S. Bach’s chorales[5]. In the beginning, they have only 306 pieces of artworks. But they tried to erase different parts and let the model recover them, and then erase again. During this period, the model can gradually learn composition skills We lack benchmarks. Now most generative models are evaluated manually. We can quantify the content of the assessment and achieve results similar to human assessment in mathematical form. A good example is VMO analysis, which can discover the hierarchy of music clips and analyze the logic of music. We lack good learning target. In my opinion, traditional seq2seq model uses cross-entropy loss, which limits probabilities. My idea is that, we can analyze features, like consistency and local circulation, to train a discriminative model, like GAN. Structure design is difficult. Skeleton model applied reinforcement learning, but I have a better idea – use meta-learning techniques. Learning to teach models[6] is my current research topic at Microsoft. Meta-learning can help us decide hypothesis space[7]. Maybe we can use this method to control the structure of artworks. Your ideas? Generate models hierarchically, but use meta-learning techniques as assistance, to make generated results controllable. Graph Convolutional Network should be applied to used to make the text logical. Knowledge graph include prior knowledge in the network structure, and graph embedding allows embedding results to contain information about the knowledge graph[8]. References[1] Colton, S., Charnley, J. W., &amp; Pease, A. (2011, April). Computational Creativity Theory: The FACE and IDEA Descriptive Models. In ICCC (pp. 90-95).[2] Briot, J. P., &amp; Pachet, F. (2017). Music generation by deep learning-challenges and directions. arXiv preprint arXiv:1712.04371.[3] Fan, A., Lewis, M., &amp; Dauphin, Y. (2018). Hierarchical neural story generation. arXiv preprint arXiv:1805.04833.[4] Xu, J., Zhang, Y., Zeng, Q., Ren, X., Cai, X., &amp; Sun, X. (2018). A skeleton-based model for promoting coherence among sentences in narrative story generation. arXiv preprint arXiv:1808.06945.[5] Huang, C. Z. A., Cooijmans, T., Roberts, A., Courville, A., &amp; Eck, D. (2019). Counterpoint by convolution. arXiv preprint arXiv:1903.07227.[6] Fan, Y., Tian, F., Qin, T., Li, X. Y., &amp; Liu, T. Y. (2018). Learning to teach. arXiv preprint arXiv:1805.03643.[7] Han, B., Yao, Q., Yu, X., Niu, G., Xu, M., Hu, W., … &amp; Sugiyama, M. (2018). Co-teaching: Robust training of deep neural networks with extremely noisy labels. In Advances in Neural Information Processing Systems (pp. 8536-8546).[8] Liu, W., Wang, Z., Liu, X., Zeng, N., Liu, Y., &amp; Alsaadi, F. E. (2017). A survey of deep neural network architectures and their applications. Neurocomputing, 234, 11-26.","tags":[{"name":"music generation","slug":"music-generation","permalink":"http://ldzhangyx.github.io/tags/music-generation/"},{"name":"NLG","slug":"NLG","permalink":"http://ldzhangyx.github.io/tags/NLG/"},{"name":"个人想法","slug":"个人想法","permalink":"http://ldzhangyx.github.io/tags/个人想法/"},{"name":"machine learning","slug":"machine-learning","permalink":"http://ldzhangyx.github.io/tags/machine-learning/"},{"name":"Master","slug":"Master","permalink":"http://ldzhangyx.github.io/tags/Master/"}]},{"title":"music21配置与使用","date":"2019-03-25T14:44:04.000Z","path":"2019/03/25/music21/","text":"一篇讲述music21使用时可能会出现的问题的解决方案。 环境： Windows 10 Python 3.6 Anaconda 安装安装不用细说，如果安装不上的话可以考虑开发环境问题，另外配一个开发环境问题可能得解。亲测Anaconda + Python 3.6环境是没有问题的。 环境变量配置请先安装MuseScore 3，然后这样在代码中加上这几行。 123us = music21.environment.UserSettings()us[&apos;musescoreDirectPNGPath&apos;] = r&quot;C:\\Program Files\\MuseScore 3\\bin\\MuseScore3.exe&quot;us[&apos;musicxmlPath&apos;] = r&quot;C:\\Program Files\\MuseScore 3\\bin\\MuseScore3.exe&quot; 播放midi文件12file = music21.converter.parse(\"music.mid\")midi.realtime.StreamPlayer(file).play() 展示乐谱配置好环境变量之后，你可能会遇到这个问题： 1SubConverterFileIOException: png file of xml not found. Or file &gt;999 pages? 请将你的代码改写成这个样子： 1file.show('musicxml') 当参数设置为musicxml，且环境变量正确，则乐谱可以正常显示。","tags":[{"name":"音乐生成","slug":"音乐生成","permalink":"http://ldzhangyx.github.io/tags/音乐生成/"},{"name":"python","slug":"python","permalink":"http://ldzhangyx.github.io/tags/python/"}]},{"title":"个人向RSS订阅列表，以及极简RSS配置指南","date":"2019-02-18T05:10:02.000Z","path":"2019/02/18/rss-recommend/","text":"这份订阅列表是微软学生俱乐部一个不完全个人网站清单。 订阅列表 张逸霄的技术小站 ldzhangyx.github.io 主题：音乐生成，自然语言处理 也就是我的个人网站，不定期更新有趣的论文笔记和想法。 LeoJhon.Song’s Blog leojhonsong.github.io/zh-CN 主题：技巧和个人心得 宋铸恒的博客，本身水平不错，博客质量也比较高。 … RSS配置指南订阅他人的RSS 检查此博客支不支持RSS订阅 最简单的检查方式是，访问atom.xml子页面。比如说我的网站，可以访问ldzhangyx.github.io/atom.xml页面来查看。如果没有这个网页，那就是没有RSS订阅。 安装chrome插件 我自己用的是Feeder，很好用。 添加网址到插件订阅列表里 配置RSS npm安装hexo-generator-feed 网址在这里：https://github.com/hexojs/hexo-generator-feed 按照上面网页的指引，在根目录的_config.yml添加RSS项。 在当前主题的_config.yml添加RSS列，用于显示RSS图标。 1rss: &quot;/atom.xml&quot;","tags":[{"name":"RSS","slug":"RSS","permalink":"http://ldzhangyx.github.io/tags/RSS/"}]},{"title":"《Interactive Arrangement of Chords and Melodies Based on a Tree-Structured Generative Model》论文笔记","date":"2019-01-22T07:13:00.000Z","path":"2019/01/22/tree-music/","text":"京都大学这篇论文很有意思，是ISMIR 2017年同款论文《Function- and Rhythm-Aware Melody Harmonization Based on Tree-Structured Parsing and Split-Merge Sampling of Chord Sequences》的交互版本。基本理论都是一致的，建立了一个PCFG的统计模型。这篇文章我会两个都提到。 摘要本文提出了一个harmonization方法。给定一个旋律（音符序列），输出一系列和弦符号。典型的方式使用了HMM，但不能明确表现节奏、和弦结构、和弦功能。所以本文提出了一个分层生成模型，包括： PCFG生成和弦 韵律（metrical）马尔可夫模型生成节奏（强弱关系，同时也是和弦边界） 在和弦条件下的马尔可夫旋律生成 为了估计给定旋律的可变长度和弦序列，作者使用了具有分裂、合并操作的Metropolis-Hastings采样器迭代地细化潜在树结构和和弦符号和节奏。实验结果表明，该方法在预测能力方面优于基于HMM的方法。 Introduction和弦序列的创建在音乐构成和排列中起关键作用，因为和声影响音乐的情绪并且表征某种音乐风格的印象。我们的目标是自动旋律协调，或为给定旋律（一系列音符）自动生成一系列和弦符号。在本文中，我们将注意力集中在流行音乐风格的协调问题上。我们采用统计方法自动学习音乐语料库中的模型架构和参数，并根据数据的风格进行协调，而不是手动描述爵士乐和古典音乐等风格的音乐理论。我们制定了一个概率模型，表示和弦序列的生成可能性和另一个代表在和弦序列上有条件地产生旋律的可能性的模型。 和弦序列通常由马尔可夫模型描述。常用的方法是，使用一个有潜在马尔可夫链的HMM模型，假定旋律在这个和弦上生成。但是这个方法的缺点在于忽略了和弦的句法角色和层次结构。在传统的和声理论中，这种句法角色通常被称为调和函数，包括三类（例如，主音（tonic，第一音级），属音（dominant，第五音级）和下属音（subdominant，第四音级）），它们类似于语言学理论中的词性。 举个例子，一个和弦序列(C, Dm, G, Am, C, F, G, C)，可以被解释成：(((T, SD),(D, T)), ((T, SD), (D, T)))。因此，当我们计算地帮助人们创造新音乐时，期望考虑这种和弦序列的分层树结构。 传统HMM的另一个问题在于和弦节奏（起始分数时间或和弦持续时间）的描述。由于和弦持续时间是通过常规时间网格（例如，节拍或条形网格）上的自转移概率来描述的，因此未明确描述和弦节奏。 模型中PCFG的使用收到了Steedman工作的启发（1984年）。这个工作提出了使用上下文无关语法CFG来表示和弦的层次结构。本文研究的一个关键优势是，PCFG的规则概率和树结构可以以无监督的方式从和弦序列语料库中进行联合估计，期待和弦的句法角色被那些非终结符（non-terminal）捕获。 韵律马尔可夫模型用于明确地描述后续和弦之间，起始节拍位置的转换概率。 在这个树状分层生成模型，本文提出了一个统计的harmonization方法，基于具有split、merge操作的复杂的Metropolis-Hasting采样器。为了估计具有适合于给定旋律的和弦节奏的可变长度和弦序列，我们随机地从它们的后验分布中搜索最可能的潜在树结构，符号和和​​弦的起始时间。在这个搜索中，我们的采样器有四种类型的建议： 使用Viterbi算法的变体，更新整个latent树结构。 其中一个和弦被分开。 两个相邻的和弦根据latent树结构合并。 其中一个和弦的开始时间来回移动。 这种随机的全局或局部更新可以被解释为寻找最佳和弦序列的重复试错过程。 相关工作Harmonization（协调）Harmonization的研究有两个方向：生成和弦，或者直接生成若干个音（比如说组成和弦的四个音）。 第一个方向有这些研究： 用支持向量机（SVM）从给定旋律中选择和弦音（和弦的构成音），从和弦音构造三和弦，以及通过rule-base方法生成和弦行进。 基于HMM的方法，和弦转换由马尔可夫模型描述。该方法已在MySong中实现。 提出了类似的马尔可夫模型，其中和弦由旋律和时变键来调节。 第二个方向： 基于规则的方法，用于生成巴赫风格的四部分合唱。 使用基于音乐理论的遗传算法（GA）变体。 基于HMM的方法，该方法将和弦表示为隐藏状态，将音符表示为观察输出。 隐半马尔可夫模型（HSMM）用于明确表示和弦的持续时间。 分层树形结构模型，它通过划分和弦的符号从分层时标的角度描述和弦运动。 音乐语言建模（Music Language Modeling）根据《Generative Theory of Tonal Music》（GTTM），音符序列被假定有了分层的结构，描述了哪些音符是重要的音符。这个理论包括了一个规则，可以将音符序列递归地减少到一个音符。这个理论已经有了其计算实现。基于PCFG的GTTM概率公式已经被提出了，并且可以直接从音符序列中无监督地学习产生式。 用于和弦序列地各种语言模型，在音乐音频信号处理、音乐分析、音乐排列（Arrangement）中也被充分研究。 传统语言模型是n-gram语言模型。同时为了避免n较大带来的稀疏问题，也有平滑方法解决。Yoshii提出了一个vocabulary-free的infinity-gram模型，每个和弦取决于其可变长度的和弦历史。 也有研究引入了几个隐藏的状态转换层，代表和弦的层次结构。 一些研究明确使用了生成语法来表示和弦的层次结构。Steedman和Rohimeier提出了和弦序列的产生式（production rules）描述。之后其概率扩展也被研究，且已经进行了概率的无监督学习。 这些产生式列表和非终结符（non-terminals）是根据音乐理论和经验给出的。 概率建模用于和弦符号的PCFG通过来自和弦序列语料库的无监督学习来训练，同时估计背后的latent树结构。用于和弦节奏的韵律马尔可夫模型来自包括和弦节奏的语料库的监督学习来训练。音调序列的马尔可夫模型也通过来自旋律和和弦序列的配对数据的监督学习来训练。 模型形式化约定下面符号： 和弦总体用$z$表示.假设共有N个和弦符号，那么第n个和弦符号记为$z_n$。 和弦开始的时间总体用$\\phi$表示（16分音符为单位时间）。N个值与N个和弦一一对应，所以第n个开始时间记为$\\phi_n$。 将$x$记为旋律总体。在第n个和弦范围里，旋律序列可以用$x_n$表示。由于一个和弦可以有多个音符序列，所以其中第i个音符使用$x_{ni}$表示。 音符也需要控制其长度（确定开始时间）。将开始时间的总体记为$\\psi$。所以第n个和弦范围内的开始时间序列也记为$\\psi_n$。其中第i个音符的开始时间记为$\\psi_{ni}$。 （说实话原文表示得比这个难懂多了……剩下的表示也非常勉强） 如果每小节（measure/bar）长度为L，那么$\\phi$和$\\psi$的取值范围为$[0, 16L-1]$（以16分音符为单位长度）。 那么概率上下文无关文法（PCFG）被定义为： G = (V, \\Sigma, R, S )其中$V$为非终结符集合，$\\Sigma$为终结符集合，$R$为推导式集合，$S$为起始变量。 概率规则在这里有三种形式： A分裂为BC（不同的BC带来概率）： \\mathbf{\\theta_A} = \\{\\theta_{A\\rightarrow BC}\\}_{B,C \\in V} A转换成非终结符$\\alpha$（不同的$\\alpha$带来概率）： \\mathbf{\\eta_A} = \\{\\eta_{A\\rightarrow \\alpha}\\}_{\\alpha \\in \\Sigma} A有几率分裂，也有几率转换为终结符。将其转换为终结符地概率记为$\\lambda_A$。 韵律马尔可夫模型表述了和弦开始的时间点的转移概率： p(\\phi_n|\\phi_{n-1}) = \\pi_{\\bar{\\phi}_{n-1},\\bar{\\phi}_{n}}其中，$\\phi_n$代表第n个和弦开始的时间点，而$\\bar{\\phi}_{n} = \\phi_n \\mod 16$，且$\\pi_{ab}$代表了从beat position的转移概率（没太明白）。 最后音乐生成的马尔可夫模型，是基于和弦进行的还原。 p(x_{nm}|x_{nm-1}, z_n) = \\tau^{z_n}_{x_{nm-1}x_{nm}}这个公式决定了从一个音符跳到另一个音符的转移概率。 我们在这些PCFG的参数上施加共轭先验（先验分布=后验分布），以保证和弦不会对旋律产生冲突： \\theta_A \\sim Dirichlet(\\xi_A) \\\\ \\eta_A \\sim Dirichlet(\\zeta_A) \\\\ \\lambda_A \\sim Beta(\\iota_a)（什么玩意儿……我也不熟贝叶斯估计啊……） 三个参数均为超参数。相同地，对和弦边界的马尔可夫模型： \\pi_a \\sim Dirichlet(\\beta) \\\\ \\tau_x^z \\sim Dirichlet(\\gamma)相似地，我们也要建立一个旋律生成模型。这个旋律生成模型的边界类似于和弦的边界，但是作为协调模型，旋律作为输入进行处理。 当然也可以使用LSTM进行旋律生成： 贝叶斯学习我们通过最大后验（MAP）估计获得模型参数$\\Theta = {\\theta, \\eta, \\lambda, \\pi, \\tau}$。使用一种内部滤波-外部采样（inside-filtering-outside-sampling，2007年被提出）的算法进行Gibbs采样变体。 假设和弦序列$z$是从latent树$t$中导出的，那么$t$可以有一组非终结节点${t_{n:m}}_{1 \\leq n \\leq m \\leq N}$，其中$t_{n:m}$是根节点。这样可以导出从n到m的所有和弦$z_{n:m} = {z_n, z_{n+1}, …, z_m}$。这个latent树$t$和参数$\\theta, \\eta, \\lambda$采用条件后验分布$p(t|\\theta, \\eta, \\lambda,z)$和$p(\\theta, \\eta, \\lambda| t,z)$进行交替的采样。 这个算法可以从正确的后验分布$p(t,\\theta, \\eta, \\lambda|z)$中得到$t,\\theta, \\eta, \\lambda$这四个参数的样本。 在内部滤波阶段，我们集中于一个条件概率，从树导出和弦： p_{nm}^A = p(z_{n:m}|t_{n:m} = A)这个概率可以递归地从叶节点到根节点进行逐步计算： p_{nm}^A = \\lambda_A\\eta_A \\rightarrow z_n, \\\\ p^A_{n,n+k} = \\sum_{B,C \\in V}[(1-\\lambda_A)\\theta_{A \\rightarrow BC}\\sum_{1 \\leq l \\leq k}p^B_{n,n+l-1}p^C_{n+l,n+k}]在外部采样地步骤，我们递归地采样一个latent树，从开始符号$S$到叶节点，使用内部概率$p(t|\\theta, \\eta, \\lambda,z)$。当节点$t_{n:n+k} = A$已经被采样，那么这个节点分裂到的$B, C$可以这么采样： p(l,B,C) = p(t_{n:n+l-1} = B, t_{n+l:n+k} = C | t_{n:n+k} = A, z_{n:n+k}) \\\\ = (1-\\lambda_A)\\theta_{A \\rightarrow BC} p^B_{n,n+l-1}p^C_{n+l,n+k}/p^A_{n,n+k}其中$l$就是分裂点。 最后，采样$\\theta, \\eta, \\lambda$，根据公式： p(\\theta, \\eta, \\lambda| t,z) = p(\\theta|t,z)p(\\eta|t,z)p(\\lambda|t,z)给定： \\theta_A \\sim Dirichlet(\\xi_A + u_A) \\\\ \\eta_A \\sim Dirichlet(\\zeta_A + v_A) \\\\ \\lambda_A \\sim Beta(\\iota_a + w_A)其中，$u_{A\\rightarrow BC}(v_A \\rightarrow \\alpha)$ 是对应产生式对$t$调用的次数，而$w_{A,0}(w_{A,1})$是非终结符$A$分裂（代换为终结符）和$t$的次数。（原文如此） 马尔可夫模型的学习是通过监督学习完成的。因为Dirichlet分布和分类分布之间的共轭性，参数很容易学习到。 Harmonization问题定义给定一个旋律序列，包括音高$x$，音高开始时间序列$\\psi$，训练好的模型参数$\\Theta$，估计一个可变长度和弦序列$z$及其开始时间序列$\\phi$，以及一个latent树$t$。 Metropolis-Hasting采样使用MH采样生成$t,z,\\phi$，通过后验分布$p(t,z,\\phi|x,\\psi,\\Theta)$，基于下面四个proposals: 全局更新：更新和弦序列和latent树，保持和弦数量和开始时间不变 分裂 合并 节奏更新：移动一个和弦的开始时间 虽然使用内部滤波-外侧采样算法进行全局更新更为合适，但Viterbi算法用于后验空间的有效优化。 在MH采样中，随机选取其中一个proposal，将 s = (t,z,\\theta)转化到 s^* = (t,z,\\theta)^*计算接受率，来判断$s^*$是否接受为下一个样本： g(s^*,s) = min\\{1, \\frac{p(s^*)p(s|s^*)}{p(s)p(s^*|s)}\\}我们通过迭代MH采样足够次数来估计最合理的$z$和$\\phi$，然后获得最大化完整数据可能性的潜在变量。 更新和弦符号Viterbi算法这里执行的是全局更新：$p(t,z,\\phi|x,\\psi,\\Theta)$。 使用的并不是标准Viterbi算法，因为$t,z$都是需要估计的隐变量。 首先从最底层的和弦序列$z$，到根节点$S$递归计算内部概率： p_{nn}^A = \\lambda_A\\max_{c \\in \\Sigma}\\eta_{A \\rightarrow c}p(x_n|c)^{1/I_n}, \\\\ p^A_{n,n+k} = (1-\\lambda_A)\\max_{B,C \\in V, l \\in [1,k]}\\theta_{A \\rightarrow BC}\\sum_{1 \\leq l \\leq k}p^B_{n,n+l-1}p^C_{n+l,n+k}其中$p(x_n|c)$是第n个和弦范围里的音高概率： p(x_n|z_n) = p(x_{n1}|z_n)p(x_{n2}|x_{n1}z_n)...p(x_{nI_n}|x_{n,I_{n}-1}z_n)最可能的$t,z$通过回溯最佳路线得到。 分裂-合并操作分割操作与合并操作是相反的操作。 为了得到新状态$s^*$，在分割操作中，随机选择一个和弦$z_n$，将其分割为$z^L$和$z^R$，选择新的开始时间在$[\\phi_n + 1, \\phi_{n+1} - 1]$，同时将非终结符$t_{n:n}$分割为$t^L, T^R$。 合并操作，选择一对相邻和弦进行操作： 其中$#MergeableNodes(s^*)$指可以在这个状态里合并的和弦对的数量。 两个概率的似然比： 通过上述三个式子，可以计算$s^*$的接受率。 图为示意操作： 更新和弦节奏更新和弦节奏的前提是其他的因素都固定下来了：$p(\\phi|t,z,x,\\psi,\\Theta)$。 给出相关公式： Evaluation实验准备从SALAMI数据集（McGill公开的一个音乐标注数据集）中提取和弦序列，长度从8到32的序列被选择。和弦符号仍被分为25个大小调标记。 为了以有监督的方式训练两个马尔可夫模型，从Rock Corpus中提取了9902对旋律和对应和弦序列。 在测试阶段，使用了RWC音乐数据集，用于评估。 所有数据都被转换到C大（小）调。 评估旋律预测的能力为了根据旋律预测的能力评估PCFG分层生成模型，我们计算了从RWC音乐数据库中提取的旋律的边际似然性。 非终结符的种类数（或PCFG的复杂度）K，从1变为20。在K的每种情况下，我们通过Gibbs采样获得不同的PCFG参数，并计算每个参数集的边际似然。根据计算复杂性，不同参数集的数量在37和50之间。我们假设和弦开始与小节线完全同步，使得和弦序列在分析上被边缘化。 将所提出的模型与HMM进行比较，该HMM学习相邻单元之间的和弦符号转换，（相邻单元是）音符或小节。当最小时间单位是音符时，假设每个音符在当时的和弦符号上有条件地生成。当最小时间单位是小节时，假设伴随每个和弦的音符是根据旋律马尔可夫模型生成的。 每一个音符的边缘似然值： 评估和弦序列的预测能力与标签的比较结果见下图： 所提出的模型16.6％优于基于HMM的方法。虽然一定范围的K显示出比基于HMM的方法高得多的准确度（例如，26％），但是K与准确度的中值之间几乎没有相关性。 生成样本的讨论下图显示了具有分裂、合并操作的MH采样方法如何进行harmonization: 问题依然存在。这个方法更倾向于生成简单的和弦，原因是因为优化使用了Viterbi算法。此外，实验中得出的和弦序列数量往往不高于最初采样的初始化数量，因为拆分比合并接受率更低。 结论本文提出了一种harmonization方法，根据隐藏在流行音乐语料库中的音乐规则，为给定的旋律生成可变长度的和弦序列。实验结果表明，所提出的模型在预测能力方面优于基于HMM的方法，并且具有很大的作曲、编曲潜力。由于我们的方法基于统计学习，因此发现它更喜欢更简单和基本的和弦序列。更具体地，产生的和弦的数量倾向于小于小节的数量。这个问题可以通过为MCMC采样中的拆分操作提供更多机会来解决。为了增加所生成的和弦符号的多样性，sampling或beam search方法被认为是有效的，而不是viterbi算法——其倾向于从统计观点找到具有最高后验概率的流行和弦序列。我们还需要进一步研究我们的模型。在本文中，一个4/4拍的小节被分为16个时间单位。因此，研究最佳时间分辨率并扩展模型以处理其他拍子的音乐类型非常重要。此外，为了评估生成的和弦序列的音乐适应性，我们计划进行基于调查的听力测试，并评估我们的模型与音乐理论或音乐直觉的一致性。 （他们在2018版的确做了一个详尽的测试评估） 想法这个论文过于硬核，以至于我不知道从哪里开始说起……首先值得称道的是使用PCFG文法来表达和弦的分层结构。这个实验室这几年真是对这个idea疯狂灌水，各个顶会和期刊都灌了个遍。但是这个idea，也就是运用乐理来对和弦进行树状分析和生成，是值得称道的。 那么这篇论文最硬核和晦涩的点在于对这个层次关系树的训练。如果用替代的方法构建这棵树（比如只捕捉相邻关系），结果将会好做很多。 而且这篇论文的可读性是真的很差了…… 另外这个计算和谐程度的方法很有意思，有一点VAE的影子，从高维到低维，再还原。这样的低维流形可以用图网络去学习吗？我觉得是一个非常有趣的点。 另外， 这段时间比较忙，没有顾着更新。然后各个方面发展有些停滞不前，研究院这边的联系、申请的事情，这些都是需要操心的事。更加迷的是，最近看了那篇《Counterpoint by Convolution》，里面叙述的一个无序模型十分令人费解；还有夏老师前段时间的《A Framework for Automated Pop-song Melody Generation with Piano Accompaniment Arrangement》，也是蛮复杂的，不过后面这篇主要是叙事节奏太快，几页纸讲完了一个编曲系统，令人有些迷糊。 最近也有些新启发。前段时间入手的《完全音乐理论教程》，Laitz的那本。仔细研读这本书（当然还没读完），我对对位法写作和调性音乐有了更加深度的认识。目前我觉得，乐理肯定是复调音乐写作的钥匙。我就这个问题问过Prof. Pasquier，关于乐理在实际音乐生成中的位置，他回应说一些关键的点依旧是人工定义的。类比罗塞塔石碑，不同的语言在同一块石板上，音乐生成任务也可以借鉴乐理知识作为一个重要依据。那么音乐生成就极有意思了。目前的音乐生成实际上是分为了流行音乐和复调音乐两大块，其融合的一个点可能就是夏老师上面那篇论文，用统一的方式生成主旋律、伴奏、分解和弦。流行音乐中，如何生成和弦走向、如何确定鲜明的旋律，如何保证旋律连贯性，都是需要保证的；而复调音乐中需要考虑的也有很多，包括音程关系，对位法规则等等。这些都是值得探索的。","tags":[{"name":"音乐生成","slug":"音乐生成","permalink":"http://ldzhangyx.github.io/tags/音乐生成/"},{"name":"和声","slug":"和声","permalink":"http://ldzhangyx.github.io/tags/和声/"}]},{"title":"《The Effect of Explicit Structure Encoding of Deep Neural Networks for Symbolic Music Generation》论文笔记","date":"2018-12-26T06:17:37.000Z","path":"2018/12/26/structure-encoding-music/","text":"翻夏光宇老师论文列表时翻到的一篇文章，觉得里面的分析方法很有特点。 论文要点计算创造（Computational Creativity）是一个很好玩的领域。有一个会议名为ICCC，专门为这样的生成模型做展示。生成模型也有很多种，但是音乐生成因为其作曲结构十分复杂，使得任务相对难做一些。给定和弦行进，在约束下进行音乐生成，是这篇论文的任务。当然这个任务也可以组合进别的复杂任务中。 论文探索了一件事，那就是对音乐结构显式地进行了encoding，通过两个模型：LSTM和WaveNet，并且对效果做了对比。从Encoding的角度来看，这篇文章与XiaoIce Band的编码其实有着类似的想法，但是具体方法不一样。 这篇文章对结构的分析对我很有启发。它们使用了名为Variable Markov Oracle的分析方法分析音乐结构，这个方法能将音乐行进转换为有限状态自动机，使用Markov链描述音乐。 分析之后的结论：使用堆叠的空洞卷积曾能提高结构编码的表现，以及将和弦行进进行全局编码（global encoding）也能更好地提升表现。 Introduction论文首先聊了一下自动音乐生成的历史。神经网络给音乐生成带来了新进展，但是结构性上仍有所不足。比较成功的作曲局限于巴赫，因为其结构局部化明显，易于察觉。以前的研究提出过结构约束的技术，但是这样的约束与生成的过程有冲突，并且需要细致调参。相比之下直接将结构进行Encoding更加有意义。 论文选定了给定和弦行进的音乐生成任务。这个任务中，论文对两个结构做了系统比较：LSTM和WaveNet（空洞时序CNN，dilated temporal-CNN）。值得一提的是WaveNet在这篇论文中才第一次被用于象征域（symbolic domain）的音乐生成。就隐藏变量（hidden virables）的依赖性来看，两个结构是相似的——相对于ARMA模型和MA模型（都是统计学领域的模型）。据了解，这篇论文也是第一个进行两个结构系统性比较的论文。 象征域的音乐生成任务，有着信息量丰富的优点。在任务中，论文提出了一种创新的编码方式，将和弦与旋律进行交错表示（如图1）。这样能够高效组合不同时间尺度的和弦与旋律，使得模型能够同时学习到“过去的旋律”和“接下来两个小节的旋律”之间的时间延迟的依赖性,同时也可以学到两个小节内的和弦与旋律的同时关系。这样操作的优点在于，人们很少完全做即兴创作，几乎总是依赖于一个提前定义好的蕴含了高层音乐结构的信息（比如figured bass）。 方法问题定义对长度为$T$的音乐，给定直到时间点$t$的旋律，和全局和弦行进，目标是生成从$t$到$T$的剩余旋律。所以和弦是用作condition，在每一个step给出，最终的输出应保持旋律流，且与和弦有交互。 回头看图1，其中K是给定的内容，而P是期待输出的内容。 一个单向模型的条件概率分布可以这么定义： p(M_{T-t+1:T}|C_{1:T}) = \\prod_{i=1}^{T-t}p(m_i|m_1, ..., m_{i-1}, c_1, ..., c_i)其中$m_i$表示第$i$个step的旋律，$c_i$是第$i$个step的和弦，而$C_k$表示一直到$k$个step和和弦总体表示。 数据表示LSTM在LSTM模型中，将输入表示为向量V，V是两个向量M和C的组合： V = (M,C)拥有1*155的维度，其中0~127代表MIDI的128个音，128代表休止符，129代表holding；130~154代表25个不同的和弦，其中前12个是大调和弦，之后12个是小调和弦，而最后一个代表没有和弦。 和弦不止24个，那么将之外的和弦映射到对应的和弦，比如C7和弦映射到C和弦，Cm7和弦映射到Cm和弦。 一首长度为T的乐曲，可以分别用五线谱和矩阵表示为下图： 可以看出来数据处理以八分音符为最小的分辨率（实际模型可以使用更高的分辨率），四分音符就可以表示为八分音符，然后holding住一个八分音符时长（在双向的模型里有所区别）。我个人认为这是一个有效的表示法。其他类似的表示法是music21提供的包，也可以对音乐进行编码。 特别要指出一点，在原来的论文里没有提及，是我对作者进行询问之后得到的结论。 在单向模型里，这一个表示没有问题，但是在双向模型里，这样的表示会让输入有一些奇怪之处，比如说holding究竟是在holding哪个音。对于这个问题，作者实际处理的时候使用了回文序列（在双向模型中），即将一个这样的序列：[64,129,129,129]改成了[64,129,129,64]，以保证模型不会出现理解障碍。这样就有另一个问题了，如果这个模型短到holding不存在，即“单音序列”，这该怎么表示呢？作者使用了0.03125秒作为最小分辨率，而八分音符的时长为0.125秒，所以0.03125秒应该是32分音符的时长。作者去除了这些单音序列，保证这样的数据表示正常工作（其实我也没有完全明白，因为单音序列看起来并不会带来任何问题）。 WaveNet表示与上述相同，但是M只有128维，0代表rest，其他代表音高。这里不区分连续多音，相连的两个同样音高视为延音（为什么？）。而和弦仍然是25维。 LSTM结构两个模型，单向和双向。其中双向编码的特别之处在于将和弦完全编码进来了。编码的方式如之前所说是交叉编码，所以在i时刻之后的旋律部分置空，只留和弦部分，将这个矩阵进行编码。 LSTM结构的大致结构如下： WaveNet结构WaveNet将旋律与和弦分开编码，所以也需要分开输入。没有condition的模型公式如下（k代表第k层）： z = \\tanh(W_{f,k} * m) \\odot \\sigma(W_{g,k} * m)其中*符号代表了空洞卷积。 而加入了condition的模型公式改成了这个样子： z = \\tanh(W_{f,k} * m + V_{f,k} * c) \\odot \\sigma(W_{g,k} * m + V_{f,k} * c)上述公式的第一个*符号都代表了空洞卷积操作，而涉及到c的第二个*符号代表了一个1*1的卷积层。 空洞卷积的结构如下： WaveNet的结构如下： 训练的时候使用交叉熵，将其对比原始的音乐序列（loss函数一直是NLP生成模型的痛，因为原有的label不一定是唯一解，所以在NLP领域也出现了一些别的方法来解决生成模型多样性的问题）。 实验数据集Nottingham数据集，平移到12个大/小调，进行数据增强；速度调整为120bpm，所以4分音符对应0.5秒，而最小分辨率0.03125秒对应16分音符。 人类评估的调查问卷评分制，只要考察：旋律与和弦的交互性，旋律复杂性，旋律结构性。 验证姐u哦采用了ANOVA方法做假设检验，以及对不同的模型做了两两的t检验。 模型性能的确有着统计学显著的差异。 VMO的模式发现（Pattern Discovery）VMO，全称Variable Markov Oracle，用于分析时间序列的音乐模式。VMO可以捕捉三种连接：前向连接（forward link）、后缀连接（suffix link）、反向后缀连接（reverse suffix link）。每个时间片段t的后缀连接是给定序列的最长后缀的起始点。 相关的论文可以看《Music Pattern Discovery with Variable Markov Oracle: A Unified Approach to Symbolic and Audio Representations》。一个典型的VMO分析图可以看下图： 作者将生成的midi文件转化成了波形用于对比。采样频率44.1kHz，并且实现了short-time Frourier transform得到频谱数据。下图将频谱根据energy折成了12类音高得到的图： 频谱中前10秒是给定的开头。 作者还计算了信息率（Information Rate）得到距离阈值$\\theta$。如果两个时序的距离如果小于$\\theta$的话，将会被认为是同一个时间序列。所以过大或者过小的阈值都会影响到模式识别的结果。作者通过寻找最大的IR值来确定$\\theta$的值，如图所示： 讨论VMOVMO分析能够寻找音乐的主题片段。由于VMO分析中，阈值并不完全相同，所以显示出来的结果也会略有不同。 LSTM我们发现LSTM模型生成的音乐在重复生成模式方面具有很大的潜力。图10显示单向LSTM模型出现几次重复（蓝色框），而双向LSTM模型在时间范围内肯定会有更多的模式重复（红色框和黄色框表示）。由于它所拥有的短期记忆和我们处理的直接输入，LSTM模型揭示了捕获数据集中固有结构的自然和主动性。此外，我们注意到，与单向LSTM相比，双向LSTM产生的音乐对于变化的和弦更稳定且更敏感。下图显示了一个示例，其中顶部系统表示双向LSTM模型，底部系统表示单向LSTM模型。我们看到两种模型都可以在当前和弦之后生成音符片段（度量），单向模型无法作为整体进行和弦进行。对于双向LSTM，生成的音符序列趋向于更不稳定，平滑和音乐。这可能是因为生成过程包括即将到来的和弦作为全局结构限制。 WaveNetWaveNet能够学到一些有趣的节奏模式，下图可以看出切分被学习到了，而这个模式因为分辨率只有16分音符，所以需要长期结构才能捕捉到。这表示空洞卷积的堆叠恰好与音乐结构一致。从节奏生成的角度来看，WaveNet更适合象征域的音乐生成（对比音频），因为音频的层次结构较少。但，WaveNet同时丢失了一些结构特征。所以双向WaveNet是一个很好的idea。 结论结果表明，两个关键因素在很大程度上改善了模型性能： 一组扩张的卷积层，它们明确地编码了旋律序列的结构依赖性。 并入chordprogress作为全局结构约束。 期待作者能研究出高效可用的双向WaveNet。","tags":[{"name":"音乐生成","slug":"音乐生成","permalink":"http://ldzhangyx.github.io/tags/音乐生成/"},{"name":"WaveNet","slug":"WaveNet","permalink":"http://ldzhangyx.github.io/tags/WaveNet/"},{"name":"VMO","slug":"VMO","permalink":"http://ldzhangyx.github.io/tags/VMO/"},{"name":"deep learning","slug":"deep-learning","permalink":"http://ldzhangyx.github.io/tags/deep-learning/"}]},{"title":"最近想读的一些论文","date":"2018-12-25T09:36:17.000Z","path":"2018/12/25/recent/","text":"一篇很随便的随记。 音乐生成首先说一句，音乐生成这个方向我现在正在写一篇论文笔记。这篇论文不怎么出名，但是可以表明一个方向。伴随这篇论文笔记，我还会重新系统阐述一些Python与音乐生成方向的常用处理方法，比如pretty-midi，music21等这样的库，以及数据增强和预处理的一般方法套路。 自然语言处理这个方向我的论文阅读比较自由，因为最近实习做的内容其实与NLP没有特别大的关系。 第一篇是关于图网络的综述。《Deep Learning on Graphs: A Survey》，对图网络的发展做了一个比较详细的阐述。 第二篇是《From Recognition to Cognition: Visual Commonsense Reasoning》，提出了一个常识推理数据集。相关方向我不打算深入，仅仅是去做个了解，明白常识推理在NLP各个领域的现状。","tags":[{"name":"心得体会","slug":"心得体会","permalink":"http://ldzhangyx.github.io/tags/心得体会/"}]},{"title":"我将UESTC加入到了CSRankings的列表里","date":"2018-12-18T05:54:38.000Z","path":"2018/12/18/csrankings-uestc/","text":"如同字面意思，我之前添加UESTC到CSRankings的Pull Request已经被Merge到主分支了。http://csrankings.org 我为什么要这么做CSRankings本身就是一个非常流行的科研排名。我很高兴能在这样一个排名里做出贡献，帮助国内和国外的同行对这个行业的科研水准有更准确的认识。这包括，对中国科研整体水准的认识；对我的母校电子科大的科研水准有更高的估计。 虽然现在CSRankings的评价基准是各大顶会的论文数量，固然因为人海因素导致院校之间的平均水准得不到有效的评估；但另一方面，这个排名又非常纯粹，并且详细到了每一个教授。这样的排名是客观的、不掺杂主观因素的清流榜单。 这个排名上，我国的很多高校都没有出现，如果想和我一样补完这个榜单的话，可以看下一节。 我做了什么首先，我找到了他们的GitHub页面。 然后我提交了一个pull resuest，将UESTC加入了机构名单；同时将计算机学院的大部分博导加入了名单。根据要求，这个排名里只能收录博导。 最后等待大约一周，即可被merge。这期间会有修改要求，只要按照建议修改即可。 我之后会怎么做我写了这篇文章，希望能被更多人看到，然后意识到CSRankings的价值，以及增添PR上自己学校的动力。我之后会持续增加、补全计算机学院的教授们。","tags":[]},{"title":"使用statsmodels库做线性回归的指南","date":"2018-12-18T03:16:59.000Z","path":"2018/12/18/ols/","text":"本文是一个简化的实践指南。阅读完这篇文章之后，你将可以快速使用statsmodels库进行最小二乘回归。 线性回归模型对于一元线性回归，其回归模型是： Y = \\beta_0 + \\beta_1X_1其回归系数应为： $\\beta_0, \\beta_1$ 对于多元线性回归，其回归模型是： Y = \\beta_0 + \\beta_1X_1 + \\beta_2X_2 + ... + \\beta_nX_n其回归系数应为： $\\beta_0, \\beta_1, \\beta_2, …, \\beta_n$ 其中$\\beta_0$为常数项。 代码实现和解释1class statsmodels.regression.linear_model.OLS(endog, exog=None, missing='none', hasconst=None, **kwargs) 我们使用statsmodels的OLS类进行初始化，其重要参数是前两个。 endog —— 因变量exog —— 自变量 注意如果要实现多元线性回归的话，那么其输入应该是一个这样的矩阵： \\begin{matrix} 1 & x_{11} & x_{m1} \\\\ ... & ... & ... \\\\ 1 & x_{1n} & x_{mn} \\end{matrix}这里要注意两点： OLS类默认不提供常数项，所以需要手动添加一列常数项。statsmodels提供了方便地添加常数项的方法。 每一列都是一个自变量。所以可以使用这样的方法进行拼接： 12345678910111213141516171819202122232425262728293031# 假设数据以list的方法输入import numpy as npimport statsmodels.api as sm# 自变量x1 = list()x2 = list()# 因变量y = list()# 将列表转为横向量，转置成纵向量，然后拼接（concatenate）起来X = np.concatenate(np.array(x1).reshape(-1,1), np.array(x1).reshape(-1,1))# 在自变量矩阵X的最左侧一列添加一列常数1X = sm.add_constant(X)# 实例化OLS类，得到一个model对象。model = sm.OLS(y, X)# 调用类方法，使model对象进行拟合，然后返回结果。results = model.fit()print(results.params)# 返回值将会是这样的形式# [1.04510666, 9.97239799 2.23455534]# 按照顺序分别是常数项系数、x1系数，x2系数，etc.print(results.summary())# 如果调用这个方法，则会返回一个详尽的表格，其中coef就是回归系数。 参考 Python Statsmodels 统计包之 OLS 回归 statsmodels.regression.linear_model.OLS","tags":[{"name":"Python","slug":"Python","permalink":"http://ldzhangyx.github.io/tags/Python/"},{"name":"统计","slug":"统计","permalink":"http://ldzhangyx.github.io/tags/统计/"},{"name":"statsmodels","slug":"statsmodels","permalink":"http://ldzhangyx.github.io/tags/statsmodels/"}]},{"title":"用Python做统计的轻量化库：statistics","date":"2018-12-11T06:08:13.000Z","path":"2018/12/11/stats/","text":"Python用于统计计算的时候，有一个标准库：statistics，可以做一下基本的统计计算。 从使用的角度来看，之所以称其为轻量库，是因为其没有引入额外的数据结构，并且使用简单方便。对于样本来说，需要提供的只是序列或者迭代器，譬如可以使用一个list作为函数输入。 中心位置的计算平均值mean(), 算术平均值。harmonic_mean(), 谐波平均值。 中位数median(), 中位数。若数据量为偶数时，会取一个平均值作为插值中位数。median_low(), 中位数，但数据为偶数时，会取较小的那个。median_high(), 取较大的那个。median_grouped( , interval = 1), 这个功能比较迷，将输入视为连续数据，并通过优先使用提供的间隔宽度找到中值范围，然后使用落在该范围内的数据集中的实际值的位置在该范围内插值来计算 50％ 百分位中值。interval取不同值是结果会改变。 众数mode(), 要是数据不存在众数会报错，嗯…… 偏离值计算pstdev( , mu = None), 计算总体(population)标准差。pvariance( , mu = None), 计算总体方差，当然就是标准差的平方。第二个参数mu可选，你可以先验地给一个总体平均值，也可以让算法自己算样本平均值。对于这个函数，当其对整体调用的时候，自然可以计算出总体方差$\\sigma$，但输入是样本的话，其返回应该是$S^2$，即有偏的样本方差（有N个自由度）。此时样本方差与总体方差可能不一致。所以当我们知道总体平均值mu时可以提供给函数，如果数据点有代表性，结果应该是无偏估计。 stdev(, xbar = None), 计算样本标准差。variance( , xbar = None), 计算样本方差。这个函数的样本方差使用了贝塞尔矫正（只有N-1个自由度）。结果应该是真实总体方差的无偏估计。 贝塞尔矫正： s=\\sqrt{\\frac{^{\\Sigma (x-\\bar{x})^2}}{n-1}} 表示样本方差。 因为高斯分布的边沿抽取的数据很少，那么预测方差一定小于大数据集的方差。通过分母减一，手动提高方差的数值。","tags":[{"name":"Python","slug":"Python","permalink":"http://ldzhangyx.github.io/tags/Python/"},{"name":"统计","slug":"统计","permalink":"http://ldzhangyx.github.io/tags/统计/"},{"name":"数据挖掘","slug":"数据挖掘","permalink":"http://ldzhangyx.github.io/tags/数据挖掘/"},{"name":"时序分析","slug":"时序分析","permalink":"http://ldzhangyx.github.io/tags/时序分析/"}]},{"title":"PyTorch第三方库：PyTorch-NLP","date":"2018-11-22T11:41:40.000Z","path":"2018/11/22/pytorch-nlp/","text":"PyTorch-NLP在功能上与torchtext很像，但是其仍然有颇具特色的地方。 安装选择pip安装。 1pip install pytorch-nlp 安装过程中你可能会遇到如下的坑： fatal error C1083: Cannot open include file: ‘io.h’: No such file or directory 解决办法是安装Visual Studio一些相关的工具(https://stackoverflow.com/questions/40018405/cython-cannot-open-include-file-io-h-no-such-file-or-directory/40810172)。 使用基本的使用方法在官方文档里说得比较清楚，主要分为这几个用处。 加载数据集PyTorch-NLP实现了自己的Dataset的子类，直接调用即可。这些类已经好好地实现了len()和getitem()功能，我们只需要在自己的程序里写一个DataLoader用就好了。以WMT数据集举例： 12345678910&gt;&gt;&gt; from torchnlp.datasets import wmt_dataset&gt;&gt;&gt; train = wmt_dataset(train=True)&gt;&gt;&gt; train[:2][&#123; 'en': 'Res@@ um@@ ption of the session', 'de': 'Wiederaufnahme der Sitzungsperiode'&#125;, &#123; 'en': 'I declare resumed the session of the European Parliament ad@@ jour@@ ned on...' 'de': 'Ich erklär@@ e die am Freitag , dem 17. Dezember unterbro@@ ch@@ ene...'&#125;] 使用预训练好的词向量在BERT出来之前最好的词向量应该是FastText+ELMo的组合。如果想偷懒先快速实现模型的话，这个API可以帮你免去写词表、写Embedding层的过程，直接返回词向量。 123456789&gt;&gt;&gt; from torchnlp.word_to_vector import FastText&gt;&gt;&gt; vectors = FastText()&gt;&gt;&gt; vectors['hello']-1.74940.6242...-0.62022.0928[torch.FloatTensor of size 100] 使用丰富的神经网络层我觉得比较有名的大概是SRU层和Attention层。SRU层号称将RNN训练得和CNN一样快，而Attention的实现使用了IBM的类似方法。 12345678&gt;&gt;&gt; attention = Attention(256)&gt;&gt;&gt; query = torch.randn(5, 1, 256)&gt;&gt;&gt; context = torch.randn(5, 5, 256)&gt;&gt;&gt; output, weights = attention(query, context)&gt;&gt;&gt; output.size()torch.Size([5, 1, 256])&gt;&gt;&gt; weights.size()torch.Size([5, 1, 5]) 在这里关于attention的使用，可以看IBM的文档。简单解释一下呢，就是context是encoder的hidden states，其与output做了相似度计算，softmax之后参与decode过程，能理解self-attention的对这个肯定能理解。 Text Encoder是Tensor2Tensor一部分功能的迁移实现，TextEncoder主要功能就是构建词汇表、实现符号到id的映射。Tensor2Tensor的GitHub可以点这里。 实话说，Google这个项目做得挺漂亮的，外行人可以用一用。 12345678from torchnlp.text_encoders import WhitespaceEncoder# Create a `WhitespaceEncoder` with a corpus of textencoder = WhitespaceEncoder([\"now this ain't funny\", \"so don't you dare laugh\"])# Encode and decode phrasesencoder.encode(\"this ain't funny.\") # RETURNS: torch.LongTensor([6, 7, 1])encoder.decode(encoder.encode(\"This ain't funny.\")) # RETURNS: \"this ain't funny.\" 数据采样sampler可以从数据集中进行采样，只需提供数据集对象，制定顺序即可。 我目前没有用到过这个API，但是它应该是一个很好用的采样工具，可以用于做验证。 进行评测令人遗憾的是这里只实现了两个评测：精确度和BLEU。 1234567891011&gt;&gt;&gt; import torch&gt;&gt;&gt; from torchnlp.metrics import get_accuracy&gt;&gt;&gt; targets = torch.LongTensor([1, 2, 3, 4, 5])&gt;&gt;&gt; outputs = torch.LongTensor([1, 2, 2, 3, 5])&gt;&gt;&gt; accuracy, n_correct, n_total = get_accuracy(targets, outputs, ignore_index=3)&gt;&gt;&gt; accuracy0.8&gt;&gt;&gt; n_correct4&gt;&gt;&gt; n_total5 其中ignore_index表示忽略的index。 至于BLEU就更简单了。 12345678910&gt;&gt;&gt; hypotheses = [ \"The brown fox jumps over the dog 笑\", \"The brown fox jumps over the dog 2 笑\"]&gt;&gt;&gt; references = [ \"The quick brown fox jumps over the lazy dog 笑\", \"The quick brown fox jumps over the lazy dog 笑\"]&gt;&gt;&gt; get_moses_multi_bleu(hypotheses, references, lowercase=True)46.51 两个list传进去，自动给出结果。还是挺方便的。 工具包有一些很有意思的工具可以用： 对一个batch做padding 对一个tensor做padding 分割数据集 shuffle","tags":[{"name":"PyTorch","slug":"PyTorch","permalink":"http://ldzhangyx.github.io/tags/PyTorch/"},{"name":"NLP","slug":"NLP","permalink":"http://ldzhangyx.github.io/tags/NLP/"}]},{"title":"几类VAE的简要整理","date":"2018-11-20T05:25:32.000Z","path":"2018/11/20/vae/","text":"VAE在我心里，是NLP领域生成模型的一把好手。在很多Task上，VAE的表现其实不如RNN，但是其出色的地方在于足够灵活，能生成出很多不一样的符合条件的结果。这么几年下来，VAE也有着各种各样的变体，也会顺便提一下。 VAE &amp; Conditional VAEVAE首先来看VAE，其比较详细的解释可以看这里。VAE的模型结构如下： 其Encoder提取输入的特征，并将其map到一个正态分布上。用神经网络输出其均值和方差，得到一个正态分布。这个正态分布体现了输入的特征。编码器不能自由地使用整个潜在空间，而是必须限制产生的z，使其可能服从先验分布。 对正态分布进行采样，采样数据通过Decoder进行输出。采样可以通过重参数技巧进行代换，保证了整个过程可导，绕开了采样这个不可导的动作。 为了保证模型具有一定的生成能力，输出的方差需要进行控制，所以要求这个正态分布向标准正态分布看齐。 使用KL散度衡量这个分布与标准正态分布的距离，其Loss可以推导为下列式子： LOSS = KL散度 + 生成图片与原图片的交叉熵 之后ELBO的提出都是为了方便计算。VAE 的变分下界，是直接基于 KL 散度就得到的。所以直接承认了 KL 散度的话，就没有变分的什么事了参考。，大体模型就是这个样子。 CVAECVAE是一类模型，通过在Encoder与Decoder中添加标签来控制生成结果的类别。 其实现方法是，每一类label，其正态分布存在均值，于是Encoder编码形成的正态分布，不仅方差要接近标准正态分布，而且均值要接近label的均值，可以通过修改KL散度实现： AAEAAE，对抗自编码器，在2015年于《Adversial Autoencoders》提出来。其详细介绍在这里可以查看。 其与VAE最显著的特征是将KL散度惩罚替换成了对抗学习的过程。","tags":[{"name":"变分自编码器","slug":"变分自编码器","permalink":"http://ldzhangyx.github.io/tags/变分自编码器/"},{"name":"VAE","slug":"VAE","permalink":"http://ldzhangyx.github.io/tags/VAE/"},{"name":"GAN","slug":"GAN","permalink":"http://ldzhangyx.github.io/tags/GAN/"}]},{"title":"PyTorch代码编写的日常(11.19)","date":"2018-11-19T07:23:51.000Z","path":"2018/11/19/pytorch-2/","text":"这个系列主要讨论使用PyTorch我个人探寻到的零散知识点，包括API和编写范式。 k折交叉验证我找了一圈，发现PyTorch在对数据集的处理上，并没有设置方便进行交叉验证的API。在编程实践中可以这么完成k折交叉验证： 1234567891011121314151617181920212223242526272829303132333435class MyDataset(data.Dataset): ''' 数据集类继承PyTorch的Dataset类，进行处理。 数据集以csv读取为例。 ''' def __init__(self, root, state = 'Train', k = 0): '''初始化对象。 Args: root: 存放数据的目录。 state: 控制要读取训练集、验证集、测试集。 k: 用于控制k折交叉验证。 ''' self.root = root self.state = state if self.state == 'Train': path = root + 'train.csv' self.train_data = pd.read_csv(path) self.data = pd.concat( [self.train_data[:int((k % 10) * len(self.train_data) / 10)], self.train_data[int((k % 10 + 1) * len(self.train_data) / 10):]]) self.data = self.data.reset_index(drop = True) if self.state == 'Valid': path = root + 'train.csv' self.train_data = pd.read_csv(path) self.data = self.train_data[int((k % 10) * len(self.train_data) /10): int((k % 10 + 1) * len(self.train_data) /10)] self.data = self.data.reset_index(drop = True) if self.state == 'test': path = root + 'test.csv' self.data = pd.read_csv(path) 这样通过切片的方式，将训练集和验证集分成了k份，训练集拥有k-1份数据。 loss的设计回归问题一般来说使用MSE，但是PyTorch也提供了Huber Loss，在API里命名为SmoothL1Loss。 使用loss时遵循这样的方法使用： 1234loss = nn.SmoothL1Loss()logits = ...labels = ...output = loss(logits, labels) loss与optim的联动关系在optimizer定义的时候，需要将网络参数输入。 123optimizer = t.optim.Adam(model.learnable_parameters(), parameters.learning_rate, weight_decay=0.01) learnable_parameters()是我手动定义的一个类方法，根据requires_grad标志获取所有需要学习的参数。 此时optimizer已经存储了所有参数的储存地址（也就是指针）。 12345loss = nn.MSELoss()output = loss(logits, label)optimizer.zero_grad()output.backward()optimizer.step() optimizer.zero_grad()将梯度清零，防止梯度错误累加。output.backward()将所有参数的更新梯度一次性求出来。optimizer.step()根据求得的梯度自动进行更新，这个函数无需传参，因为loss与optim被设计为能很好联动的机制。 model.train()与model.eval()这个机制用来控制dropout和Batch Normalize层。BN层的主要用途是进行批量正规化，减少不当初始化对学习效果的负面影响。 在训练代码前加入model.train()，在验证和测试代码前加入model.eval()，model为模型对象。 requires_grad的默认值PyTorch 0.4版本取消了Tensor的参数Volatile，现在requires_grad用于控制参数是否能被学习，默认为False。 但是重要的是，在模型的init方法中被定义的层，这个参数默认为True，不需要再改一遍了。 trainer的编写范式trainer作为网络模型的类方法出现，其定义和调用方法如下。 123456789def trainer(self, optimizer): # 如果自己定义了batch_loader也可以在这里用。这里主要定义一些不会变的参数 def train(iteration, batch_size, use_cuda, input, label): logits = self(input) # 这里调用的是forward类方法，保持参数一致即可 logits = logits.view(-1,1) # 可能需要做一次转置 loss = nn.MSELoss() mse = loss(logits, label) ... return mse return train # 返回一个函数对象 调用： 1234for iteration, [input, label] in enumerate(data_loader): # data_loader是自己写好的，是DataLoader类 train_step = model.trainer(optimizer) output = step(iteration, batch_size, cuda, input, label) # 这是目的","tags":[{"name":"PyTorch","slug":"PyTorch","permalink":"http://ldzhangyx.github.io/tags/PyTorch/"}]},{"title":"PyTorch模型加载与保存的最佳实践","date":"2018-11-18T16:57:03.000Z","path":"2018/11/19/pytorch-1119/","text":"一般来说PyTorch有两种保存和读取模型参数的方法。但这篇文章我记录了一种最佳实践，可以在加载模型时避免掉一些问题。 传统方案：第一种方案是保存整个模型： 1torch.save(model_object, 'model.pth') 第二种方法是保存模型网络参数： 1torch.save(model_object.state_dict(), 'params.pth') 加载的时候分别这样加载： 1model = torch.load('model.pth') 以及： 1model_object.load_state_dict(torch.load('params.pth')) 改进的方案注意到这个方案是因为模型在加载之后，loss会飙升之后再慢慢降回来。查阅有关分析之后，判定是优化器optimizer的问题。 如果模型的保存是为了恢复训练状态，那么可以考虑同时保存优化器optimizer的参数： 1234567state = &#123; 'epoch': epoch, 'net': model.state_dict(), 'optimizer': optimizer.state_dict(), ...&#125;torch.save(state, filepath) 然后这样加载： 1234checkpoint = torch.load(model_path)model.load_state_dict(checkpoint['net'])optimizer.load_state_dict(checkpoint['optimizer'])start_epoch = checkpoint['epoch'] + 1 如果模型的保存是为了方便以后进行validation和test，可以在加载完之后制定model.eval()固定dropout和BN层。","tags":[{"name":"PyTorch","slug":"PyTorch","permalink":"http://ldzhangyx.github.io/tags/PyTorch/"}]},{"title":"《Joint Learning of Character and Word Embeddings》论文笔记，以及Word Embedding闲聊","date":"2018-11-17T15:44:16.000Z","path":"2018/11/17/character-embedding/","text":"这篇文章出自刘知远老师的组，其核心思想是利用词语丰富的内部含义，提升词语进行embedding的效果。文章是在2015年发表的，比较久远了。在这篇文章里我想同时聊一下最近Word Embedding的有趣的地方。 CBOW先聊聊Character Embedding的前置模型——CBOW。 CBOW在训练的时候，是利用一个单词的context去预测这个具体的词，而Skip-Gram模型根据中心词预测context。如下图所示，我们设每个单词的one-hot编码拥有$V$个维度，其上下文窗口大小有$C$。 这样上下文的输入可以用一个$[C* V]$的矩阵表示。 之后，我们使用一个共享的权重矩阵$W_{V*N}$，将上下文映射成一个$[C*N]$维的矩阵。接下来对这个矩阵求平均得到$[1*N]$维的向量，作为隐层向量。 我们使用另一个输出权重矩阵$W’_{N*V}$，将这个$[1*N]$维的向量映射为$[1*V]$维的向量。将结果进行softmax处理，得到概率输出。训练目标是将这个输出与单词的one-hot编码尽量接近。 训练完成之后，我们得到了一个副产物：矩阵$W$。这个矩阵被称为look up table，任何一个单词的one-hot表示乘以这个矩阵都将得到自己的word embedding。 Character Embedding这篇文章试图利用中文词语的内部结构（从直觉上来看，中文字单个字的意思和拉丁词的词根词缀有着一样的感觉），来丰富词语的语义。有一篇后续论文《Enriching Word Vectors with Subword Information》，试图在英语词汇上进行类似的研究。那篇文章试图将单词以词袋的方式联合表示，如：where被表示为&lt;wh,whe,her,ere,re,where&gt;。使用这种方式，单词的内在结构可以被很好地利用起来，同时可以强化那些词频低下的词的表示准确度。 中文embedding中也有利用更细粒度的嵌入，比如《Component-Enhanced Chinese Character Embeddings》提到使用部首表示更加丰富的信息。 大致模型CWE（CCharacter-enhanced Word Embedding）的大致模型如下图所示。 有几种方式去进行Character Embedding和Word Embedding的组合。总体公式如下： x_i = w_j \\oplus \\frac{1}{N_j}\\sum_{k=1}^{N_j}c_k第一种加和的方法是concatation，第二种加和的方法是将两个向量直接相加。实验表明直接相加的速度会快于前者。 限于一些词语（如巧克力），其单字并不能帮助词语丰富语义，所以作者决定将这类词语排除在外，只使用其word embedding。 为了保证这类词与加和了character embedding的词语有相似的长度，作者将上面得到的向量乘以1/2，进行处理。 x_i = \\frac{1}{2}(w_j + \\frac{1}{N_j}\\sum_{k=1}^{N_j}c_k)两个困难第一个困难是：与词相比, 汉字拥有的意思更多. 一个汉字在不同词中, 可能有不同的语义. 因此, 一个汉字对应一个 character embedding 是不够的。 作者的对策是：为一个汉字分配多个 character embedding, 以表示它的不同意思。 第二个困难是：不是所有词都能用汉字意思的语义结合来表意（如巧克力）。 作者的对策是：将这类词单独取出，不做character-embedding。 解决一词多义现象第一个方案：针对character在word中的位置为其分配向量，分为3种情况：词头、词中和词尾。具体地说，能力和智能中的能用不同的向量表示。这种方法被称为Position-based Character Embeddings。 第二个方案：使用聚类。对character出现的情况做聚类，根据聚类结果创建不同的向量，称为模式向量。这个方法被称为cluster-based character embeddings。这个方法能与第一个结合起来，position-based character embeddings再做聚类。 第三个方案：无参聚类。针对第二种方法的聚类方法，第三个方案所得到的类别不具有固定的类数，而在训练中灵活地习得。 其他模型（等待后续更新）GloVeFastTextELMoBERT感想最近被BERT屠榜，word embedding要进入大开大合的时代了吗？我没有专门去看模型的实现，只知道它使用了海量参数，运用Transformer进行学习；但是看吴俣的知乎回答表示无法复现，所以我也暂时没有考虑深入思考这个方向。 但是说到word embedding，有一些很好的先验知识能让我们更容易学到精确的词向量。比如说，基于模式向量进行word embedding在文言文翻译任务上也许能提高任务结果；中文字的结构和内部含义的确是有用的信息；也许Analogical Reasoning这个衡量词向量质量的方面，传统的符号推理作为先验，也能帮助我们更好地学到词向量。 无论如何，在大多数任务上，只要挑一个自己觉得ok的词向量，我认为就可以了。如果之后要对词向量进行单独的训练，可以慢慢调整。这个词向量现在是GloVe_300d + ELMo，以后是BERT，这个广阔的领域等我以后有机会再深入学习吧。","tags":[{"name":"自然语言处理","slug":"自然语言处理","permalink":"http://ldzhangyx.github.io/tags/自然语言处理/"},{"name":"Word Embedding","slug":"Word-Embedding","permalink":"http://ldzhangyx.github.io/tags/Word-Embedding/"},{"name":"中文NLP","slug":"中文NLP","permalink":"http://ldzhangyx.github.io/tags/中文NLP/"}]},{"title":"Focal Loss以及其在NLP领域运用的思考","date":"2018-11-15T16:06:53.000Z","path":"2018/11/16/focal-loss/","text":"Kaiming He的一篇《Focal Loss for Dense Object Detection》是我一直想读的一篇文章。这篇文章将Focal Loss用于目标检测，然而其在NLP中也能得到运用。 Focal Loss的概念和公式为什么Focal Loss要出现Focal Loss的出现是为了解决训练集正负样本极度不平衡的情况。作者认为更少的部分学习起来更难，于是在Focal Loss上设计得更加倾向于这一类样本。 作者提出通过reshape标准交叉熵损失解决类别不均衡（Class Imbalance）,这样它就能降低容易分类的样例的比重（Well-classified Examples）。这个方法专注训练在Hard Examples的稀疏集合上，能够防止大量的Easy Negatives在训练中压倒训练器。 以前的一些思路集中在采样样本，使更少（等同于更难训练）的那类样本在数据中所占的比重更大，Focal Loss并没有进行采样，而是对容易的那类进行了降权处理，结果上有很好的效果。 公式首先将分类问题常用的交叉熵公式摆出来。 CE(p, y) = \\begin {cases} & -\\log(p) & \\text{if} y = 1 \\\\ & -\\log(1-p) & \\text{otherwise}\\\\ \\end {cases}公式里的CE指的是交叉熵，$p$指的是期望输出，也就是预测样本属于1的概率。$y$表示label，取值为${±1}$。于是在这个二分类问题里，我们可以自然地将其合并为一个公式： CE(p,y) = -\\frac{1}{n}\\sum_{x}[y\\log(p)+(1-y)\\log(1-p)]其中n为训练输入的个数，当然这里$y \\in {1,0}$。对交叉熵的基础细节有模糊之处可以看这篇博客。 定义变量$p_t$，使得： p_t = \\begin {cases} & p & \\text{if} y = 1 \\\\ & p & \\text{otherwise}\\\\ \\end {cases}所以$CE(p,y)$可以被统一为一个式子：$-\\log(p_t)$，这样$p_t$实际上就是反映了$p$与$y$的接近程度。$p_t$越大，说明分类越好。 之后文章提出了平衡的交叉熵，使用一个$\\alpha_t$来平衡交叉熵。这个因子的作用是手动平衡不同样本的交叉熵，控制正负样本对总loss的权重。 训练时遇到很大的类别不平衡会主导交叉熵损失。易分负样本在梯度和损失中占据主导地位。而$\\alpha$平衡了正负样本的重要性，它不会区别易分样本和难分样本。与之不同，作者将损失函数变形降低易分样本的权重，专注于训练难分负样本。 现在在交叉熵上加入另一个因子，用于动态调节权重： FL(p_t) = -(1-p_t)^\\gamma\\log(p_t)FL即为Focal Loss，$\\gamma$是一个可以调节的参数，当这个参数不同时，对loss的影响如下： 其中参数为0的时候，Focal Loss退化为交叉熵CE。从图中我们可以很直观地看到，$p_t$越大，$FL(p_t)$越小，其对总体loss所做的贡献就越小；反过来说，$p_t$越小（小于0.5的情况也就是被误分类），越能反映在总体loss上。实验发现$\\gamma=2$时效果最好，在这种情况下，一个样本被分类的$P_t=0.9$的损失比CE小1000多倍。这样就增加了那些误分类的重要性。 作者最后将$\\alpha$-balanced loss也加入了公式，最后公式为： FL(p_t) = -\\alpha_t(1-p_t)^\\gamma\\log(p_t)思考Focal Loss完全是一个通用性的Loss，面对样本不平衡的情况不失为一个好选择。 在文本分类上，我认为Focal Loss可以成为一个自然的选择。苏剑林在他的文章中提到了关注于模棱两可的样本，而少关注已经分类得很好的样本，从结果上看，其应对更难分类的样本的能力的确提升了。 Focal Loss在原论文中用于提升目标检测的性能，因为目标检测的正样本数量的确远小于负样本。在自然语言处理方面也有一些任务面临着相似的问题。比如说抽取式文本摘要。一篇上千字的文本摘要，需要按照要求抽取出其中几句话，这里正负样本明显是很不平衡的；在生成式摘要中，Pointer Network试图在原文中找寻词语进行生成，这里并不能算一个严格的分类问题，但是交叉熵的损失函数仍然是可以研究一下的。","tags":[{"name":"论文笔记","slug":"论文笔记","permalink":"http://ldzhangyx.github.io/tags/论文笔记/"},{"name":"自然语言处理","slug":"自然语言处理","permalink":"http://ldzhangyx.github.io/tags/自然语言处理/"},{"name":"focal loss","slug":"focal-loss","permalink":"http://ldzhangyx.github.io/tags/focal-loss/"}]},{"title":"self-attention与attention简要梳理","date":"2018-10-14T15:31:02.000Z","path":"2018/10/14/self-attention/","text":"Attention的计算机制总说Attention机制主要作用在Decode阶段。在这一阶段，$s_t$的运算受到了$s_{t-1}$，$y_{t-1}$和$c_t$的影响。根据目前比较统一的观点，Attention值的计算是相似度比较的结果。Decoder端的Query与Encoder端的各个Key进行相似度比较得到不同的权重，最后对各个Key对应的Value进行归一化的加权累加，得到Attention Value。 在实际应用中，Key就是Value，即K=V；而K与Q（Query）实际上也常用Hidden State来计算。 相似度计算相似度计算有几种方式。下面公式中$t$代表Decoder第$t$时刻，$s$代表Encoder中第$s$个位置的hidden state。 点积注意力：s(h_t, h_s) = h_t^Th_s 一般的注意力：s(h_t, h_s) = h_t^TW_ah_s 连接(concat)注意力：s(h_t, h_s) = V_a^T\\tanh(W_a[h_t;h_s]) 加性注意力：s(h_t, h_s) = V_a^T\\tanh(Wh_t+Uh_s) 之后的计算我们将$s(h_t, h_i)$进行相似度计算的结果（记为$e_{ti}$）进行softmax归一化，再权值相加，得到最终的attention值： \\alpha_{t,i}^{txt} = \\frac{\\exp(e_{t,i}^{txt})}{\\sum_{j=1}^N\\exp(e_{t,j}^{txt})}c_{txt} = \\sum_{i=1}^N\\alpha_{t,i}^{txt}h_i从统一的角度来看，如果将Decoder端的Query视为整体Q，Key视为Encoder端的整体K，Value在自然语言处理中一般直接使用K，记为V。所以， Q \\in \\mathbb{R}^{n*d_k}, K \\in \\mathbb{R}^{m*d_k}, V \\in \\mathbb{R}^{m*d_v}所以上述Attention可以简要的抽象成下列公式： Attention(Q,K,V) = softmax(\\frac{QK^T}{\\sqrt{d_k}})V其实质是将序列Q编码成了一个新的$n*d_v$的序列。如果将Query的逐个向量分开，那么公式也可以这么表达： Attention(Q_t, K, V) = \\sum_{s=1}^m\\frac{1}{z}\\exp(\\frac{}{\\sqrt{d_k}})v_s其中Z是归一化因子。事实上q,k,v分别是 query,key,value 的简写，K,V是一一对应的，它们就像是 key-value 的关系，那么上式的意思就是通过$q_t$这个 query，通过与各个$k_s$内积的softmax方式，来得到$q_t$与各个$v_s$的相似度，然后加权求和，得到一个$d_v$维的向量。 参考这篇微信文章是《Attention is All You Need》的论文笔记，需要看的时候可以看一下。 文章链接","tags":[{"name":"attention","slug":"attention","permalink":"http://ldzhangyx.github.io/tags/attention/"}]},{"title":"《A Deep Generative Framework for Paraphrase Generation》论文笔记","date":"2018-09-26T08:44:14.000Z","path":"2018/09/26/deep-para-generation/","text":"这篇文章发表在2018年的AAAI上，继承了VAE在自然语言处理上的应用，将其应用于句子复述上，用于生成相似的句子；同时因为RNN可以作为语言模型使用，语句的语法正确性也有一定提升。论文地址：https://arxiv.org/pdf/1709.05074.pdf 背景材料关于变分自编码器在NLP领域的相关介绍，可以看这篇讨论。 关于文本生成的背景研究，可以看这篇文章。 关于VAE的原理（流形学习）和工程实现，可以看这篇博文。这篇博文详细介绍了VAE的训练过程，Encoder部分（识别模型）和Decoder部分（生成模型）的结构和各个参数的含义。这篇文章同时也提及了reparemetriazation trick的原理。 对于VAE结构的理解和讨论，可以看这篇文章。 实现Keras实现在这里。 PyTorch实现在这里。 论文笔记摘要复述生成是NLP一个重要的课题，本文的模型将VAE和LSTM结合起来生成复述。传统的VAE结合RNN时，生成的句子不符合复述的要求，所以我们将模型的Encoder和Decoder都将原始的句子作为condition进行干涉，这样就达到了复述的效果。这个模型简单、模块化，可以生成不同的多种复述。在量化评测里，本模型明显优于state-of-the-art模型；分析发现模型语法良好；在新数据集上进行了测试，提供了一个baseline。 引入Introduction这部分，作者介绍了Paraphrase在QA等方面的应用，以及之前的paraphrase方法，认为其多制约于规则，而深度学习的生成模型更加是数据驱动。区别于VAE的在句子生成上的其他应用，本文的复述模型需要捕获原本句子的特征，所以unconditional的句子生成模型并不适用于此任务。conndition的机制在过去曾被应用到CV领域，然而CV的应用仅仅是用有限的class label作为condition，以及不需要任何的intermediate representation。本文的方法在Encoder和Decoder方面都进行了condition，并且通过LSTM得到intermediate representation。 本文的生成框架对比seq2seq模型，尽管后者可以使用beam search，但不能同时产生多个效果很好的结果，因为beam search的后面结果总是比最顶部的差。在Quora数据集上，本文的模型表现很好。 方法VAE结构VAE是一个深度生成式隐变量模型，可以从高维输入学习到丰富、非线性的表示。编码器方面，相比AE使用了一个确切的编码器函数$q_{\\Phi}$，VAE使用了后验分布$q_{\\Phi}(\\mathbf{z}|\\mathbf{x})$（或者说识别模型）。这个后验分布通常被假设为高斯分部，所以参数$\\Phi$只有均值和方差。VAE使后验分布$q_{\\Phi}(\\mathbf{z}|\\mathbf{x})$尽可能地接近先验分布$p(\\mathbf{z})$，通常也被视为高斯分布。VAE的解码器模型，使用了另一个分布$p_{\\theta}(\\mathbf{x}|\\mathbf{z})$，也就是输入隐变量$\\mathbf(z)$，还原出$\\mathbf{x}$。其参数$\\theta$使用另一个前馈神经网络的输出值。将观测数据$x^{(i)}$的对数似然可以写作： \\log p_\\theta(x^{(i)} = KL(q_\\varPhi(z|x^{(i)})||p_\\theta(z|x^{(i)})) + L(\\theta, \\varPhi; x^{(i)}))将$ELBO$记为$L$，然后通过优化$L$，来间接优化似然。$L$可以写作： L(\\theta, \\varPhi; x^{(i)})) = -KL(q_\\varPhi(z|x^{(i)})||p_\\theta(z)) + E_{q_\\varPhi(z|x)}[\\log p_\\theta(x^{(i)}|z)]优化目标变为后面两项。 具体的推导可以参考这个教程。 更多地，在建模文字数据的时候，也可以使用KL-term annealing以及dropout of inputs of the decoder等训练技巧，避免一些问题。 模型结构我们的训练集使用了N对句子，表示为${\\mathbf{s}_n^{(o), \\mathbf{s}_n^{(p)}}^N_{n=1}$，其中原始句子用$o$标注，复述句子用$p$标注。句子的向量表示标记为$x^{(o)}$与$x^{(p)}$， 去掉LSTM后，本文的宏观模型如图所示： 区别于传统的VAE，本文构建的模型将$x^{o}$作为了condition加在了Encoder和Decoder之上。 更加细节的结构如图所示： 实际上，本文的模型包括了三个LSTM encoder和一个LSTM decoder，总共有4个LSTM，如上图所示。 在VAE的Encoder方面，两个LSTM encoder被使用，第一个转换原始句子$s^{(o)}$到其向量表示$x^{o}$，与复述句子$s^{(p)}$送入第二个LSTM。将两个句子都编码进了LSTM之后，使用一个前馈网络输出$\\Phi$，也就是向量表示的均值和方差，送入VAE。 在VAE的Decoder方面，VAE输出隐变量$z$，第三个LSTM编码原始句子，然后将原始句子的向量表示$x^{(o)}$与$z$一同送入第四个LSTM，产生复述的句子。 将LSTM抽象化，可以得到一个这样的模型： 这个模型的variational lower-bound，也就是$ELBO$如下。最小化KL散度的过程等同于最大化$ELBO$的过程。 L(\\theta, \\Phi; x^{(p)}, x^{(o)})) = E_{q_\\Phi(z|x^{(p)}, x^{(o)})}[\\log p_\\theta(x^{(p)}|z, x^{(o)})] -KL(q_\\Phi(z|x^{(p)}, x^{(o)})||p(z))模型的训练方法与《Generating sentences from a continuous space》中的相同。这篇论文深深地影响了后续论文的思路。 实验数据集本文使用了两个数据集进行评测。 MSCOCO数据集这个数据集，也曾用于评测句子复述的方法，对120K张图片分别有人工标注的五句描述。构建数据集的时候，本文随机忽略一个描述，然后将剩下的描述两两配对组成数据集，同时限制长度在15个单词以内，以减少模型复杂度。 Quora数据集Quora在2017年发布了一个数据集，包含400K行潜在的重复问题对。借助这个数据集，本文将重复的问题看作是复述的句子进行训练。重复的问题对大约有155K对，使用50K，100K，150K对进行训练，4K对作为测试。 实验设置实验的主要参数设置参考了《Generating sentences from a continuous space》的实现代码，未对任何数据集做fine-tuning。本文模型中，作者没有使用预先embedding好的词向量，而是自己进行了训练。embedding dimension设置为300，encoder和decoder的dimension是600，隐变量dimension是1100。Encoder只有一层而Decoder有两层。模型使用SGD进行训练，学习率固定为$5*10^{-5}$，dropout为0.3，batch size为32。 评测本文使用了BLEU，METEOR和TER进行评测。因为这个过程类似翻译任务，所以借用翻译的指标效果会比较好。评测结果显示优于其他模型。 评测包含了对实验结果的分析，可以直接阅读原文。 结论本文提出了一个深度生成框架，基于VAE，增加了seq2seq模型，用于生成释义。与传统的VAE和无条件句子生成模型不同，这个模型在输入句子上调节VAE的encoder和decoder侧，因此可以为给定句子生成多个释义。在一般复述生成数据集上评估所提出的方法，并且表明它在很大程度上优于现有技术，没有任何超参数调整。本文还评估了对最近发布的问题复述数据集的方法，并展示了其卓越的性能。生成的释义不仅在语义上与原始输入句子相似，而且还能够捕获与原始句子相关的新概念。 想法这篇文章是我阅读的第一篇关于VAE文本生成的论文，我将在本周使用PyTorch完成这个模型的复现工作。在学习VAE背后深层原理的过程中，我遇到了一些麻烦，只能说是初步理解。然而工程上VAE是一个相比GAN更加自然地适用于NLP的模型，其噪声与重建的对抗思路让我对文本生成有了全新的认识。 对于VAE结构，我自己还需要做更多的推导、学习，反复阅读笔记最前面的几篇文章，加深理解。如果不能完整理解VAE的构建过程，就无从提起改进。 文章亮点文章提出了一个基于VAE的模型，但这个模型并不是单纯的文本生成，而是使用了condition，那么这个condition对VAE公式要做一些改动，这个思维的推理过程结合了一定理论成分。在句子复述的领域中，这个模型生成的句子在可读性（METEOR，人类评估）上有着一定优势，能不能用于语法改错？虽然语法改错上我猜测基于规则的模型会更加精确全面，但一定程度上自动改善语法问题，应该有一定帮助。 想法这篇文章使用VAE来做句子复述，那么是否可以将condition的概念拓展到另外的领域？ 在2016年的那篇VAE做NLP的开创性论文中，提及了这样一个问题，在实际的训练过程中，KL散度可能会出现collapse，导致后验等于先验。由于 RNN-based 的 decoder 有着非常强的 modeling power，直接导致即使依赖很少的 history 信息也可以让 reconstruction errors 降得很低，换句话说，decoder 不依赖 encoder 提供的 z 了，VAE-LSTM模型因此退化成RNN-LM语言模型。 在那篇论文里，使用的缓解办法就是KL cost annealing 和 Word dropout。目前对VAE结构的改进研究也很多，我认为改变VAE结构，进行微调，其效果有可能陷入GAN的一堆改进结构的泥淖里。 如果将VAE引入其他模型会怎么样呢？哈佛NLP组提出过注意力模型的解决方案。我觉得这方面的思考非常有吸引力。","tags":[{"name":"循环神经网络","slug":"循环神经网络","permalink":"http://ldzhangyx.github.io/tags/循环神经网络/"},{"name":"变分自编码器","slug":"变分自编码器","permalink":"http://ldzhangyx.github.io/tags/变分自编码器/"},{"name":"自动问答","slug":"自动问答","permalink":"http://ldzhangyx.github.io/tags/自动问答/"},{"name":"句子复述","slug":"句子复述","permalink":"http://ldzhangyx.github.io/tags/句子复述/"}]},{"title":"《XiaoIce Band: A Melody and Arrangement Generation Framework for Pop Music》论文笔记","date":"2018-09-25T18:47:41.000Z","path":"2018/09/26/xiaoice-band/","text":"小冰乐队是我一直想做笔记的一篇论文，做音乐生成的人不多，这篇论文思路和我的想法又有些相似。这篇由中科大和微软合作撰写的论文，发表在KDD’18上。论文地址：http://www.kdd.org/kdd2018/accepted-papers/view/xiaoice-banda-melody-and-arrangement-generation-framework-for-pop-music 论文笔记摘要以前的模型在歌曲生成中有限制，因为歌曲对旋律和联系都有要求。除此之外，一些关系到歌曲质量的因子，例如和弦行进和节奏模式上做的不好。而且多轨音乐如何保证其和谐程度也是个未探索的问题。 本文提出了一个着力在流行音乐生成的端到端模型，“小冰乐队”，歌曲通过几种乐器进行演奏。对于旋律和和弦行进，本文设计了Chord based Rhythm and Melody CrossGeneration Model (CRMCG)架构；对于多轨音乐的组织，本文设计了Multi-Instrument Co-Arrangement Model (MICA)架构。 模型在一个真实世界数据集上做了拓展实验，证明了小冰乐队的有效性。 Introduction文章首先介绍了一下音乐生成的历史。2003年Conklin从真实音乐中采样生成音乐；之后N-gram和Markov模型也应用于生成上。这些方法需要手动选取特征。Magenta使用DRNN从MIDI中学习生成音乐，然而只是单轨。 现有的方法并没有很好的解决一些重要挑战。特别在这几个方向： 和弦行进在流行音乐里通常是存在的，其指导了旋律的走向。如果能将和弦行进作为输入进行音乐生成，这是有好处的；流行音乐有几个固定的节奏模式（pattern），让歌曲更加结构化、暂停恰当。然而现有的逐个音符的生成模型无法考虑节奏模式，另一方面，这些模型尽管使用了和弦，但只是用单和弦作为输入的一个feature，而不考虑和弦的整体行进。 完整的歌曲考虑了多轨的和弦、鼓点、节奏模式的组织，以及其他乐器共同演奏的背景伴奏，但这些模型没能组织起多轨架构。 不同轨道和乐器有其自己的特点，然而它们也应该和谐演奏。极少现有工作研究了多轨音乐生成，但没有模型考虑到多轨之间的和谐性。 本文推出了CRMCG和MICA模型。前者用来生成音乐，后者用来保证和谐。Attention和MLP用于捕捉其它task的有效信息。本文主要贡献如下： 提出了端到端的多轨歌曲生成模型，包括旋律和组织。 基于音乐知识，作者利用和弦行进指导旋律进行和节奏模式，学习歌曲结构；然后使用旋律和节奏交叉生成的方法进行音乐生成。 作者发展了多任务的联合生成网络，在decoder层的每一个step里使用了其他的task states，以保证多轨音乐的和谐性。 大量的实验表明，模型优于baseline。 Ralated Work音乐生成在音乐生成上一开始有数据驱动的传统统计学方法，但是需要大量人力和领域知识。 深度学习上的方法有RNN，VAE和GAN几种方法。对于RNN来说，有一项工作利用分层RNN也生成了搭配的和弦和鼓点（看了一下引用列表，因为这个领域不大，除了VAE那篇以外我都是好好读过的）。 然而没有单一的研究考虑了音乐的特殊性（比如流行音乐里的和弦行进）。下图所示是各个模型的特点对比： 多任务学习多任务学习经常被用于在相关的任务间共享特征，因为一个任务中学到的特征可能对其他任务有帮助。多任务学习在NLP和CV里都广泛应用。 背景知识/名词定义和弦的行进这段话是我自己总结的： 和弦的行进是人们在创作音乐时挖掘的套路。随着共同声部的保留和和弦顺/逆级进，一个成功的和弦走向能让人感到完善和谐。一般流行音乐中，在主和弦和结束式中插入调内和弦可以拓展歌曲长度，同时让歌曲流畅发展。 更多知识可以这个知乎问题。 节奏模式流行音乐中会出现一些相同重复的结构，使得流行音乐有着结构化特点。 乐器特点很多流行歌是多轨的，而钢琴一般负责主旋律，其他乐器负责伴奏。 问题陈述 &amp; 模型结构表中为使用的数学符号含义。 问题陈述在音乐生成的任务上，给定输入为和弦进行式 C = \\{c_1, c_2, ..., c_{l_c}\\}其中$c_i$为和弦的one-hot编码，$l_c$是序列长度。 要生成的节奏 R_i = \\{r_{i1}, r_{i2}, ..., r_{il_r}\\}和旋律 M_i = \\{r_{i1}, r_{i2}, ..., r_{il_m}\\}。 框架分为四个部分（如图）： 数据处理 CRMCG单音轨旋律生成 MICA多音轨组织生成 展示 CRMCGCRMCG的模型框架如图所示： 图中我用Surface Pen做了一些不影响阅读的标记。 给定一个长度为N的和弦行进，我们要生成的当然是N个音乐片段。我们将这N个音乐片段标记为${p_1, p_2, …, p_N}$，每一个片段里（假设片段$i$），有着节奏$R_i$和旋律$M_i$。 和弦的one-hot编码需要降维。通过一个Embedding矩阵输出和弦的低维表示： \\overline{C} = E_cC, E_c \\in \\mathbb{R}^{V_c * d}然后使用一个GRU来处理和弦。然后使用这些hidden states来帮助生成节奏和旋律。 \\overline{h}^c_{i,0} = GRU(\\overline{c}_i), i= 1,2,...,l_c节奏生成生成的节奏需要与音乐已经存在的部分保持和谐。所以，要把之前的音乐部分考虑进去。 首先我们将之前生成的节奏Embedding回来： \\overline{R}_{t-1} = E_rR_{t-1}, E_r \\in \\mathbb{R}^{V_r * d}\\overline{M}_{t-1} = E_mM_{t-1}, E_m \\in \\mathbb{R}^{V_m * d}其中$V_m$与$V_r$是音符和鼓点的字典尺寸。然后输入GRU Encoder： \\overline{h}^m_{t-1,i} = GRU(\\overline{m}_{t-1,i}), i= 1,2,...,l_m\\overline{h}^r_{t-1,i} = GRU(\\overline{r}_{t-1,i}), i= 1,2,...,l_r将两个Encoder最后的hidden states进行concat拼接，然后线性变换作为Decoder的初始state，依次进行decode。 s^r_0 = g(W[\\overline{h}^m_{t-1,l_m}, \\overline{h}^r_{t-1,l_r}]+b), W \\in \\mathbb{R}^{b*b}s^r_i = GRU(u^r_{i-1}, s^r_{i-1}), i>0y^r_i = softmax(s^r_i)旋律生成不同于节奏生成，旋律的生成i要考虑到和弦的因素。与节奏部分类似地，将三个hidden state进行拼接，然后进行Decode。 s^m_0 = g(W[\\overline{h}^m_{t-1,l_m}, \\overline{h}^r_{t,l_r}, \\overline{h}^c_t]+b), W \\in \\mathbb{R}^{b*b}s^m_i = GRU(u^m_{i-1}, s^m_{i-1}), i>0y^m_i = softmax(s^m_i)损失函数对于两个部分，分别设置一个损失函数，形式都为softmax cross-entropy函数。在节奏模块，只更新与节奏损失$L^r$有关的参数；在旋律模块，更新所有参数。 MICAMICA设计了一个One-to-Many Sequence Generation任务（OSMG）。不同于常规的多序列学习，OSMG生成的序列有着紧密的联系。 如同下图所示，Decoder的hidden state包含了序列信息。所以，在生成一个音轨中的音符的时候，自然地引入了其他音轨的hidden state。作者设计了两个合作的cell在decoder的隐层之间进行hidden states的整合。 Attention Cell作者设计了一个attention cell，捕获其它task的state供current states使用，结构如下图： attention机制如下列公式： a^i_{t,k} = \\sum^T_{j=1}\\alpha_{t,ij}h^j_{t,k-1},e_{t,ij} = v^T\\tanh(Wh^i_{t,k-1}+Uh^j_{t,k-1}), W,U \\in \\mathbb{R}^{b*b},\\alpha_{t,ij} = \\frac{exp(e_{t,ij})}{\\sum^T_{s=1}exp(e_{t,is})}其中$a^i_{t.k}$代表task $i$在step $k$，period $t$的合作向量；$h^j_{t,k-1}$代表了第$j$个任务在step $k-1$，period $t$的hidden state。 之后，修改GRU单元，允许其他音轨的信息能够充分影响到当前音轨的形成。 MLP Cell为了同时考虑到每种乐器的重要程度，通过其重要程度对hidden states进行整合，作者设计了这样一个模块： 其公式为： 损失函数受上述公式的启发，作者优化了以相同Encoder生成的表示为条件的几个条件概率项的总和。 L(\\theta) = {argmax}_\\theta(\\sum_{T_k}(frac{1}{N_p}\\sum^{N_p}_ilogp(Y_i^{T_k}|X_i^{T_k};\\theta)))其中$\\theta = {\\theta_{src}, \\theta_{trgT_k},T_k = 1,2,…, T_m}$，$m$是任务的总数。$\\theta_{src}$是源encoder的参数集，$\\theta_{trgT_k}$是第$T_k$个目标音轨的参数集，$N_p$是第$p$个序列对，平行training corpus的大小。 生成假设已经有了旋律序列$M_i = {m_{i1}, m|_{i2), …,m_{il_m}}$，下一个步骤是生成其他的乐器音轨，去配合这个旋律。使用GRU处理序列，得到Decoder的初始state： \\overline{M} = E_mM, Em \\in \\mathbb{R}^{V_m * d}s^m_0 = GRU(\\overline{m}_i, l_m)多序列decoder的输出，与其他乐器音轨联系，所以考虑旋律和其他的伴奏音轨： s^i_t = AttentionCell(y^i_{t-1}, s^i_{t-1}), t>0, ors^i_t = MLPCell(u^i_{t-1}, s^i_{t-1})， t>0y^i_t = softmax(s^i_t)其中，$s^i_t$是第$i$个任务在第$t$个step的hidden state。作者使用softmax层，利用这个state得到第$i$个乐器的序列。Attention Cell和MLP Cell，用来得到合作的state，包含了本身的乐器state和其他乐器的state，保持所有乐器和谐。 实验作者在两个数据集上做了实验，包括旋律生成和组织生成。 数据描述做实验的数据集叫做真实世界数据集（a real-world dataset），包含了超过50000个MIDI文件。去除掉没有区分音轨的文件，最后14,077个文件得以保留。每个MIDI文件包含了几种不同的音轨，如：旋律、鼓、贝斯、弦乐。 为保证实验结果可靠性，作者将所有的MIDI文件移到了C大调或者A小调，保证音乐在同样的调上。然后作者设置速度为60bpm，将一个period片段设置为两个小节长。数据集统计如下表： 训练细节采用9855个文件作为训练集，2855个用于调整参数，最后1407个文件作为训练集。 每个GRU的hidden unit设为256，Attention Cell和MLP Cell的参数维度为256。模型使用SGD进行训练，batch size为64，验证集使用交叉熵损失函数。 旋律生成只使用MIDI的旋律音轨。 Baseline Magenta，Google的RNN项目 GANMidi，Yi-Hsuan Yang的MidiNet 设计了三种不同的方法进行评测： 完整版 移除了和弦信息 分别基于两个损失函数进行交叉训练。 Performance使用8个志愿者打分。 考虑下列因素： 节奏 旋律 整合性/整体结构 适合唱的程度 和弦进行的分析作者定义了和弦精确度，来度量生成的旋律是否符合输入的和弦序列： 其中$P$是period片段的数量，$y_i$是第$i$个生成旋律，检测出来的和弦，而$\\widetilde{y_i}$是输入的和弦。 准确度达到了82.25%，同时发现随着和弦精确度提升，旋律质量得到了保证。 休止符分析作者通过对比生成音乐片段的最小、最大、平均长度，对比数据集音乐，分布如果接近，证明模型的休止是恰当的。 组织生成Baseline HRNN，《Song From Pi》的模型 对比下面两种方法： Attention Cell MLP Cell 整体Performance 性能优于HRNN 多音轨得分高于单音轨（但是评测更倾向于整体氛围） MLP比Attention得分更高 和谐程度分析考虑：如果两个音轨有相似的和弦进行，我们认为它们和谐。 实验发现音轨少，和谐度会更高。因此对于多音轨的生成，和谐度有着更高的要求。 组织分析 音符准确度 莱文斯坦相似度 音符分布的均方误差 空白结果 具体的分析在这里略过。 见解和感想这篇论文的亮点是显而易见的。 首先在单音轨的音乐生成里，在流行音乐的框架中捕捉了和弦行进式，将其作为输入，进行训练。和弦行进式很好的把握了音乐的主要节奏，是一个很好的突破口。 我大二刚接触音乐生成的时候，想的思路就是通过和弦行进式进行音乐生成。但是那个时候限于我编码能力太弱，想法未能落地，也接触不到相关的老师来指点我，完全是自己摸索的。总而言之，和弦行进式这个总体思路我非常赞同。 在单音轨的音乐训练时，数据的预处理非常重要。现在Kaggle有很多音乐相关的数据集，这是我以前没有注意到的。也许有非常合适的数据集来做相关的研究，但是就我目前所知，自带和弦行进式的数据集非常难找。也就是说数据预处理本身就是一项有挑战性的工作。对我来说，这个数据的来源非常有趣，我以后也会去Kaggle里找找有趣的数据集。 音乐相关的工具也是音乐生成的难点之一。怎么表示音乐？这篇文章提到的处理方法是将音符和节奏的one-hot编码embedding处理，作为输入。我认为这一点处理得比较模糊。音符的时长怎么办？一些问题在论文里没有讲述清楚。目前通用的编码是music21编码，我认为在工程实现上使用music21去处理移调、变速等问题是一个比较现实的做法。 那么多音轨音乐呢？这是我认为本文最出彩的一点，可以说是多音轨生成开先河的一个方法。我阅读论文的大部分时间都在理解多音轨音乐的结构上。Attention Cell和MLP Cell我认为非常有创意——如果是我自己来做多音轨，我可能会想到利用Attention，但无法以明确的形式将这个方法落地。 本文提出了一些分析方法，我认为是具有其独到之处的。音乐生成和文本生成一样，都有着没法量化的困难，而本文所做的分析恰恰是对Evaluation一个很好的补充。本文结合了和弦行进式，提出了一个Chord Accuracy，我在文中翻译为和弦精确度。这是一个直接的分析方法，又没有像BLEU那样放在音符的层次，而是放在了和弦的层次。我在这里好奇一点，作者是怎么识别生成音乐所属的和弦的？如果有一个自动的办法，可不可以将其加入Loss函数？ 对于音符分布的分析方法对我来说也是一个启发，因为音乐生成的休止也一直是悬而未决的难题，或者说没有根本理论来解决。现在通过分布来衡量，那么对于休止就有了一个漂亮的量化过程。下面是我的想法：如果我们训练一个VAE，类似句子复述的问题一样，将生成的音乐进行微调，使两个分布尽量接近，会怎么样呢 总而言之，这篇文章在多音轨音乐的生成上做了贡献，是一篇非常棒的文章。美中不足的是，作者在细节上面没有完全说明；没有放出音乐的sample导致无法客观评估其生成水准，以及最终的效果理应还有调整与改进的途径。","tags":[{"name":"论文笔记","slug":"论文笔记","permalink":"http://ldzhangyx.github.io/tags/论文笔记/"},{"name":"音乐生成","slug":"音乐生成","permalink":"http://ldzhangyx.github.io/tags/音乐生成/"},{"name":"自然语言处理","slug":"自然语言处理","permalink":"http://ldzhangyx.github.io/tags/自然语言处理/"}]},{"title":"《Multi-modal Sentence Summarization with Modality Attention and Image Filtering》论文笔记","date":"2018-09-25T06:07:31.000Z","path":"2018/09/25/Summarization-Attention-Filtering/","text":"宗成庆老师的这篇文章发表于ACL’18，同时获得了国家自然科学基金的支持。文章着眼于利用图片信息提升摘要与原文本的相关性。原文：www.nlpr.ia.ac.cn/cip/ZongPublications/2018/2018HaoranLiIJCAI.pdf 论文笔记摘要本文介绍了一种多模态句子摘要任务，输入为一张图片和一对句子，输出为摘要。作者称其为MMSS任务。任务的难点在于怎么将视觉信息输入到框架里，以及怎么减小噪音。针对这两个问题，作者分别提出了两个方法：同时施加不同的注意力到文本和图片上；使用图像过滤Image Filter来降噪。 介绍主要是讲了文本摘要的历史，以及多模态方法最早应用在翻译领域，表现特别好，但是作者认为在摘要上表现得应该更好。 在解决MMSS任务的时候，作者准备使用分层注意力机制，底层分别关注图片和文本的内部，而上层对两个模态进行平衡。因为图片不能表现很多抽象内容，所以图片特征需要过滤去噪；为了解决生成句子结巴的问题，使用了coverage方法。 顺便他们做了一个数据集，真是让人肝疼的工作量。 图片展示了多模态模型的实际效果要好于文本模型。 模型结构模型可见由句子编码器，图片编码器，摘要解码器和图片过滤器四个部分组成。 模型图模型简图如下： 句子Encoder模型的句子Encoder使用了Bi-GRU。 \\overrightarrow{h}_i = GRU(E[x_i], \\overrightarrow{h}_{i-1})\\overleftarrow{h}_i = GRU(E[x_i], \\overleftarrow{h}_{i-1})图片Encoder图片Encoder使用了VGG19，抽取了两种特征：7x7x512的局部特征（flatten之后成为了49x512），和4096维的全局特征。其中局部特征表示为： A = (a_1, ..., a_L), L=49 \\\\ a_l \\in \\mathbb{R}^{512}摘要DecoderDecoder使用了单向GRU： s_t = GRU(s_{t-1}, y_{t-1}, c_t)其中，初始状态$s_0$，作者提出了几种初始化策略： s_0 = \\tanh(\\mathbf{W}_{h2}[\\overrightarrow{h}_{n};\\overleftarrow{h}_{1}]+ \\mathbf{W}_{q}q)利用了全局特征； s_0 = \\tanh(\\mathbf{W}_{h3}[\\overrightarrow{h}_{n};\\overleftarrow{h}_{1}]+ \\mathbf{W}_{v}\\frac{1}{L}\\sum_{i=1}^{L}a_i)与 s_0 = \\tanh(\\mathbf{W}_{h3}[\\overrightarrow{h}_{n};\\overleftarrow{h}_{1}]+ \\mathbf{W}_{v}\\frac{1}{L}\\sum_{i=1}^{L}a_ia_i)利用了局部特征； 其中，$q$为全局特征，$a$为各个局部特征，如上文所说。 Hierarchical Attention在Decoder使用的context向量$c_t$，使用一个顶层的Attention，对图片context和文本context进行平衡统一： c_t = \\beta_t^{txt}\\mathbf{V}_Tc_{txt} + \\beta_t^{img}\\mathbf{V}_Ic_{img}其中， \\beta_t^{txt} = \\sigma(\\mathbf{U}_as_{t-1}+\\mathbf{W}_ac_{txt})\\beta_t^{img} = \\sigma(\\mathbf{U}_bs_{t-1}+\\mathbf{W}_bc_{img})对于文字的attention，使用普通的attention： c_{txt} = \\sum_{i=1}^N\\alpha_{t,i}^{txt}h_i其中$N$为输入的文字序列长度，也就是embedding过后的向量总数量，$h_{i}$是Encoder的第$i$个Hidden State，这个公式将其加权求和。其中$\\alpha_{t,i}^{txt}$与Decoder上一个时态的状态$s_{t-1}$与第$i$个Encoder的Hidden State，$h_{i}$有关。 \\alpha_{t,i}^{txt} = \\frac{exp(e_{t,i}^{txt})}{\\sum_{j=1}^Nexp(e_{t,j}^{txt})}e_{t,i}^{txt} = f(s_{t-1}, h_i) = v_a^T\\tanh(\\mathbf{U}_cs_{t-1} + \\mathbf{W}_ch_i)而对于图片attention，作者将每个feature map作为输入，进行attention处理： c_{img} = \\sum_{i=1}^L\\alpha_{t,i}^{img}a_l其中L为feature map数量，$a_l$为局部特征。 \\alpha_{t,i}^{img} = \\frac{exp(e_{t,i}^{img})}{\\sum_{j=1}^Nexp(e_{t,j}^{img})}e_{t,i}^{img} = f(s_{t-1}, h_i) = v_b^T\\tanh(\\mathbf{U}_ds_{t-1} + \\mathbf{W}_da_l)Coverage Model(覆盖率模型)覆盖率模型可以参考《Get to the point》一文的论文笔记。 Image Filter作者设计了两个filter：Image Attention Filter和Image Context Filter。 Image Attention FilterImage Attention Filter的目的在于“directly applied to change the attention scale between image and text”，即根据图片与文本的相关性进行数值控制。 I_a = \\sigma(v_s^Ts_0 + c_q^Tq + v_r^Ts_{t-1})然后用这个系数更新： \\beta_t^{img} = I_a \\cdot \\beta_t^{img}其中$s_{0}$是decoder的初始状态，$q$是图片全局特征，这两个参数用来表示图片相关性；$s_{t−1}$是decoder上一个time step的状态，用来表示与下一个单词的联系。 Image Context Filter对于Image Context Vector，作者解释是脱胎于以前的思路（“Image context filter is partially inspired by gating mechanism which has gained great popularity in neural network models”），但是应用在多模态方法上仍属创新。 I_a = \\sigma(\\mathbf{W}_ss_0 + \\mathbf{W}_qq + \\mathbf{W}_rs_{t-1})这里的矩阵相乘可以使用Dense Layer实现，但是$I_c$与$I_a$最大的不同在于，$I_c$是一个向量，其元素用于控制特征的选择。 c_{img} = I_{c} \\odot c_{img}数据集本文贡献了一个MMSS任务使用的数据集。数据集首先从Gigaword Corpus里作为基础，对每个Headline，使用Yahoo!搜索图片，并取出top 5图片。之后删除无关图片（人物，缩略图，广告），雇佣10个研究生选择最匹配的图片（无图片标0），最后得到66,000条可用数据。随机将62,000作为训练集，2,000作为测试集，2,000作为开发集。 Evaluation作者做了广泛的对比： 分析Q：对Decoder状态进行的初始化有效吗？A：有效。 Q：图片有助于提升摘要质量吗？A：是的，可能是因为图片提供了更多信息。 Q：哪种图片更有效？A：要求3个研究生标注300条数据中图片的匹配程度（匹配从1到3），发现更加匹配的图片所在的那条数据，模型能获得更高的ROUGE分数。 Q：多模态coverage的有效性？A：通过计算重复词，textual与visual coverage确实能减少重复词的出现。 想法亮点这篇文章的思路与一般的额外信息有一些区别，同是用额外信息干涉指导文本生成，这个模型同时使用了两个attention，并提出了一种加权机制将两个attention组合起来。在我读过的另一篇文章《Diversity driven Attention Model for Query-based Abstractive Summarization》中，作者试图用query的context干涉document的context，而不直接显性参与decoder的过程。 文中计算权值的时候，充分考虑了各种可能性；在Image Attention Filter那一块，将数个特征非线性组合起来，虽然显得参数有点多，好在不无道理。 贡献了一个全新的数据集（动用了10个研究生，真有钱），脱胎于Gigawords，对这个领域做出了基础性贡献。 思考首先，对于数据集，我认为可以选择替代的数据集，可能是我之前做过中文摘要，我很自然地就想到了LCSTS，可以用同样的方法构建数据集，但是这个很费时间精力，而且并不是什么突出的想法贡献。 其次，为什么用VGG提取特征？在这个框架里，VGG提取特征取到的效果我持保留态度。即使有了图片特征又能怎么样呢？到底是一个怎样的机制让VGG的图片特征与关键字对上的？我认为这样的attention拼凑框架思路时非常棒的，但是图片特征与文字的多模态映射我始终不明白how it works. 作为替代方法，我很自然地想到了CV里的目标检测，使用选择性搜索，SVM判断图像中的实体，再作为特征送进模型，我认为这是一个更接近直觉的做法。 再次，Image Filtering这个做法我认为需要改进为更加reasonable的做法。我们完全可以做一个key-word版本的Filter。Filter有两个版本，Image Attention Filter的系数$I_a$是根据图像与文本的相关性来控制图像干预的程度；而Image Context Filter的系数$T_c$是用来突出图像特征的。这个想法理应可以迁移到word的使用上。 最后，文中用到的小trick，textual coverage mechanism，为了解决结巴问题，我们可以考虑其他的机制，比如将context vector做软正交化处理。","tags":[{"name":"论文笔记","slug":"论文笔记","permalink":"http://ldzhangyx.github.io/tags/论文笔记/"},{"name":"多模态","slug":"多模态","permalink":"http://ldzhangyx.github.io/tags/多模态/"},{"name":"生成式摘要","slug":"生成式摘要","permalink":"http://ldzhangyx.github.io/tags/生成式摘要/"},{"name":"自然语言处理","slug":"自然语言处理","permalink":"http://ldzhangyx.github.io/tags/自然语言处理/"}]},{"title":"10分钟快速构建Unity中的万能对话系统 / 叙事系统 / 剧情系统","date":"2018-04-04T16:46:00.000Z","path":"2018/04/05/unity-fungus/","text":"&nbsp; 我真的很久没有写过一个完整的攻略了（笑），咸鱼了很久之后还是想来写一个好玩的。这次主要是梳理一下Unity的小众插件Fungus的核心功能，并且快速掌握其使用方法。 官方文档：http://fungusdocs.snozbot.com/ 视频教程：https://www.youtube.com/watch?v=9zqUx0xZBv4 那么首先Fungus是什么呢？Fungus提供了一个交互式的界面，快速构建一个对话系统，甚至是文字游戏（AVG）的核心组件。 Fungus在Unity 3D项目中，主要是做剧情讲述部分，故我主要是阐述Fungus怎么做好一个剧情阐述。 &nbsp; 一，怎么创建一个叙述？场景开始时的故事阐述 首先我们打开一个Unity项目，当然我手上是有一个项目的，目前正在参加Imagine Cup 2018. &nbsp; &nbsp;首先我们在Tools里找到Fungus。事先我们需要在Unity的Assets Store里安装这个插件。 &nbsp; 创建一个Flowchart。这样我们可以发现左边的树里已经多了一项Flowchart。 接下来我们打开Fungus的Flowchart窗口。 然后会出现一个这样的界面： &nbsp; 接下来我们点一下这个Block，为它改名为&ldquo;StartStory&rdquo;，然后将触发条件设为&ldquo;GameStart&rdquo;。 &nbsp; 接下来为这个Block添加一些内容。 我们选择&ldquo;+&rdquo;，然后选择narrative里的say，添加一个新的叙述。 &nbsp; &nbsp; &nbsp; 如果需要多段叙述，可以继续添加不同的块。 &nbsp; 到现在我们都没有看见一行代码，是不是非常简洁？ &nbsp; 二，对话系统开放！Character与Menu 一直到刚才我讲的都是单线叙事，现在我引入一个概念：Character。 接下来我们建立一个叫做boy的人物。 我们可以为人物指定一个Portrait（肖像），实现类似下图的效果： &nbsp; 如图操作： 现在有了一个Character之后，我们的对话就可以指定角色来区分了。 当然还有一个加快速度的剧情添加办法：Narrative &gt; Conversation。 &nbsp; &nbsp;然后将剧情以这样的方式添加：[character] [portrait] [position] [hide] [&lt;&lt;&lt; | &gt;&gt;&gt;]: [Dialogue text] 示例： 12345678910111213john bored left: Oh, so that&apos;s how you use the Conversation command.sherlock eyeroll right: Yes, well done John.You catch on quickly don&apos;t you?hide john &quot;offscreen left&quot;: I sure do.-- This is a comment, it doesn&apos;t appear in the conversationjohn angry middle: Wait, what!left: There&apos;s no need to be rude Sherlock!bored: Not like that would stop you.sherlock excited: AHA! So that&apos;s how you do a conversation from Lua!Fascinating.john &lt;&lt;&lt;: Yes, riveting.john hide:sherlock hide: 接下来就能顺利展开剧情了。 &nbsp; 接下来是一个重要功能：Menu。Menu可以为我们做出剧情走向，即根据选择跳转到不同的Block。 首先我们做一个简单的对话选择支：答题系统。 &nbsp; 首先我们在Block后创建四个Menu： 然后再新建几个新的Block，将Menu的target指向新的Block。 这样就可以实现一个对话分支了。 请看答题系统的Fungus实现: &nbsp;最后就可以形成一个对话树结构。 &nbsp; 三，触发式对话 当然我们知道，一个正常的人物对话其实应该是触发式展开的。比如说你走近一个人，就开始自动对话，或者是按下键，就自动对话。 这里提供一个简单的触发式解决办法，当然这不是唯一的解决办法： 1，首先我们给人物加一个Collider，Box Collider即可。 &nbsp; 这里最好让Collider不碰到任何其他物体。 &nbsp;同时注意，我们还要创建另一个Collider来保证人物不被穿过。这个时候可以用Sphere Collider。 2，我们勾选触发器，isTrigger选项。 然后在这个人物这里新建一个C#脚本，编辑触发器函数： &nbsp; 这里的Message类似一个信号，当我们触发了这个Collider之后，广播了一个信号，我暂且取名为majorTask1. 同时我们将block的触发条件设置为&rdquo;Message Received&ldquo;。 &nbsp; 这样我们就可以设置成触发式对话了。 &nbsp; ================================= 这是我们正在开发的独立游戏：《无尽音海》音乐跑酷+探索城市。目前正在开发阶段。 &nbsp;","tags":[{"name":"Unity","slug":"Unity","permalink":"http://ldzhangyx.github.io/tags/Unity/"}]},{"title":"【TensorFlow随笔】关于一个矩阵与多个矩阵相乘的问题","date":"2017-12-20T17:00:00.000Z","path":"2017/12/21/tensorflow-matrix/","text":"问题描述： Specifically, I want to do matmul(A,B) where &nbsp;’A’ has shape (m,n) &nbsp;’B’ has shape (k,n,p) and the result should have shape (k,m,p) 参考网站： https://groups.google.com/a/tensorflow.org/forum/#!topic/discuss/4tgsOSxwtkY https://stackoverflow.com/questions/38235555/tensorflow-matmul-of-input-matrix-with-batch-data 解决办法： 1，我们知道TensorFlow的matmul已经支持了batch，即： A = tf.Variable(tf.random_normal(shape=(a, b, n, m))) B = tf.Variable(tf.random_normal(shape=(a, b, m, k))) tf.matmul(A, B) 会返回(a,b,n,k)，前面的N个维度会被保留。但是适用情景与题目不符。 2，所以我们自然想到reshape。 You can conflate the two dimensions not used in the multiplication using reshape, multiply the two matrices, and then call reshape again to get the desired shape. This is equivalent to doing batch multiplication. 简而言之呢，就是，你可以将乘法中用不到的维度reshape到后面去，比如 (k, m, p) =&gt; (m, p * k) 进行矩阵乘法得到：(n, p * k) 之后reshape成：(k, n, p)。 虽然有些麻烦，但这是唯一的解决办法了。 适用情景：A矩阵只有一个，但是B矩阵有batch_num个，需要逐个进行矩阵乘法的场合。","tags":[{"name":"TensorFlow","slug":"TensorFlow","permalink":"http://ldzhangyx.github.io/tags/TensorFlow/"}]},{"title":"【Python音乐生成】可能有用的一些Python库","date":"2017-11-05T14:01:00.000Z","path":"2017/11/05/python-package/","text":"1，Python-MIDI，很多操作库的前置库。作者提供了一个python3的branch。git clone下来之后注意切换到这个branch之后再运行setup.py。 实际使用的时候，使用 1import midi 进行使用。 &nbsp; 2，pretty-midi，非常有用的一个库，将midi进行了二次转换，变成piano-roll。这个库被用在Google Magenta里，我自己的项目也要使用它。master分支现在已经支持了Python3. &nbsp; &nbsp; 3，fluidsynth3，原作者感觉像是跑路了，有大神写出了其Python3版本，真的非常感谢。这个库是上面pretty-midi的前置库。 &nbsp; 以上就是最常见的几个专门处理音乐的库了。 当然一些自己用过的库感觉也是可以的。 4，mingus，第三方推出了其Python3版本。 &nbsp; 最后默默祝福自己顺利写出论文来&hellip;&hellip; &nbsp;","tags":[]},{"title":"克苏鲁神话 中文合集","date":"2017-10-10T08:41:45.000Z","path":"2017/10/10/cthulhu-book-share/","text":"前言自己加入TRPG的团体已经有大半年了，然而一直对克苏鲁神话体系大背景不是特别了解。成为守秘人带团的时候，我的参照是规则书和剧本，却不能灵活地演绎一些新的剧情。 于是我Google了克苏鲁神话体系，终于在GitHub上找到了一个还算满意的开源项目。很多文章都是竹子翻译的，我个人认为翻译质量尚可，放在我的网站上，权当补档吧。 版权本电子书的版权归作者和译者所有。 GitHub地址点这里。 文档下载点击这里可以直接下载。 点击下载","tags":[{"name":"TRPG","slug":"TRPG","permalink":"http://ldzhangyx.github.io/tags/TRPG/"},{"name":"克苏鲁神话","slug":"克苏鲁神话","permalink":"http://ldzhangyx.github.io/tags/克苏鲁神话/"}]}]